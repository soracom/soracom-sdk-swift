//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class APICallError: Codable, Equatable {

    public var errorMessage: APICallErrorMessage?

    public var httpStatus: Int?

    public init(errorMessage: APICallErrorMessage? = nil, httpStatus: Int? = nil) {
        self.errorMessage = errorMessage
        self.httpStatus = httpStatus
    }

    private enum CodingKeys: String, CodingKey {
        case errorMessage
        case httpStatus
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        errorMessage = try container.decodeIfPresent(.errorMessage)
        httpStatus = try container.decodeIfPresent(.httpStatus)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        try container.encodeIfPresent(httpStatus, forKey: .httpStatus)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? APICallError else { return false }
      guard self.errorMessage == object.errorMessage else { return false }
      guard self.httpStatus == object.httpStatus else { return false }
      return true
    }

    public static func == (lhs: APICallError, rhs: APICallError) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
