//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class BeamStatsResponse: Codable, Equatable {

    public var beamStatsMap: [String: SoracomBeamStats]?

    public var date: String?

    public var unixtime: Int?

    public init(beamStatsMap: [String: SoracomBeamStats]? = nil, date: String? = nil, unixtime: Int? = nil) {
        self.beamStatsMap = beamStatsMap
        self.date = date
        self.unixtime = unixtime
    }

    private enum CodingKeys: String, CodingKey {
        case beamStatsMap
        case date
        case unixtime
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        beamStatsMap = try container.decodeIfPresent(.beamStatsMap)
        date = try container.decodeIfPresent(.date)
        unixtime = try container.decodeIfPresent(.unixtime)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(beamStatsMap, forKey: .beamStatsMap)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(unixtime, forKey: .unixtime)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BeamStatsResponse else { return false }
      guard self.beamStatsMap == object.beamStatsMap else { return false }
      guard self.date == object.date else { return false }
      guard self.unixtime == object.unixtime else { return false }
      return true
    }

    public static func == (lhs: BeamStatsResponse, rhs: BeamStatsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
