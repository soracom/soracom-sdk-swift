//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class CreateCouponRequest: Codable, Equatable {

    public enum ApplicableBillItemName: String, Codable {
        case dailyDataTrafficChargeTotal = "dailyDataTrafficChargeTotal"
        case dailyChargeTotal = "dailyChargeTotal"
        case dailySoracomBeamRequestChargeTotal = "dailySoracomBeamRequestChargeTotal"

        public static let cases: [ApplicableBillItemName] = [
          .dailyDataTrafficChargeTotal,
          .dailyChargeTotal,
          .dailySoracomBeamRequestChargeTotal,
        ]
    }

    public var amount: Int?

    public var applicableBillItemName: ApplicableBillItemName?

    public var expiryYearMonth: String?

    public init(amount: Int? = nil, applicableBillItemName: ApplicableBillItemName? = nil, expiryYearMonth: String? = nil) {
        self.amount = amount
        self.applicableBillItemName = applicableBillItemName
        self.expiryYearMonth = expiryYearMonth
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case applicableBillItemName
        case expiryYearMonth
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        amount = try container.decodeIfPresent(.amount)
        applicableBillItemName = try container.decodeIfPresent(.applicableBillItemName)
        expiryYearMonth = try container.decodeIfPresent(.expiryYearMonth)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(applicableBillItemName, forKey: .applicableBillItemName)
        try container.encodeIfPresent(expiryYearMonth, forKey: .expiryYearMonth)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CreateCouponRequest else { return false }
      guard self.amount == object.amount else { return false }
      guard self.applicableBillItemName == object.applicableBillItemName else { return false }
      guard self.expiryYearMonth == object.expiryYearMonth else { return false }
      return true
    }

    public static func == (lhs: CreateCouponRequest, rhs: CreateCouponRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
