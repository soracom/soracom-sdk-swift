//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class CreateSubscriberResponse: Codable, Equatable {

    public var apn: String?

    public var createdAt: Int?

    public var expiryTime: Int?

    public var imsi: String?

    public var ipAddress: String?

    public var lastModifiedAt: Int?

    public var msisdn: String?

    public var operatorId: String?

    public var registrationSecret: String?

    public var serialNumber: String?

    public var speedClass: String?

    public var status: String?

    public var tags: Map?

    public init(apn: String? = nil, createdAt: Int? = nil, expiryTime: Int? = nil, imsi: String? = nil, ipAddress: String? = nil, lastModifiedAt: Int? = nil, msisdn: String? = nil, operatorId: String? = nil, registrationSecret: String? = nil, serialNumber: String? = nil, speedClass: String? = nil, status: String? = nil, tags: Map? = nil) {
        self.apn = apn
        self.createdAt = createdAt
        self.expiryTime = expiryTime
        self.imsi = imsi
        self.ipAddress = ipAddress
        self.lastModifiedAt = lastModifiedAt
        self.msisdn = msisdn
        self.operatorId = operatorId
        self.registrationSecret = registrationSecret
        self.serialNumber = serialNumber
        self.speedClass = speedClass
        self.status = status
        self.tags = tags
    }

    private enum CodingKeys: String, CodingKey {
        case apn
        case createdAt
        case expiryTime
        case imsi
        case ipAddress
        case lastModifiedAt
        case msisdn
        case operatorId
        case registrationSecret
        case serialNumber
        case speedClass
        case status
        case tags
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        apn = try container.decodeIfPresent(.apn)
        createdAt = try container.decodeIfPresent(.createdAt)
        expiryTime = try container.decodeIfPresent(.expiryTime)
        imsi = try container.decodeIfPresent(.imsi)
        ipAddress = try container.decodeIfPresent(.ipAddress)
        lastModifiedAt = try container.decodeIfPresent(.lastModifiedAt)
        msisdn = try container.decodeIfPresent(.msisdn)
        operatorId = try container.decodeIfPresent(.operatorId)
        registrationSecret = try container.decodeIfPresent(.registrationSecret)
        serialNumber = try container.decodeIfPresent(.serialNumber)
        speedClass = try container.decodeIfPresent(.speedClass)
        status = try container.decodeIfPresent(.status)
        tags = try container.decodeIfPresent(.tags)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(apn, forKey: .apn)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(expiryTime, forKey: .expiryTime)
        try container.encodeIfPresent(imsi, forKey: .imsi)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(lastModifiedAt, forKey: .lastModifiedAt)
        try container.encodeIfPresent(msisdn, forKey: .msisdn)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(registrationSecret, forKey: .registrationSecret)
        try container.encodeIfPresent(serialNumber, forKey: .serialNumber)
        try container.encodeIfPresent(speedClass, forKey: .speedClass)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(tags, forKey: .tags)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CreateSubscriberResponse else { return false }
      guard self.apn == object.apn else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.expiryTime == object.expiryTime else { return false }
      guard self.imsi == object.imsi else { return false }
      guard self.ipAddress == object.ipAddress else { return false }
      guard self.lastModifiedAt == object.lastModifiedAt else { return false }
      guard self.msisdn == object.msisdn else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.registrationSecret == object.registrationSecret else { return false }
      guard self.serialNumber == object.serialNumber else { return false }
      guard self.speedClass == object.speedClass else { return false }
      guard self.status == object.status else { return false }
      guard self.tags == object.tags else { return false }
      return true
    }

    public static func == (lhs: CreateSubscriberResponse, rhs: CreateSubscriberResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
