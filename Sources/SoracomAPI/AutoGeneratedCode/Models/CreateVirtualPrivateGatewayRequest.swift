//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class CreateVirtualPrivateGatewayRequest: Codable, Equatable {

    public enum PrimaryServiceName: String, Codable {
        case canal = "Canal"
        case gate = "Gate"

        public static let cases: [PrimaryServiceName] = [
          .canal,
          .gate,
        ]
    }

    public var primaryServiceName: PrimaryServiceName

    public var deviceSubnetCidrRange: String?

    public var useInternetGateway: Bool?

    public init(primaryServiceName: PrimaryServiceName, deviceSubnetCidrRange: String? = nil, useInternetGateway: Bool? = nil) {
        self.primaryServiceName = primaryServiceName
        self.deviceSubnetCidrRange = deviceSubnetCidrRange
        self.useInternetGateway = useInternetGateway
    }

    private enum CodingKeys: String, CodingKey {
        case primaryServiceName
        case deviceSubnetCidrRange
        case useInternetGateway
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        primaryServiceName = try container.decode(.primaryServiceName)
        deviceSubnetCidrRange = try container.decodeIfPresent(.deviceSubnetCidrRange)
        useInternetGateway = try container.decodeIfPresent(.useInternetGateway)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(primaryServiceName, forKey: .primaryServiceName)
        try container.encodeIfPresent(deviceSubnetCidrRange, forKey: .deviceSubnetCidrRange)
        try container.encodeIfPresent(useInternetGateway, forKey: .useInternetGateway)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CreateVirtualPrivateGatewayRequest else { return false }
      guard self.primaryServiceName == object.primaryServiceName else { return false }
      guard self.deviceSubnetCidrRange == object.deviceSubnetCidrRange else { return false }
      guard self.useInternetGateway == object.useInternetGateway else { return false }
      return true
    }

    public static func == (lhs: CreateVirtualPrivateGatewayRequest, rhs: CreateVirtualPrivateGatewayRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
