//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class CredentialsModel: Codable, Equatable {

    public enum `Type`: String, Codable {
        case awsCredentials = "aws-credentials"
        case azureCredentials = "azure-credentials"
        case psk = "psk"
        case x509 = "x509"

        public static let cases: [`Type`] = [
          .awsCredentials,
          .azureCredentials,
          .psk,
          .x509,
        ]
    }

    public var createDateTime: Int?

    public var credentials: [String: Any]?

    public var credentialsId: String?

    public var description: String?

    public var lastUsedDateTime: Int?

    public var type: `Type`?

    public var updateDateTime: Int?

    public init(createDateTime: Int? = nil, credentials: [String: Any]? = nil, credentialsId: String? = nil, description: String? = nil, lastUsedDateTime: Int? = nil, type: `Type`? = nil, updateDateTime: Int? = nil) {
        self.createDateTime = createDateTime
        self.credentials = credentials
        self.credentialsId = credentialsId
        self.description = description
        self.lastUsedDateTime = lastUsedDateTime
        self.type = type
        self.updateDateTime = updateDateTime
    }

    private enum CodingKeys: String, CodingKey {
        case createDateTime
        case credentials
        case credentialsId
        case description
        case lastUsedDateTime
        case type
        case updateDateTime
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        createDateTime = try container.decodeIfPresent(.createDateTime)
        credentials = try container.decodeAnyIfPresent(.credentials)
        credentialsId = try container.decodeIfPresent(.credentialsId)
        description = try container.decodeIfPresent(.description)
        lastUsedDateTime = try container.decodeIfPresent(.lastUsedDateTime)
        type = try container.decodeIfPresent(.type)
        updateDateTime = try container.decodeIfPresent(.updateDateTime)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(createDateTime, forKey: .createDateTime)
        try container.encodeAnyIfPresent(credentials, forKey: .credentials)
        try container.encodeIfPresent(credentialsId, forKey: .credentialsId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(lastUsedDateTime, forKey: .lastUsedDateTime)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(updateDateTime, forKey: .updateDateTime)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CredentialsModel else { return false }
      guard self.createDateTime == object.createDateTime else { return false }
      guard NSDictionary(dictionary: self.credentials ?? [:]).isEqual(to: object.credentials ?? [:]) else { return false }
      guard self.credentialsId == object.credentialsId else { return false }
      guard self.description == object.description else { return false }
      guard self.lastUsedDateTime == object.lastUsedDateTime else { return false }
      guard self.type == object.type else { return false }
      guard self.updateDateTime == object.updateDateTime else { return false }
      return true
    }

    public static func == (lhs: CredentialsModel, rhs: CredentialsModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
