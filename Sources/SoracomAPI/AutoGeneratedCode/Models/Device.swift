//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class Device: Codable, Equatable {

    public var deviceId: String?

    public var endpoint: String?

    public var firmwareVersion: String?

    public var groupId: String?

    public var ipAddress: String?

    public var lastModifiedTime: DateTime?

    public var lastRegistrationUpdate: DateTime?

    public var manufacturer: String?

    public var modelNumber: String?

    public var objects: [String: Any]?

    public var online: Bool?

    public var operatorId: String?

    public var registrationId: String?

    public var registrationLifeTime: Int?

    public var serialNumber: String?

    public var tags: [String: String]?

    public init(deviceId: String? = nil, endpoint: String? = nil, firmwareVersion: String? = nil, groupId: String? = nil, ipAddress: String? = nil, lastModifiedTime: DateTime? = nil, lastRegistrationUpdate: DateTime? = nil, manufacturer: String? = nil, modelNumber: String? = nil, objects: [String: Any]? = nil, online: Bool? = nil, operatorId: String? = nil, registrationId: String? = nil, registrationLifeTime: Int? = nil, serialNumber: String? = nil, tags: [String: String]? = nil) {
        self.deviceId = deviceId
        self.endpoint = endpoint
        self.firmwareVersion = firmwareVersion
        self.groupId = groupId
        self.ipAddress = ipAddress
        self.lastModifiedTime = lastModifiedTime
        self.lastRegistrationUpdate = lastRegistrationUpdate
        self.manufacturer = manufacturer
        self.modelNumber = modelNumber
        self.objects = objects
        self.online = online
        self.operatorId = operatorId
        self.registrationId = registrationId
        self.registrationLifeTime = registrationLifeTime
        self.serialNumber = serialNumber
        self.tags = tags
    }

    private enum CodingKeys: String, CodingKey {
        case deviceId = "device_id"
        case endpoint
        case firmwareVersion
        case groupId
        case ipAddress
        case lastModifiedTime
        case lastRegistrationUpdate
        case manufacturer
        case modelNumber
        case objects
        case online
        case operatorId
        case registrationId
        case registrationLifeTime
        case serialNumber
        case tags
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        deviceId = try container.decodeIfPresent(.deviceId)
        endpoint = try container.decodeIfPresent(.endpoint)
        firmwareVersion = try container.decodeIfPresent(.firmwareVersion)
        groupId = try container.decodeIfPresent(.groupId)
        ipAddress = try container.decodeIfPresent(.ipAddress)
        lastModifiedTime = try container.decodeIfPresent(.lastModifiedTime)
        lastRegistrationUpdate = try container.decodeIfPresent(.lastRegistrationUpdate)
        manufacturer = try container.decodeIfPresent(.manufacturer)
        modelNumber = try container.decodeIfPresent(.modelNumber)
        objects = try container.decodeAnyIfPresent(.objects)
        online = try container.decodeIfPresent(.online)
        operatorId = try container.decodeIfPresent(.operatorId)
        registrationId = try container.decodeIfPresent(.registrationId)
        registrationLifeTime = try container.decodeIfPresent(.registrationLifeTime)
        serialNumber = try container.decodeIfPresent(.serialNumber)
        tags = try container.decodeIfPresent(.tags)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(endpoint, forKey: .endpoint)
        try container.encodeIfPresent(firmwareVersion, forKey: .firmwareVersion)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(lastModifiedTime, forKey: .lastModifiedTime)
        try container.encodeIfPresent(lastRegistrationUpdate, forKey: .lastRegistrationUpdate)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encodeIfPresent(modelNumber, forKey: .modelNumber)
        try container.encodeAnyIfPresent(objects, forKey: .objects)
        try container.encodeIfPresent(online, forKey: .online)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(registrationId, forKey: .registrationId)
        try container.encodeIfPresent(registrationLifeTime, forKey: .registrationLifeTime)
        try container.encodeIfPresent(serialNumber, forKey: .serialNumber)
        try container.encodeIfPresent(tags, forKey: .tags)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Device else { return false }
      guard self.deviceId == object.deviceId else { return false }
      guard self.endpoint == object.endpoint else { return false }
      guard self.firmwareVersion == object.firmwareVersion else { return false }
      guard self.groupId == object.groupId else { return false }
      guard self.ipAddress == object.ipAddress else { return false }
      guard self.lastModifiedTime == object.lastModifiedTime else { return false }
      guard self.lastRegistrationUpdate == object.lastRegistrationUpdate else { return false }
      guard self.manufacturer == object.manufacturer else { return false }
      guard self.modelNumber == object.modelNumber else { return false }
      guard NSDictionary(dictionary: self.objects ?? [:]).isEqual(to: object.objects ?? [:]) else { return false }
      guard self.online == object.online else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.registrationId == object.registrationId else { return false }
      guard self.registrationLifeTime == object.registrationLifeTime else { return false }
      guard self.serialNumber == object.serialNumber else { return false }
      guard self.tags == object.tags else { return false }
      return true
    }

    public static func == (lhs: Device, rhs: Device) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
