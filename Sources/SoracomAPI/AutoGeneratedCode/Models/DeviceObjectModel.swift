//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class DeviceObjectModel: Codable, Equatable {

    public enum Format: String, Codable {
        case xml = "xml"
        case json = "json"

        public static let cases: [Format] = [
          .xml,
          .json,
        ]
    }

    public var createdTime: DateTime?

    public var format: Format?

    public var lastModifiedTime: DateTime?

    public var objectId: String?

    public var objectName: String?

    public var operatorId: String?

    public var scope: String?

    public init(createdTime: DateTime? = nil, format: Format? = nil, lastModifiedTime: DateTime? = nil, objectId: String? = nil, objectName: String? = nil, operatorId: String? = nil, scope: String? = nil) {
        self.createdTime = createdTime
        self.format = format
        self.lastModifiedTime = lastModifiedTime
        self.objectId = objectId
        self.objectName = objectName
        self.operatorId = operatorId
        self.scope = scope
    }

    private enum CodingKeys: String, CodingKey {
        case createdTime
        case format
        case lastModifiedTime
        case objectId
        case objectName
        case operatorId
        case scope
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        createdTime = try container.decodeIfPresent(.createdTime)
        format = try container.decodeIfPresent(.format)
        lastModifiedTime = try container.decodeIfPresent(.lastModifiedTime)
        objectId = try container.decodeIfPresent(.objectId)
        objectName = try container.decodeIfPresent(.objectName)
        operatorId = try container.decodeIfPresent(.operatorId)
        scope = try container.decodeIfPresent(.scope)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(lastModifiedTime, forKey: .lastModifiedTime)
        try container.encodeIfPresent(objectId, forKey: .objectId)
        try container.encodeIfPresent(objectName, forKey: .objectName)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(scope, forKey: .scope)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? DeviceObjectModel else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.format == object.format else { return false }
      guard self.lastModifiedTime == object.lastModifiedTime else { return false }
      guard self.objectId == object.objectId else { return false }
      guard self.objectName == object.objectName else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.scope == object.scope else { return false }
      return true
    }

    public static func == (lhs: DeviceObjectModel, rhs: DeviceObjectModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
