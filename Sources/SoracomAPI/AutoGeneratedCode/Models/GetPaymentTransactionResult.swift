//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class GetPaymentTransactionResult: Codable, Equatable {

    /** メッセージコード */
    public enum MessageCode: String, Codable {
        case success = "success"
        case processing = "processing"
        case invalidRequest = "invalid_request"
        case invalidNumber = "invalid_number"
        case incorrectNumber = "incorrect_number"
        case invalidName = "invalid_name"
        case invalidExpiryMonth = "invalid_expiry_month"
        case invalidExpiryYear = "invalid_expiry_year"
        case invalidExpiry = "invalid_expiry"
        case incorrectExpiry = "incorrect_expiry"
        case invalidCvc = "invalid_cvc"
        case incorrectCvc = "incorrect_cvc"
        case cardDeclined = "card_declined"
        case missing = "missing"
        case processingError = "processing_error"

        public static let cases: [MessageCode] = [
          .success,
          .processing,
          .invalidRequest,
          .invalidNumber,
          .incorrectNumber,
          .invalidName,
          .invalidExpiryMonth,
          .invalidExpiryYear,
          .invalidExpiry,
          .incorrectExpiry,
          .invalidCvc,
          .incorrectCvc,
          .cardDeclined,
          .missing,
          .processingError,
        ]
    }

    /** ステータス */
    public enum Status: String, Codable {
        case success = "success"
        case error = "error"

        public static let cases: [Status] = [
          .success,
          .error,
        ]
    }

    /** 課金額 */
    public var amount: PaymentAmount?

    /** 課金内容詳細 */
    public var description: PaymentDescription?

    /** メッセージ */
    public var message: String?

    /** メッセージコード */
    public var messageCode: MessageCode?

    /** ステータス */
    public var status: Status?

    public init(amount: PaymentAmount? = nil, description: PaymentDescription? = nil, message: String? = nil, messageCode: MessageCode? = nil, status: Status? = nil) {
        self.amount = amount
        self.description = description
        self.message = message
        self.messageCode = messageCode
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case description
        case message
        case messageCode
        case status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        amount = try container.decodeIfPresent(.amount)
        description = try container.decodeIfPresent(.description)
        message = try container.decodeIfPresent(.message)
        messageCode = try container.decodeIfPresent(.messageCode)
        status = try container.decodeIfPresent(.status)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(messageCode, forKey: .messageCode)
        try container.encodeIfPresent(status, forKey: .status)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GetPaymentTransactionResult else { return false }
      guard self.amount == object.amount else { return false }
      guard self.description == object.description else { return false }
      guard self.message == object.message else { return false }
      guard self.messageCode == object.messageCode else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: GetPaymentTransactionResult, rhs: GetPaymentTransactionResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
