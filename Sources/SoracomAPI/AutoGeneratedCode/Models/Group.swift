//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class Group: Codable, Equatable {

    public var configuration: Map?

    public var createdTime: Int?

    public var groupId: String?

    public var lastModifiedTime: Int?

    public var operatorId: String?

    public var tags: Tag?

    public init(configuration: Map? = nil, createdTime: Int? = nil, groupId: String? = nil, lastModifiedTime: Int? = nil, operatorId: String? = nil, tags: Tag? = nil) {
        self.configuration = configuration
        self.createdTime = createdTime
        self.groupId = groupId
        self.lastModifiedTime = lastModifiedTime
        self.operatorId = operatorId
        self.tags = tags
    }

    private enum CodingKeys: String, CodingKey {
        case configuration
        case createdTime
        case groupId
        case lastModifiedTime
        case operatorId
        case tags
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        configuration = try container.decodeIfPresent(.configuration)
        createdTime = try container.decodeIfPresent(.createdTime)
        groupId = try container.decodeIfPresent(.groupId)
        lastModifiedTime = try container.decodeIfPresent(.lastModifiedTime)
        operatorId = try container.decodeIfPresent(.operatorId)
        tags = try container.decodeIfPresent(.tags)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(lastModifiedTime, forKey: .lastModifiedTime)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(tags, forKey: .tags)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Group else { return false }
      guard self.configuration == object.configuration else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.groupId == object.groupId else { return false }
      guard self.lastModifiedTime == object.lastModifiedTime else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.tags == object.tags else { return false }
      return true
    }

    public static func == (lhs: Group, rhs: Group) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
