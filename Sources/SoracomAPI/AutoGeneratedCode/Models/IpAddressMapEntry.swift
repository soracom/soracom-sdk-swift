//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class IpAddressMapEntry: Codable, Equatable {

    public enum `Type`: String, Codable {
        case `static` = "static"
        case dynamic = "dynamic"
        case customerGatePeer = "customerGatePeer"
        case gatePeer = "gatePeer"

        public static let cases: [`Type`] = [
          .`static`,
          .dynamic,
          .customerGatePeer,
          .gatePeer,
        ]
    }

    public var ipAddress: String?

    public var key: String?

    public var type: `Type`?

    public init(ipAddress: String? = nil, key: String? = nil, type: `Type`? = nil) {
        self.ipAddress = ipAddress
        self.key = key
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case ipAddress
        case key
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        ipAddress = try container.decodeIfPresent(.ipAddress)
        key = try container.decodeIfPresent(.key)
        type = try container.decodeIfPresent(.type)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? IpAddressMapEntry else { return false }
      guard self.ipAddress == object.ipAddress else { return false }
      guard self.key == object.key else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: IpAddressMapEntry, rhs: IpAddressMapEntry) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
