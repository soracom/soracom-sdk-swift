//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class JunctionMirroringPeer: Codable, Equatable {

    public enum `Protocol`: String, Codable {
        case gre = "gre"

        public static let cases: [`Protocol`] = [
          .gre,
        ]
    }

    public var description: String?

    public var enabled: Bool?

    public var ipAddress: String?

    public var `protocol`: `Protocol`?

    public init(description: String? = nil, enabled: Bool? = nil, ipAddress: String? = nil, `protocol`: `Protocol`? = nil) {
        self.description = description
        self.enabled = enabled
        self.ipAddress = ipAddress
        self.`protocol` = `protocol`
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case enabled
        case ipAddress
        case `protocol` = "protocol"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decodeIfPresent(.description)
        enabled = try container.decodeIfPresent(.enabled)
        ipAddress = try container.decodeIfPresent(.ipAddress)
        `protocol` = try container.decodeIfPresent(.`protocol`)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(`protocol`, forKey: .`protocol`)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? JunctionMirroringPeer else { return false }
      guard self.description == object.description else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.ipAddress == object.ipAddress else { return false }
      guard self.`protocol` == object.`protocol` else { return false }
      return true
    }

    public static func == (lhs: JunctionMirroringPeer, rhs: JunctionMirroringPeer) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
