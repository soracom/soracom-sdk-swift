//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class LoraGateway: Codable, Equatable {

    public enum Status: String, Codable {
        case active = "active"
        case terminated = "terminated"
        case ready = "ready"
        case instock = "instock"

        public static let cases: [Status] = [
          .active,
          .terminated,
          .ready,
          .instock,
        ]
    }

    public var address: String?

    public var createdTime: DateTime?

    public var gatewayId: String?

    public var lastModifiedTime: DateTime?

    public var networkSetId: String?

    public var online: Bool?

    public var operatorId: String?

    public var owned: Bool?

    public var status: Status?

    public var tags: [String: String]?

    public var terminationEnabled: Bool?

    public init(address: String? = nil, createdTime: DateTime? = nil, gatewayId: String? = nil, lastModifiedTime: DateTime? = nil, networkSetId: String? = nil, online: Bool? = nil, operatorId: String? = nil, owned: Bool? = nil, status: Status? = nil, tags: [String: String]? = nil, terminationEnabled: Bool? = nil) {
        self.address = address
        self.createdTime = createdTime
        self.gatewayId = gatewayId
        self.lastModifiedTime = lastModifiedTime
        self.networkSetId = networkSetId
        self.online = online
        self.operatorId = operatorId
        self.owned = owned
        self.status = status
        self.tags = tags
        self.terminationEnabled = terminationEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case createdTime
        case gatewayId
        case lastModifiedTime
        case networkSetId
        case online
        case operatorId
        case owned
        case status
        case tags
        case terminationEnabled
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        address = try container.decodeIfPresent(.address)
        createdTime = try container.decodeIfPresent(.createdTime)
        gatewayId = try container.decodeIfPresent(.gatewayId)
        lastModifiedTime = try container.decodeIfPresent(.lastModifiedTime)
        networkSetId = try container.decodeIfPresent(.networkSetId)
        online = try container.decodeIfPresent(.online)
        operatorId = try container.decodeIfPresent(.operatorId)
        owned = try container.decodeIfPresent(.owned)
        status = try container.decodeIfPresent(.status)
        tags = try container.decodeIfPresent(.tags)
        terminationEnabled = try container.decodeIfPresent(.terminationEnabled)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(gatewayId, forKey: .gatewayId)
        try container.encodeIfPresent(lastModifiedTime, forKey: .lastModifiedTime)
        try container.encodeIfPresent(networkSetId, forKey: .networkSetId)
        try container.encodeIfPresent(online, forKey: .online)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(owned, forKey: .owned)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(terminationEnabled, forKey: .terminationEnabled)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? LoraGateway else { return false }
      guard self.address == object.address else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.gatewayId == object.gatewayId else { return false }
      guard self.lastModifiedTime == object.lastModifiedTime else { return false }
      guard self.networkSetId == object.networkSetId else { return false }
      guard self.online == object.online else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.owned == object.owned else { return false }
      guard self.status == object.status else { return false }
      guard self.tags == object.tags else { return false }
      guard self.terminationEnabled == object.terminationEnabled else { return false }
      return true
    }

    public static func == (lhs: LoraGateway, rhs: LoraGateway) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
