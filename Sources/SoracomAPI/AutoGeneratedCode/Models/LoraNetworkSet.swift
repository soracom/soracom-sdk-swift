//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class LoraNetworkSet: Codable, Equatable {

    public var allowedOperators: [String]?

    public var createdTime: DateTime?

    public var lastModifiedTime: DateTime?

    public var networkSetId: String?

    public var operatorId: String?

    public var tags: [String: String]?

    public init(allowedOperators: [String]? = nil, createdTime: DateTime? = nil, lastModifiedTime: DateTime? = nil, networkSetId: String? = nil, operatorId: String? = nil, tags: [String: String]? = nil) {
        self.allowedOperators = allowedOperators
        self.createdTime = createdTime
        self.lastModifiedTime = lastModifiedTime
        self.networkSetId = networkSetId
        self.operatorId = operatorId
        self.tags = tags
    }

    private enum CodingKeys: String, CodingKey {
        case allowedOperators
        case createdTime
        case lastModifiedTime
        case networkSetId
        case operatorId
        case tags
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        allowedOperators = try container.decodeArrayIfPresent(.allowedOperators)
        createdTime = try container.decodeIfPresent(.createdTime)
        lastModifiedTime = try container.decodeIfPresent(.lastModifiedTime)
        networkSetId = try container.decodeIfPresent(.networkSetId)
        operatorId = try container.decodeIfPresent(.operatorId)
        tags = try container.decodeIfPresent(.tags)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(allowedOperators, forKey: .allowedOperators)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(lastModifiedTime, forKey: .lastModifiedTime)
        try container.encodeIfPresent(networkSetId, forKey: .networkSetId)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(tags, forKey: .tags)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? LoraNetworkSet else { return false }
      guard self.allowedOperators == object.allowedOperators else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.lastModifiedTime == object.lastModifiedTime else { return false }
      guard self.networkSetId == object.networkSetId else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.tags == object.tags else { return false }
      return true
    }

    public static func == (lhs: LoraNetworkSet, rhs: LoraNetworkSet) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
