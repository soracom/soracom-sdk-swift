//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class OpenGateRequest: Codable, Equatable {

    public var privacySeparatorEnabled: Bool?

    public var vxlanId: Int?

    public init(privacySeparatorEnabled: Bool? = nil, vxlanId: Int? = nil) {
        self.privacySeparatorEnabled = privacySeparatorEnabled
        self.vxlanId = vxlanId
    }

    private enum CodingKeys: String, CodingKey {
        case privacySeparatorEnabled
        case vxlanId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        privacySeparatorEnabled = try container.decodeIfPresent(.privacySeparatorEnabled)
        vxlanId = try container.decodeIfPresent(.vxlanId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(privacySeparatorEnabled, forKey: .privacySeparatorEnabled)
        try container.encodeIfPresent(vxlanId, forKey: .vxlanId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? OpenGateRequest else { return false }
      guard self.privacySeparatorEnabled == object.privacySeparatorEnabled else { return false }
      guard self.vxlanId == object.vxlanId else { return false }
      return true
    }

    public static func == (lhs: OpenGateRequest, rhs: OpenGateRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
