//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class RuleConfigProperty: Codable, Equatable {

    public enum InactiveTimeoutDateConst: String, Codable {
        case immediately = "IMMEDIATELY"
        case beginningofnextmonth = "BEGINNING_OF_NEXT_MONTH"
        case beginningofnextday = "BEGINNING_OF_NEXT_DAY"
        case afteroneday = "AFTER_ONE_DAY"
        case never = "NEVER"

        public static let cases: [InactiveTimeoutDateConst] = [
          .immediately,
          .beginningofnextmonth,
          .beginningofnextday,
          .afteroneday,
          .never,
        ]
    }

    /** SubscriberSpeedClassAttributeRule の時のみ有効 */
    public enum TargetSpeedClass: String, Codable {
        case s1Minimum = "s1.minimum"
        case s1Slow = "s1.slow"
        case s1Standard = "s1.standard"
        case s1Fast = "s1.fast"

        public static let cases: [TargetSpeedClass] = [
          .s1Minimum,
          .s1Slow,
          .s1Standard,
          .s1Fast,
        ]
    }

    /** SubscriberStatusAttributeRule の時のみ有効 */
    public enum TargetStatus: String, Codable {
        case ready = "ready"
        case active = "active"
        case inactive = "inactive"
        case suspended = "suspended"
        case terminated = "terminated"

        public static let cases: [TargetStatus] = [
          .ready,
          .active,
          .inactive,
          .suspended,
          .terminated,
        ]
    }

    public var limitTotalTrafficMegaByte: Int

    public var inactiveTimeoutDateConst: InactiveTimeoutDateConst?

    /** SubscriberSpeedClassAttributeRule の時のみ有効 */
    public var targetSpeedClass: TargetSpeedClass?

    /** SubscriberStatusAttributeRule の時のみ有効 */
    public var targetStatus: TargetStatus?

    public init(limitTotalTrafficMegaByte: Int, inactiveTimeoutDateConst: InactiveTimeoutDateConst? = nil, targetSpeedClass: TargetSpeedClass? = nil, targetStatus: TargetStatus? = nil) {
        self.limitTotalTrafficMegaByte = limitTotalTrafficMegaByte
        self.inactiveTimeoutDateConst = inactiveTimeoutDateConst
        self.targetSpeedClass = targetSpeedClass
        self.targetStatus = targetStatus
    }

    private enum CodingKeys: String, CodingKey {
        case limitTotalTrafficMegaByte
        case inactiveTimeoutDateConst
        case targetSpeedClass
        case targetStatus
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        limitTotalTrafficMegaByte = try container.decode(.limitTotalTrafficMegaByte)
        inactiveTimeoutDateConst = try container.decodeIfPresent(.inactiveTimeoutDateConst)
        targetSpeedClass = try container.decodeIfPresent(.targetSpeedClass)
        targetStatus = try container.decodeIfPresent(.targetStatus)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(limitTotalTrafficMegaByte, forKey: .limitTotalTrafficMegaByte)
        try container.encodeIfPresent(inactiveTimeoutDateConst, forKey: .inactiveTimeoutDateConst)
        try container.encodeIfPresent(targetSpeedClass, forKey: .targetSpeedClass)
        try container.encodeIfPresent(targetStatus, forKey: .targetStatus)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? RuleConfigProperty else { return false }
      guard self.limitTotalTrafficMegaByte == object.limitTotalTrafficMegaByte else { return false }
      guard self.inactiveTimeoutDateConst == object.inactiveTimeoutDateConst else { return false }
      guard self.targetSpeedClass == object.targetSpeedClass else { return false }
      guard self.targetStatus == object.targetStatus else { return false }
      return true
    }

    public static func == (lhs: RuleConfigProperty, rhs: RuleConfigProperty) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
