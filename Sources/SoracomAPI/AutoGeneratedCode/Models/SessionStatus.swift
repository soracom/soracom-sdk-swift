//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class SessionStatus: Codable, Equatable {

    public var dnsServers: [String]?

    public var gatewayPrivateIpAddress: String?

    public var gatewayPublicIpAddress: String?

    public var imei: String?

    public var lastUpdatedAt: Int?

    public var online: Bool?

    public var ueIpAddress: String?

    public var vpgId: String?

    public init(dnsServers: [String]? = nil, gatewayPrivateIpAddress: String? = nil, gatewayPublicIpAddress: String? = nil, imei: String? = nil, lastUpdatedAt: Int? = nil, online: Bool? = nil, ueIpAddress: String? = nil, vpgId: String? = nil) {
        self.dnsServers = dnsServers
        self.gatewayPrivateIpAddress = gatewayPrivateIpAddress
        self.gatewayPublicIpAddress = gatewayPublicIpAddress
        self.imei = imei
        self.lastUpdatedAt = lastUpdatedAt
        self.online = online
        self.ueIpAddress = ueIpAddress
        self.vpgId = vpgId
    }

    private enum CodingKeys: String, CodingKey {
        case dnsServers
        case gatewayPrivateIpAddress
        case gatewayPublicIpAddress
        case imei
        case lastUpdatedAt
        case online
        case ueIpAddress
        case vpgId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        dnsServers = try container.decodeArrayIfPresent(.dnsServers)
        gatewayPrivateIpAddress = try container.decodeIfPresent(.gatewayPrivateIpAddress)
        gatewayPublicIpAddress = try container.decodeIfPresent(.gatewayPublicIpAddress)
        imei = try container.decodeIfPresent(.imei)
        lastUpdatedAt = try container.decodeIfPresent(.lastUpdatedAt)
        online = try container.decodeIfPresent(.online)
        ueIpAddress = try container.decodeIfPresent(.ueIpAddress)
        vpgId = try container.decodeIfPresent(.vpgId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(dnsServers, forKey: .dnsServers)
        try container.encodeIfPresent(gatewayPrivateIpAddress, forKey: .gatewayPrivateIpAddress)
        try container.encodeIfPresent(gatewayPublicIpAddress, forKey: .gatewayPublicIpAddress)
        try container.encodeIfPresent(imei, forKey: .imei)
        try container.encodeIfPresent(lastUpdatedAt, forKey: .lastUpdatedAt)
        try container.encodeIfPresent(online, forKey: .online)
        try container.encodeIfPresent(ueIpAddress, forKey: .ueIpAddress)
        try container.encodeIfPresent(vpgId, forKey: .vpgId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SessionStatus else { return false }
      guard self.dnsServers == object.dnsServers else { return false }
      guard self.gatewayPrivateIpAddress == object.gatewayPrivateIpAddress else { return false }
      guard self.gatewayPublicIpAddress == object.gatewayPublicIpAddress else { return false }
      guard self.imei == object.imei else { return false }
      guard self.lastUpdatedAt == object.lastUpdatedAt else { return false }
      guard self.online == object.online else { return false }
      guard self.ueIpAddress == object.ueIpAddress else { return false }
      guard self.vpgId == object.vpgId else { return false }
      return true
    }

    public static func == (lhs: SessionStatus, rhs: SessionStatus) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
