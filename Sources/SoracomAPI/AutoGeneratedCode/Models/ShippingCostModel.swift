//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** 発送料 */
public final class ShippingCostModel: Codable, Equatable {

    /** 発送先エリア */
    public enum ShippingArea: String, Codable {
        case hokkaido = "hokkaido"
        case kitaTohoku = "kita_tohoku"
        case minamiTohoku = "minami_tohoku"
        case kanto = "kanto"
        case shinetsu = "shinetsu"
        case chubu = "chubu"
        case hokuriku = "hokuriku"
        case kansai = "kansai"
        case chugoku = "chugoku"
        case shikoku = "shikoku"
        case kyushu = "kyushu"
        case okinawa = "okinawa"

        public static let cases: [ShippingArea] = [
          .hokkaido,
          .kitaTohoku,
          .minamiTohoku,
          .kanto,
          .shinetsu,
          .chubu,
          .hokuriku,
          .kansai,
          .chugoku,
          .shikoku,
          .kyushu,
          .okinawa,
        ]
    }

    /** 発送先エリア */
    public var shippingArea: ShippingArea?

    /** 発送先エリア名称 */
    public var shippingAreaName: String?

    /** 送料 */
    public var shippingCost: Double?

    /** 発送サイズ */
    public var size: Int?

    public init(shippingArea: ShippingArea? = nil, shippingAreaName: String? = nil, shippingCost: Double? = nil, size: Int? = nil) {
        self.shippingArea = shippingArea
        self.shippingAreaName = shippingAreaName
        self.shippingCost = shippingCost
        self.size = size
    }

    private enum CodingKeys: String, CodingKey {
        case shippingArea
        case shippingAreaName
        case shippingCost
        case size
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        shippingArea = try container.decodeIfPresent(.shippingArea)
        shippingAreaName = try container.decodeIfPresent(.shippingAreaName)
        shippingCost = try container.decodeIfPresent(.shippingCost)
        size = try container.decodeIfPresent(.size)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(shippingArea, forKey: .shippingArea)
        try container.encodeIfPresent(shippingAreaName, forKey: .shippingAreaName)
        try container.encodeIfPresent(shippingCost, forKey: .shippingCost)
        try container.encodeIfPresent(size, forKey: .size)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ShippingCostModel else { return false }
      guard self.shippingArea == object.shippingArea else { return false }
      guard self.shippingAreaName == object.shippingAreaName else { return false }
      guard self.shippingCost == object.shippingCost else { return false }
      guard self.size == object.size else { return false }
      return true
    }

    public static func == (lhs: ShippingCostModel, rhs: ShippingCostModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
