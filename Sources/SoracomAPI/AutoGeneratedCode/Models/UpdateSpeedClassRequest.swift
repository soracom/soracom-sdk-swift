//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class UpdateSpeedClassRequest: Codable, Equatable {

    public enum SpeedClass: String, Codable {
        case s1Minimum = "s1.minimum"
        case s1Slow = "s1.slow"
        case s1Standard = "s1.standard"
        case s1Fast = "s1.fast"

        public static let cases: [SpeedClass] = [
          .s1Minimum,
          .s1Slow,
          .s1Standard,
          .s1Fast,
        ]
    }

    public var speedClass: SpeedClass

    public init(speedClass: SpeedClass) {
        self.speedClass = speedClass
    }

    private enum CodingKeys: String, CodingKey {
        case speedClass
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        speedClass = try container.decode(.speedClass)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(speedClass, forKey: .speedClass)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? UpdateSpeedClassRequest else { return false }
      guard self.speedClass == object.speedClass else { return false }
      return true
    }

    public static func == (lhs: UpdateSpeedClassRequest, rhs: UpdateSpeedClassRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
