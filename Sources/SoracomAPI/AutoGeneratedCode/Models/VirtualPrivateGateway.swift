//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public final class VirtualPrivateGateway: Codable, Equatable {

    public enum PrimaryServiceName: String, Codable {
        case canal = "Canal"
        case direct = "Direct"
        case door = "Door"
        case gate = "Gate"

        public static let cases: [PrimaryServiceName] = [
          .canal,
          .direct,
          .door,
          .gate,
        ]
    }

    public enum `Type`: Int, Codable {
        case _12 = 12
        case _13 = 13

        public static let cases: [`Type`] = [
          ._12,
          ._13,
        ]
    }

    public var createdTime: Int?

    public var id: String?

    public var lastModifiedTime: Int?

    public var operatorId: String?

    public var primaryServiceName: PrimaryServiceName?

    public var status: String?

    public var tags: Tag?

    public var type: `Type`?

    public var useInternetGateway: Bool?

    public var virtualInterfaces: Map?

    public var vpcPeeringConnections: Map?

    public init(createdTime: Int? = nil, id: String? = nil, lastModifiedTime: Int? = nil, operatorId: String? = nil, primaryServiceName: PrimaryServiceName? = nil, status: String? = nil, tags: Tag? = nil, type: `Type`? = nil, useInternetGateway: Bool? = nil, virtualInterfaces: Map? = nil, vpcPeeringConnections: Map? = nil) {
        self.createdTime = createdTime
        self.id = id
        self.lastModifiedTime = lastModifiedTime
        self.operatorId = operatorId
        self.primaryServiceName = primaryServiceName
        self.status = status
        self.tags = tags
        self.type = type
        self.useInternetGateway = useInternetGateway
        self.virtualInterfaces = virtualInterfaces
        self.vpcPeeringConnections = vpcPeeringConnections
    }

    private enum CodingKeys: String, CodingKey {
        case createdTime
        case id
        case lastModifiedTime
        case operatorId
        case primaryServiceName
        case status
        case tags
        case type
        case useInternetGateway
        case virtualInterfaces
        case vpcPeeringConnections
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        createdTime = try container.decodeIfPresent(.createdTime)
        id = try container.decodeIfPresent(.id)
        lastModifiedTime = try container.decodeIfPresent(.lastModifiedTime)
        operatorId = try container.decodeIfPresent(.operatorId)
        primaryServiceName = try container.decodeIfPresent(.primaryServiceName)
        status = try container.decodeIfPresent(.status)
        tags = try container.decodeIfPresent(.tags)
        type = try container.decodeIfPresent(.type)
        useInternetGateway = try container.decodeIfPresent(.useInternetGateway)
        virtualInterfaces = try container.decodeIfPresent(.virtualInterfaces)
        vpcPeeringConnections = try container.decodeIfPresent(.vpcPeeringConnections)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastModifiedTime, forKey: .lastModifiedTime)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(primaryServiceName, forKey: .primaryServiceName)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(useInternetGateway, forKey: .useInternetGateway)
        try container.encodeIfPresent(virtualInterfaces, forKey: .virtualInterfaces)
        try container.encodeIfPresent(vpcPeeringConnections, forKey: .vpcPeeringConnections)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? VirtualPrivateGateway else { return false }
      guard self.createdTime == object.createdTime else { return false }
      guard self.id == object.id else { return false }
      guard self.lastModifiedTime == object.lastModifiedTime else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.primaryServiceName == object.primaryServiceName else { return false }
      guard self.status == object.status else { return false }
      guard self.tags == object.tags else { return false }
      guard self.type == object.type else { return false }
      guard self.useInternetGateway == object.useInternetGateway else { return false }
      guard self.virtualInterfaces == object.virtualInterfaces else { return false }
      guard self.vpcPeeringConnections == object.vpcPeeringConnections else { return false }
      return true
    }

    public static func == (lhs: VirtualPrivateGateway, rhs: VirtualPrivateGateway) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
