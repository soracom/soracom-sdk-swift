//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _Subscriber: Codable, Equatable {

    open var apn: String?

    open var createdAt: Int?

    open var expiredAt: Int?

    open var expiryAction: String?

    open var groupId: String?

    open var iccid: String?

    open var imeiLock: ImeiLock?

    open var imsi: String?

    open var ipAddress: String?

    open var lastModifiedAt: Int?

    open var moduleType: String?

    open var msisdn: String?

    open var operatorId: String?

    open var plan: Int?

    open var serialNumber: String?

    open var sessionStatus: SessionStatus?

    open var speedClass: String?

    open var status: String?

    open var tags: Map?

    open var terminationEnabled: Bool?

    public init(apn: String? = nil, createdAt: Int? = nil, expiredAt: Int? = nil, expiryAction: String? = nil, groupId: String? = nil, iccid: String? = nil, imeiLock: ImeiLock? = nil, imsi: String? = nil, ipAddress: String? = nil, lastModifiedAt: Int? = nil, moduleType: String? = nil, msisdn: String? = nil, operatorId: String? = nil, plan: Int? = nil, serialNumber: String? = nil, sessionStatus: SessionStatus? = nil, speedClass: String? = nil, status: String? = nil, tags: Map? = nil, terminationEnabled: Bool? = nil) {
        self.apn = apn
        self.createdAt = createdAt
        self.expiredAt = expiredAt
        self.expiryAction = expiryAction
        self.groupId = groupId
        self.iccid = iccid
        self.imeiLock = imeiLock
        self.imsi = imsi
        self.ipAddress = ipAddress
        self.lastModifiedAt = lastModifiedAt
        self.moduleType = moduleType
        self.msisdn = msisdn
        self.operatorId = operatorId
        self.plan = plan
        self.serialNumber = serialNumber
        self.sessionStatus = sessionStatus
        self.speedClass = speedClass
        self.status = status
        self.tags = tags
        self.terminationEnabled = terminationEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case apn
        case createdAt
        case expiredAt
        case expiryAction
        case groupId
        case iccid
        case imeiLock
        case imsi
        case ipAddress
        case lastModifiedAt
        case moduleType
        case msisdn
        case operatorId
        case plan
        case serialNumber
        case sessionStatus
        case speedClass
        case status
        case tags
        case terminationEnabled
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        apn = try container.decodeIfPresent(.apn)
        createdAt = try container.decodeIfPresent(.createdAt)
        expiredAt = try container.decodeIfPresent(.expiredAt)
        expiryAction = try container.decodeIfPresent(.expiryAction)
        groupId = try container.decodeIfPresent(.groupId)
        iccid = try container.decodeIfPresent(.iccid)
        imeiLock = try container.decodeIfPresent(.imeiLock)
        imsi = try container.decodeIfPresent(.imsi)
        ipAddress = try container.decodeIfPresent(.ipAddress)
        lastModifiedAt = try container.decodeIfPresent(.lastModifiedAt)
        moduleType = try container.decodeIfPresent(.moduleType)
        msisdn = try container.decodeIfPresent(.msisdn)
        operatorId = try container.decodeIfPresent(.operatorId)
        plan = try container.decodeIfPresent(.plan)
        serialNumber = try container.decodeIfPresent(.serialNumber)
        sessionStatus = try container.decodeIfPresent(.sessionStatus)
        speedClass = try container.decodeIfPresent(.speedClass)
        status = try container.decodeIfPresent(.status)
        tags = try container.decodeIfPresent(.tags)
        terminationEnabled = try container.decodeIfPresent(.terminationEnabled)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(apn, forKey: .apn)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(expiredAt, forKey: .expiredAt)
        try container.encodeIfPresent(expiryAction, forKey: .expiryAction)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(iccid, forKey: .iccid)
        try container.encodeIfPresent(imeiLock, forKey: .imeiLock)
        try container.encodeIfPresent(imsi, forKey: .imsi)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(lastModifiedAt, forKey: .lastModifiedAt)
        try container.encodeIfPresent(moduleType, forKey: .moduleType)
        try container.encodeIfPresent(msisdn, forKey: .msisdn)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(plan, forKey: .plan)
        try container.encodeIfPresent(serialNumber, forKey: .serialNumber)
        try container.encodeIfPresent(sessionStatus, forKey: .sessionStatus)
        try container.encodeIfPresent(speedClass, forKey: .speedClass)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(terminationEnabled, forKey: .terminationEnabled)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _Subscriber else { return false }
      guard self.apn == object.apn else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.expiredAt == object.expiredAt else { return false }
      guard self.expiryAction == object.expiryAction else { return false }
      guard self.groupId == object.groupId else { return false }
      guard self.iccid == object.iccid else { return false }
      guard self.imeiLock == object.imeiLock else { return false }
      guard self.imsi == object.imsi else { return false }
      guard self.ipAddress == object.ipAddress else { return false }
      guard self.lastModifiedAt == object.lastModifiedAt else { return false }
      guard self.moduleType == object.moduleType else { return false }
      guard self.msisdn == object.msisdn else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.plan == object.plan else { return false }
      guard self.serialNumber == object.serialNumber else { return false }
      guard self.sessionStatus == object.sessionStatus else { return false }
      guard self.speedClass == object.speedClass else { return false }
      guard self.status == object.status else { return false }
      guard self.tags == object.tags else { return false }
      guard self.terminationEnabled == object.terminationEnabled else { return false }
      return true
    }

    public static func == (lhs: _Subscriber, rhs: _Subscriber) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
