//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _ActionConfig: Codable, Equatable {

    public enum `Type`: String, Codable {
        case changeSpeedClassAction = "ChangeSpeedClassAction"
        case invokeAWSLambdaAction = "InvokeAWSLambdaAction"
        case executeWebRequestAction = "ExecuteWebRequestAction"
        case sendMailAction = "SendMailAction"
        case sendMailToOperatorAction = "SendMailToOperatorAction"

        public static let cases: [`Type`] = [
          .changeSpeedClassAction,
          .invokeAWSLambdaAction,
          .executeWebRequestAction,
          .sendMailAction,
          .sendMailToOperatorAction,
        ]
    }

    open var properties: ActionConfigProperty

    open var type: `Type`

    public init(properties: ActionConfigProperty, type: `Type`) {
        self.properties = properties
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case properties
        case type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        properties = try container.decode(.properties)
        type = try container.decode(.type)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(properties, forKey: .properties)
        try container.encode(type, forKey: .type)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _ActionConfig else { return false }
      guard self.properties == object.properties else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: _ActionConfig, rhs: _ActionConfig) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
