//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _AuthRequest: Codable, Equatable {

    open var authKey: String?

    open var authKeyId: String?

    open var email: String?

    open var mfaOTPCode: String?

    open var operatorId: String?

    open var password: String?

    open var tokenTimeoutSeconds: Int?

    open var userName: String?

    public init(authKey: String? = nil, authKeyId: String? = nil, email: String? = nil, mfaOTPCode: String? = nil, operatorId: String? = nil, password: String? = nil, tokenTimeoutSeconds: Int? = nil, userName: String? = nil) {
        self.authKey = authKey
        self.authKeyId = authKeyId
        self.email = email
        self.mfaOTPCode = mfaOTPCode
        self.operatorId = operatorId
        self.password = password
        self.tokenTimeoutSeconds = tokenTimeoutSeconds
        self.userName = userName
    }

    private enum CodingKeys: String, CodingKey {
        case authKey
        case authKeyId
        case email
        case mfaOTPCode
        case operatorId
        case password
        case tokenTimeoutSeconds
        case userName
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        authKey = try container.decodeIfPresent(.authKey)
        authKeyId = try container.decodeIfPresent(.authKeyId)
        email = try container.decodeIfPresent(.email)
        mfaOTPCode = try container.decodeIfPresent(.mfaOTPCode)
        operatorId = try container.decodeIfPresent(.operatorId)
        password = try container.decodeIfPresent(.password)
        tokenTimeoutSeconds = try container.decodeIfPresent(.tokenTimeoutSeconds)
        userName = try container.decodeIfPresent(.userName)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(authKey, forKey: .authKey)
        try container.encodeIfPresent(authKeyId, forKey: .authKeyId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(mfaOTPCode, forKey: .mfaOTPCode)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(tokenTimeoutSeconds, forKey: .tokenTimeoutSeconds)
        try container.encodeIfPresent(userName, forKey: .userName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _AuthRequest else { return false }
      guard self.authKey == object.authKey else { return false }
      guard self.authKeyId == object.authKeyId else { return false }
      guard self.email == object.email else { return false }
      guard self.mfaOTPCode == object.mfaOTPCode else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.password == object.password else { return false }
      guard self.tokenTimeoutSeconds == object.tokenTimeoutSeconds else { return false }
      guard self.userName == object.userName else { return false }
      return true
    }

    public static func == (lhs: _AuthRequest, rhs: _AuthRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
