//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _AuthResponse: Codable, Equatable {

    open var apiKey: String?

    open var operatorId: String?

    open var token: String?

    open var userName: String?

    public init(apiKey: String? = nil, operatorId: String? = nil, token: String? = nil, userName: String? = nil) {
        self.apiKey = apiKey
        self.operatorId = operatorId
        self.token = token
        self.userName = userName
    }

    private enum CodingKeys: String, CodingKey {
        case apiKey
        case operatorId
        case token
        case userName
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        apiKey = try container.decodeIfPresent(.apiKey)
        operatorId = try container.decodeIfPresent(.operatorId)
        token = try container.decodeIfPresent(.token)
        userName = try container.decodeIfPresent(.userName)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(apiKey, forKey: .apiKey)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(userName, forKey: .userName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _AuthResponse else { return false }
      guard self.apiKey == object.apiKey else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.token == object.token else { return false }
      guard self.userName == object.userName else { return false }
      return true
    }

    public static func == (lhs: _AuthResponse, rhs: _AuthResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
