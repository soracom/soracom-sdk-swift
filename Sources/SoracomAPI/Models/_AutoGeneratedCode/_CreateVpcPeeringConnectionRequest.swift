//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _CreateVpcPeeringConnectionRequest: Codable, Equatable {

    open var destinationCidrBlock: String?

    open var peerOwnerId: String?

    open var peerRegion: String?

    open var peerVpcId: String?

    public init(destinationCidrBlock: String? = nil, peerOwnerId: String? = nil, peerRegion: String? = nil, peerVpcId: String? = nil) {
        self.destinationCidrBlock = destinationCidrBlock
        self.peerOwnerId = peerOwnerId
        self.peerRegion = peerRegion
        self.peerVpcId = peerVpcId
    }

    private enum CodingKeys: String, CodingKey {
        case destinationCidrBlock
        case peerOwnerId
        case peerRegion
        case peerVpcId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        destinationCidrBlock = try container.decodeIfPresent(.destinationCidrBlock)
        peerOwnerId = try container.decodeIfPresent(.peerOwnerId)
        peerRegion = try container.decodeIfPresent(.peerRegion)
        peerVpcId = try container.decodeIfPresent(.peerVpcId)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(destinationCidrBlock, forKey: .destinationCidrBlock)
        try container.encodeIfPresent(peerOwnerId, forKey: .peerOwnerId)
        try container.encodeIfPresent(peerRegion, forKey: .peerRegion)
        try container.encodeIfPresent(peerVpcId, forKey: .peerVpcId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _CreateVpcPeeringConnectionRequest else { return false }
      guard self.destinationCidrBlock == object.destinationCidrBlock else { return false }
      guard self.peerOwnerId == object.peerOwnerId else { return false }
      guard self.peerRegion == object.peerRegion else { return false }
      guard self.peerVpcId == object.peerVpcId else { return false }
      return true
    }

    public static func == (lhs: _CreateVpcPeeringConnectionRequest, rhs: _CreateVpcPeeringConnectionRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
