//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _EstimatedOrderModel: Codable, Equatable {

    /** メールアドレス */
    open var email: String?

    /** 発注ID */
    open var orderId: String?

    /** 発注商品リスト */
    open var orderItemList: [EstimatedOrderItemModel]?

    /** 発送先 */
    open var shippingAddress: ShippingAddressModel?

    /** 商品発送先ID */
    open var shippingAddressId: String?

    /** 配送料 */
    open var shippingCost: Double?

    /** 消費税 */
    open var taxAmount: Double?

    /** 合計金額 */
    open var totalAmount: Double?

    public init(email: String? = nil, orderId: String? = nil, orderItemList: [EstimatedOrderItemModel]? = nil, shippingAddress: ShippingAddressModel? = nil, shippingAddressId: String? = nil, shippingCost: Double? = nil, taxAmount: Double? = nil, totalAmount: Double? = nil) {
        self.email = email
        self.orderId = orderId
        self.orderItemList = orderItemList
        self.shippingAddress = shippingAddress
        self.shippingAddressId = shippingAddressId
        self.shippingCost = shippingCost
        self.taxAmount = taxAmount
        self.totalAmount = totalAmount
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case orderId
        case orderItemList
        case shippingAddress
        case shippingAddressId
        case shippingCost
        case taxAmount
        case totalAmount
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decodeIfPresent(.email)
        orderId = try container.decodeIfPresent(.orderId)
        orderItemList = try container.decodeArrayIfPresent(.orderItemList)
        shippingAddress = try container.decodeIfPresent(.shippingAddress)
        shippingAddressId = try container.decodeIfPresent(.shippingAddressId)
        shippingCost = try container.decodeIfPresent(.shippingCost)
        taxAmount = try container.decodeIfPresent(.taxAmount)
        totalAmount = try container.decodeIfPresent(.totalAmount)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(orderItemList, forKey: .orderItemList)
        try container.encodeIfPresent(shippingAddress, forKey: .shippingAddress)
        try container.encodeIfPresent(shippingAddressId, forKey: .shippingAddressId)
        try container.encodeIfPresent(shippingCost, forKey: .shippingCost)
        try container.encodeIfPresent(taxAmount, forKey: .taxAmount)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _EstimatedOrderModel else { return false }
      guard self.email == object.email else { return false }
      guard self.orderId == object.orderId else { return false }
      guard self.orderItemList == object.orderItemList else { return false }
      guard self.shippingAddress == object.shippingAddress else { return false }
      guard self.shippingAddressId == object.shippingAddressId else { return false }
      guard self.shippingCost == object.shippingCost else { return false }
      guard self.taxAmount == object.taxAmount else { return false }
      guard self.totalAmount == object.totalAmount else { return false }
      return true
    }

    public static func == (lhs: _EstimatedOrderModel, rhs: _EstimatedOrderModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
