//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _EventHandlerModel: Codable, Equatable {

    public enum Status: String, Codable {
        case inactive = "inactive"
        case active = "active"

        public static let cases: [Status] = [
          .inactive,
          .active,
        ]
    }

    open var actionConfigList: [ActionConfig]

    open var handlerId: String

    open var ruleConfig: RuleConfig

    open var status: Status

    open var name: String

    open var description: String?

    open var targetGroupId: String?

    open var targetImsi: String?

    open var targetOperatorId: String?

    open var targetTag: Tag?

    public init(actionConfigList: [ActionConfig], handlerId: String, ruleConfig: RuleConfig, status: Status, name: String, description: String? = nil, targetGroupId: String? = nil, targetImsi: String? = nil, targetOperatorId: String? = nil, targetTag: Tag? = nil) {
        self.actionConfigList = actionConfigList
        self.handlerId = handlerId
        self.ruleConfig = ruleConfig
        self.status = status
        self.name = name
        self.description = description
        self.targetGroupId = targetGroupId
        self.targetImsi = targetImsi
        self.targetOperatorId = targetOperatorId
        self.targetTag = targetTag
    }

    private enum CodingKeys: String, CodingKey {
        case actionConfigList
        case handlerId
        case ruleConfig
        case status
        case name
        case description
        case targetGroupId
        case targetImsi
        case targetOperatorId
        case targetTag
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        actionConfigList = try container.decodeArray(.actionConfigList)
        handlerId = try container.decode(.handlerId)
        ruleConfig = try container.decode(.ruleConfig)
        status = try container.decode(.status)
        name = try container.decode(.name)
        description = try container.decodeIfPresent(.description)
        targetGroupId = try container.decodeIfPresent(.targetGroupId)
        targetImsi = try container.decodeIfPresent(.targetImsi)
        targetOperatorId = try container.decodeIfPresent(.targetOperatorId)
        targetTag = try container.decodeIfPresent(.targetTag)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(actionConfigList, forKey: .actionConfigList)
        try container.encode(handlerId, forKey: .handlerId)
        try container.encode(ruleConfig, forKey: .ruleConfig)
        try container.encode(status, forKey: .status)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(targetGroupId, forKey: .targetGroupId)
        try container.encodeIfPresent(targetImsi, forKey: .targetImsi)
        try container.encodeIfPresent(targetOperatorId, forKey: .targetOperatorId)
        try container.encodeIfPresent(targetTag, forKey: .targetTag)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _EventHandlerModel else { return false }
      guard self.actionConfigList == object.actionConfigList else { return false }
      guard self.handlerId == object.handlerId else { return false }
      guard self.ruleConfig == object.ruleConfig else { return false }
      guard self.status == object.status else { return false }
      guard self.name == object.name else { return false }
      guard self.description == object.description else { return false }
      guard self.targetGroupId == object.targetGroupId else { return false }
      guard self.targetImsi == object.targetImsi else { return false }
      guard self.targetOperatorId == object.targetOperatorId else { return false }
      guard self.targetTag == object.targetTag else { return false }
      return true
    }

    public static func == (lhs: _EventHandlerModel, rhs: _EventHandlerModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
