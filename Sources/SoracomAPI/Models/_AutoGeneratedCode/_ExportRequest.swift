//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _ExportRequest: Codable, Equatable {

    public enum Period: String, Codable {
        case month = "month"
        case day = "day"
        case minutes = "minutes"

        public static let cases: [Period] = [
          .month,
          .day,
          .minutes,
        ]
    }

    open var from: Int?

    open var period: Period?

    open var to: Int?

    public init(from: Int? = nil, period: Period? = nil, to: Int? = nil) {
        self.from = from
        self.period = period
        self.to = to
    }

    private enum CodingKeys: String, CodingKey {
        case from
        case period
        case to
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        from = try container.decodeIfPresent(.from)
        period = try container.decodeIfPresent(.period)
        to = try container.decodeIfPresent(.to)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(period, forKey: .period)
        try container.encodeIfPresent(to, forKey: .to)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _ExportRequest else { return false }
      guard self.from == object.from else { return false }
      guard self.period == object.period else { return false }
      guard self.to == object.to else { return false }
      return true
    }

    public static func == (lhs: _ExportRequest, rhs: _ExportRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
