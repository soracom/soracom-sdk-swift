//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _GetExportedFileResponse: Codable, Equatable {

    /** ファイル出力ステータス */
    public enum Status: String, Codable {
        case processing = "processing"
        case exported = "exported"
        case failed = "failed"

        public static let cases: [Status] = [
          .processing,
          .exported,
          .failed,
        ]
    }

    /** ファイル出力ステータス */
    open var status: Status?

    /** ファイルダウンロードURL */
    open var url: String?

    public init(status: Status? = nil, url: String? = nil) {
        self.status = status
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case status
        case url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        status = try container.decodeIfPresent(.status)
        url = try container.decodeIfPresent(.url)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(url, forKey: .url)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _GetExportedFileResponse else { return false }
      guard self.status == object.status else { return false }
      guard self.url == object.url else { return false }
      return true
    }

    public static func == (lhs: _GetExportedFileResponse, rhs: _GetExportedFileResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
