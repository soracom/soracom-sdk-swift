//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _InsertAirStatsRequest: Codable, Equatable {

    open var dataTrafficStatsMap: [String: Any]?

    /** UNIX 時刻（ミリ秒単位） */
    open var unixtime: Int?

    public init(dataTrafficStatsMap: [String: Any]? = nil, unixtime: Int? = nil) {
        self.dataTrafficStatsMap = dataTrafficStatsMap
        self.unixtime = unixtime
    }

    private enum CodingKeys: String, CodingKey {
        case dataTrafficStatsMap
        case unixtime
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        dataTrafficStatsMap = try container.decodeAnyIfPresent(.dataTrafficStatsMap)
        unixtime = try container.decodeIfPresent(.unixtime)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeAnyIfPresent(dataTrafficStatsMap, forKey: .dataTrafficStatsMap)
        try container.encodeIfPresent(unixtime, forKey: .unixtime)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _InsertAirStatsRequest else { return false }
      guard NSDictionary(dictionary: self.dataTrafficStatsMap ?? [:]).isEqual(to: object.dataTrafficStatsMap ?? [:]) else { return false }
      guard self.unixtime == object.unixtime else { return false }
      return true
    }

    public static func == (lhs: _InsertAirStatsRequest, rhs: _InsertAirStatsRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
