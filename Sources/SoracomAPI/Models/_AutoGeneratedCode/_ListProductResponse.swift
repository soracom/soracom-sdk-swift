//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _ListProductResponse: Codable, Equatable {

    open var productList: [ProductModel]?

    open var shippingCostList: [ShippingCostModel]?

    public init(productList: [ProductModel]? = nil, shippingCostList: [ShippingCostModel]? = nil) {
        self.productList = productList
        self.shippingCostList = shippingCostList
    }

    private enum CodingKeys: String, CodingKey {
        case productList
        case shippingCostList
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        productList = try container.decodeArrayIfPresent(.productList)
        shippingCostList = try container.decodeArrayIfPresent(.shippingCostList)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(productList, forKey: .productList)
        try container.encodeIfPresent(shippingCostList, forKey: .shippingCostList)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _ListProductResponse else { return false }
      guard self.productList == object.productList else { return false }
      guard self.shippingCostList == object.shippingCostList else { return false }
      return true
    }

    public static func == (lhs: _ListProductResponse, rhs: _ListProductResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
