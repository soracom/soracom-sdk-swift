//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _ObjectInstance: Codable, Equatable {

    open var id: Int?

    open var observed: Bool?

    open var resources: [String: ResourceInstance]?

    public init(id: Int? = nil, observed: Bool? = nil, resources: [String: ResourceInstance]? = nil) {
        self.id = id
        self.observed = observed
        self.resources = resources
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case observed
        case resources
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        id = try container.decodeIfPresent(.id)
        observed = try container.decodeIfPresent(.observed)
        resources = try container.decodeIfPresent(.resources)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(observed, forKey: .observed)
        try container.encodeIfPresent(resources, forKey: .resources)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _ObjectInstance else { return false }
      guard self.id == object.id else { return false }
      guard self.observed == object.observed else { return false }
      guard self.resources == object.resources else { return false }
      return true
    }

    public static func == (lhs: _ObjectInstance, rhs: _ObjectInstance) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
