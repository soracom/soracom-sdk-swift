//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _OrderedSubscriber: Codable, Equatable {

    /** IMSI */
    open var imsi: String?

    /** MSISDN */
    open var msisdn: String?

    /** serialNumber */
    open var serialNumber: String?

    public init(imsi: String? = nil, msisdn: String? = nil, serialNumber: String? = nil) {
        self.imsi = imsi
        self.msisdn = msisdn
        self.serialNumber = serialNumber
    }

    private enum CodingKeys: String, CodingKey {
        case imsi
        case msisdn
        case serialNumber
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        imsi = try container.decodeIfPresent(.imsi)
        msisdn = try container.decodeIfPresent(.msisdn)
        serialNumber = try container.decodeIfPresent(.serialNumber)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(imsi, forKey: .imsi)
        try container.encodeIfPresent(msisdn, forKey: .msisdn)
        try container.encodeIfPresent(serialNumber, forKey: .serialNumber)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _OrderedSubscriber else { return false }
      guard self.imsi == object.imsi else { return false }
      guard self.msisdn == object.msisdn else { return false }
      guard self.serialNumber == object.serialNumber else { return false }
      return true
    }

    public static func == (lhs: _OrderedSubscriber, rhs: _OrderedSubscriber) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
