//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _PaymentStatementResponse: Codable, Equatable {

    /** 金額 */
    open var amount: Double?

    /** 課金日時 */
    open var paymentDateTime: Int?

    /** 支払情報 */
    open var paymentInstrument: String?

    /** 支払方法 */
    open var paymentMethod: String?

    /** 課金明細ID */
    open var paymentStatementId: String?

    /** 支払内容 */
    open var paymentStatementInfo: String?

    public init(amount: Double? = nil, paymentDateTime: Int? = nil, paymentInstrument: String? = nil, paymentMethod: String? = nil, paymentStatementId: String? = nil, paymentStatementInfo: String? = nil) {
        self.amount = amount
        self.paymentDateTime = paymentDateTime
        self.paymentInstrument = paymentInstrument
        self.paymentMethod = paymentMethod
        self.paymentStatementId = paymentStatementId
        self.paymentStatementInfo = paymentStatementInfo
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case paymentDateTime
        case paymentInstrument
        case paymentMethod
        case paymentStatementId
        case paymentStatementInfo
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        amount = try container.decodeIfPresent(.amount)
        paymentDateTime = try container.decodeIfPresent(.paymentDateTime)
        paymentInstrument = try container.decodeIfPresent(.paymentInstrument)
        paymentMethod = try container.decodeIfPresent(.paymentMethod)
        paymentStatementId = try container.decodeIfPresent(.paymentStatementId)
        paymentStatementInfo = try container.decodeIfPresent(.paymentStatementInfo)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(paymentDateTime, forKey: .paymentDateTime)
        try container.encodeIfPresent(paymentInstrument, forKey: .paymentInstrument)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(paymentStatementId, forKey: .paymentStatementId)
        try container.encodeIfPresent(paymentStatementInfo, forKey: .paymentStatementInfo)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _PaymentStatementResponse else { return false }
      guard self.amount == object.amount else { return false }
      guard self.paymentDateTime == object.paymentDateTime else { return false }
      guard self.paymentInstrument == object.paymentInstrument else { return false }
      guard self.paymentMethod == object.paymentMethod else { return false }
      guard self.paymentStatementId == object.paymentStatementId else { return false }
      guard self.paymentStatementInfo == object.paymentStatementInfo else { return false }
      return true
    }

    public static func == (lhs: _PaymentStatementResponse, rhs: _PaymentStatementResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
