//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _RegisterSubscribersRequest: Codable, Equatable {

    open var registrationSecret: String

    open var groupId: String?

    open var tags: [TagUpdateRequest]?

    public init(registrationSecret: String, groupId: String? = nil, tags: [TagUpdateRequest]? = nil) {
        self.registrationSecret = registrationSecret
        self.groupId = groupId
        self.tags = tags
    }

    private enum CodingKeys: String, CodingKey {
        case registrationSecret
        case groupId
        case tags
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        registrationSecret = try container.decode(.registrationSecret)
        groupId = try container.decodeIfPresent(.groupId)
        tags = try container.decodeArrayIfPresent(.tags)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(registrationSecret, forKey: .registrationSecret)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(tags, forKey: .tags)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _RegisterSubscribersRequest else { return false }
      guard self.registrationSecret == object.registrationSecret else { return false }
      guard self.groupId == object.groupId else { return false }
      guard self.tags == object.tags else { return false }
      return true
    }

    public static func == (lhs: _RegisterSubscribersRequest, rhs: _RegisterSubscribersRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
