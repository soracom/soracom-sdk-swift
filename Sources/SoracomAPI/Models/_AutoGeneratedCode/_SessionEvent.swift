//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _SessionEvent: Codable, Equatable {

    open var apn: String?

    open var dns0: String?

    open var dns1: String?

    open var event: String?

    open var gatewayPrivateIpAddress: String?

    open var gatewayPublicIpAddress: String?

    open var imei: String?

    open var imsi: String?

    open var operatorId: String?

    open var time: Int?

    open var ueIpAddress: String?

    open var vpgId: String?

    public init(apn: String? = nil, dns0: String? = nil, dns1: String? = nil, event: String? = nil, gatewayPrivateIpAddress: String? = nil, gatewayPublicIpAddress: String? = nil, imei: String? = nil, imsi: String? = nil, operatorId: String? = nil, time: Int? = nil, ueIpAddress: String? = nil, vpgId: String? = nil) {
        self.apn = apn
        self.dns0 = dns0
        self.dns1 = dns1
        self.event = event
        self.gatewayPrivateIpAddress = gatewayPrivateIpAddress
        self.gatewayPublicIpAddress = gatewayPublicIpAddress
        self.imei = imei
        self.imsi = imsi
        self.operatorId = operatorId
        self.time = time
        self.ueIpAddress = ueIpAddress
        self.vpgId = vpgId
    }

    private enum CodingKeys: String, CodingKey {
        case apn
        case dns0
        case dns1
        case event
        case gatewayPrivateIpAddress
        case gatewayPublicIpAddress
        case imei
        case imsi
        case operatorId
        case time
        case ueIpAddress
        case vpgId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        apn = try container.decodeIfPresent(.apn)
        dns0 = try container.decodeIfPresent(.dns0)
        dns1 = try container.decodeIfPresent(.dns1)
        event = try container.decodeIfPresent(.event)
        gatewayPrivateIpAddress = try container.decodeIfPresent(.gatewayPrivateIpAddress)
        gatewayPublicIpAddress = try container.decodeIfPresent(.gatewayPublicIpAddress)
        imei = try container.decodeIfPresent(.imei)
        imsi = try container.decodeIfPresent(.imsi)
        operatorId = try container.decodeIfPresent(.operatorId)
        time = try container.decodeIfPresent(.time)
        ueIpAddress = try container.decodeIfPresent(.ueIpAddress)
        vpgId = try container.decodeIfPresent(.vpgId)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(apn, forKey: .apn)
        try container.encodeIfPresent(dns0, forKey: .dns0)
        try container.encodeIfPresent(dns1, forKey: .dns1)
        try container.encodeIfPresent(event, forKey: .event)
        try container.encodeIfPresent(gatewayPrivateIpAddress, forKey: .gatewayPrivateIpAddress)
        try container.encodeIfPresent(gatewayPublicIpAddress, forKey: .gatewayPublicIpAddress)
        try container.encodeIfPresent(imei, forKey: .imei)
        try container.encodeIfPresent(imsi, forKey: .imsi)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(ueIpAddress, forKey: .ueIpAddress)
        try container.encodeIfPresent(vpgId, forKey: .vpgId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _SessionEvent else { return false }
      guard self.apn == object.apn else { return false }
      guard self.dns0 == object.dns0 else { return false }
      guard self.dns1 == object.dns1 else { return false }
      guard self.event == object.event else { return false }
      guard self.gatewayPrivateIpAddress == object.gatewayPrivateIpAddress else { return false }
      guard self.gatewayPublicIpAddress == object.gatewayPublicIpAddress else { return false }
      guard self.imei == object.imei else { return false }
      guard self.imsi == object.imsi else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.time == object.time else { return false }
      guard self.ueIpAddress == object.ueIpAddress else { return false }
      guard self.vpgId == object.vpgId else { return false }
      return true
    }

    public static func == (lhs: _SessionEvent, rhs: _SessionEvent) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
