//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _ShippingAddressModel: Codable, Equatable {

    open var city: String

    open var state: String

    open var zipCode: String

    open var addressLine1: String?

    open var addressLine2: String?

    open var building: String?

    open var companyName: String?

    open var department: String?

    open var fullName: String?

    open var phoneNumber: String?

    public init(city: String, state: String, zipCode: String, addressLine1: String? = nil, addressLine2: String? = nil, building: String? = nil, companyName: String? = nil, department: String? = nil, fullName: String? = nil, phoneNumber: String? = nil) {
        self.city = city
        self.state = state
        self.zipCode = zipCode
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.building = building
        self.companyName = companyName
        self.department = department
        self.fullName = fullName
        self.phoneNumber = phoneNumber
    }

    private enum CodingKeys: String, CodingKey {
        case city
        case state
        case zipCode
        case addressLine1
        case addressLine2
        case building
        case companyName
        case department
        case fullName
        case phoneNumber
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        city = try container.decode(.city)
        state = try container.decode(.state)
        zipCode = try container.decode(.zipCode)
        addressLine1 = try container.decodeIfPresent(.addressLine1)
        addressLine2 = try container.decodeIfPresent(.addressLine2)
        building = try container.decodeIfPresent(.building)
        companyName = try container.decodeIfPresent(.companyName)
        department = try container.decodeIfPresent(.department)
        fullName = try container.decodeIfPresent(.fullName)
        phoneNumber = try container.decodeIfPresent(.phoneNumber)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(city, forKey: .city)
        try container.encode(state, forKey: .state)
        try container.encode(zipCode, forKey: .zipCode)
        try container.encodeIfPresent(addressLine1, forKey: .addressLine1)
        try container.encodeIfPresent(addressLine2, forKey: .addressLine2)
        try container.encodeIfPresent(building, forKey: .building)
        try container.encodeIfPresent(companyName, forKey: .companyName)
        try container.encodeIfPresent(department, forKey: .department)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _ShippingAddressModel else { return false }
      guard self.city == object.city else { return false }
      guard self.state == object.state else { return false }
      guard self.zipCode == object.zipCode else { return false }
      guard self.addressLine1 == object.addressLine1 else { return false }
      guard self.addressLine2 == object.addressLine2 else { return false }
      guard self.building == object.building else { return false }
      guard self.companyName == object.companyName else { return false }
      guard self.department == object.department else { return false }
      guard self.fullName == object.fullName else { return false }
      guard self.phoneNumber == object.phoneNumber else { return false }
      return true
    }

    public static func == (lhs: _ShippingAddressModel, rhs: _ShippingAddressModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
