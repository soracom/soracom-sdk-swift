//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

open class _SigfoxDevice: Codable, Equatable {

    public enum Status: String, Codable {
        case active = "active"
        case ready = "ready"
        case terminated = "terminated"
        case instock = "instock"

        public static let cases: [Status] = [
          .active,
          .ready,
          .terminated,
          .instock,
        ]
    }

    open var deviceId: String?

    open var groupId: String?

    open var lastModifiedTime: DateTime?

    open var lastSeen: LastSeen?

    open var operatorId: String?

    open var status: Status?

    open var tags: [String: String]?

    open var terminationEnabled: Bool?

    public init(deviceId: String? = nil, groupId: String? = nil, lastModifiedTime: DateTime? = nil, lastSeen: LastSeen? = nil, operatorId: String? = nil, status: Status? = nil, tags: [String: String]? = nil, terminationEnabled: Bool? = nil) {
        self.deviceId = deviceId
        self.groupId = groupId
        self.lastModifiedTime = lastModifiedTime
        self.lastSeen = lastSeen
        self.operatorId = operatorId
        self.status = status
        self.tags = tags
        self.terminationEnabled = terminationEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case deviceId = "device_id"
        case groupId
        case lastModifiedTime
        case lastSeen
        case operatorId
        case status
        case tags
        case terminationEnabled
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        deviceId = try container.decodeIfPresent(.deviceId)
        groupId = try container.decodeIfPresent(.groupId)
        lastModifiedTime = try container.decodeIfPresent(.lastModifiedTime)
        lastSeen = try container.decodeIfPresent(.lastSeen)
        operatorId = try container.decodeIfPresent(.operatorId)
        status = try container.decodeIfPresent(.status)
        tags = try container.decodeIfPresent(.tags)
        terminationEnabled = try container.decodeIfPresent(.terminationEnabled)
    }

    open func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(lastModifiedTime, forKey: .lastModifiedTime)
        try container.encodeIfPresent(lastSeen, forKey: .lastSeen)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(terminationEnabled, forKey: .terminationEnabled)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? _SigfoxDevice else { return false }
      guard self.deviceId == object.deviceId else { return false }
      guard self.groupId == object.groupId else { return false }
      guard self.lastModifiedTime == object.lastModifiedTime else { return false }
      guard self.lastSeen == object.lastSeen else { return false }
      guard self.operatorId == object.operatorId else { return false }
      guard self.status == object.status else { return false }
      guard self.tags == object.tags else { return false }
      guard self.terminationEnabled == object.terminationEnabled else { return false }
      return true
    }

    public static func == (lhs: _SigfoxDevice, rhs: _SigfoxDevice) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
