// Models.swift Generated by swagger-codegen　 — Custom output templates and post-processing by CodeGeneratorForSoracomSDKSwift.Swaggerer version 0.0d1. Generated 2016-09-12T00:54:57Z


extension Payload {


    
    func decodeAPICallError(_ key: PayloadKey) -> APICallError? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = APICallError()
        instance.errorMessage = source.decodeAPICallErrorMessage(.errorMessage)
        instance.httpStatus = source.decodeInt64(.httpStatus)
        return instance
    }

    
    func decodeAPICallErrorMessage(_ key: PayloadKey) -> APICallErrorMessage? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = APICallErrorMessage()
        instance.code = source.decodeString(.code)
        instance.message = source.decodeString(.message)
        return instance
    }

    
    func decodeAPIKeyResponse(_ key: PayloadKey) -> APIKeyResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = APIKeyResponse()
        instance.apiKey = source.decodeString(.apiKey)
        return instance
    }

    
    func decodeActionConfig(_ key: PayloadKey) -> ActionConfig? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ActionConfig()
        instance.properties = source.decodeActionConfigProperty(.properties) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: ActionConfig datatypeWithEnum: _type
        instance._type = source.decode_type(._type)
        return instance
    }

    
    func decodeActionConfigProperty(_ key: PayloadKey) -> ActionConfigProperty? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ActionConfigProperty() // FIXME: What do I do with isEnum? baseName: executionDateTimeConst name: executionDateTimeConst classname: ActionConfigProperty datatypeWithEnum: ExecutionDateTimeConst
        instance.executionDateTimeConst = source.decodeExecutionDateTimeConst(.executionDateTimeConst)
        instance.to = source.decodeString(.to)
        instance.title = source.decodeString(.title)
        instance.message = source.decodeString(.message) // FIXME: What do I do with isEnum? , baseName: speedClass name: speedClass classname: ActionConfigProperty datatypeWithEnum: SpeedClass
        instance.speedClass = source.decodeSpeedClass(.speedClass)
        instance.url = source.decodeString(.url) // FIXME: What do I do with isEnum? , baseName: httpMethod name: httpMethod classname: ActionConfigProperty datatypeWithEnum: HttpMethod
        instance.httpMethod = source.decodeHttpMethod(.httpMethod)
        instance.contentType = source.decodeString(.contentType)
        instance.headers = source.decodeAnyObject(.headers)
        instance.body = source.decodeString(.body)
        instance.endpoint = source.decodeString(.endpoint)
        instance.functionName = source.decodeString(.functionName)
        instance.accessKey = source.decodeString(.accessKey)
        instance.secretAccessKey = source.decodeString(.secretAccessKey)
        instance.parameter1 = source.decodeString(.parameter1)
        instance.parameter2 = source.decodeString(.parameter2)
        instance.parameter3 = source.decodeString(.parameter3)
        instance.parameter4 = source.decodeString(.parameter4)
        instance.parameter5 = source.decodeString(.parameter5)
        return instance
    }

    
    func decodeAirStatsResponse(_ key: PayloadKey) -> AirStatsResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = AirStatsResponse()
        instance.dataTrafficStatsMap = source.decodeDictionary(.dataTrafficStatsMap)
        instance.date = source.decodeString(.date)
        instance.unixtime = source.decodeInt64(.unixtime)
        return instance
    }

    
    func decodeAttachRoleRequest(_ key: PayloadKey) -> AttachRoleRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = AttachRoleRequest()
        instance.roleId = source.decodeString(.roleId)
        return instance
    }

    
    func decodeAuthKeyResponse(_ key: PayloadKey) -> AuthKeyResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = AuthKeyResponse()
        instance.authKeyId = source.decodeString(.authKeyId)
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.lastUsedDateTime = source.decodeInt64(.lastUsedDateTime)
        return instance
    }

    
    func decodeAuthRequest(_ key: PayloadKey) -> AuthRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = AuthRequest()
        instance.authKey = source.decodeString(.authKey)
        instance.authKeyId = source.decodeString(.authKeyId)
        instance.email = source.decodeString(.email)
        instance.operatorId = source.decodeString(.operatorId)
        instance.password = source.decodeString(.password)
        instance.tokenTimeoutSeconds = source.decodeInt64(.tokenTimeoutSeconds)
        instance.userName = source.decodeString(.userName)
        return instance
    }

    
    func decodeAuthResponse(_ key: PayloadKey) -> AuthResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = AuthResponse()
        instance.apiKey = source.decodeString(.apiKey)
        instance.operatorId = source.decodeString(.operatorId)
        instance.token = source.decodeString(.token)
        instance.userName = source.decodeString(.userName)
        return instance
    }

    
    func decodeBeamStatsResponse(_ key: PayloadKey) -> BeamStatsResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = BeamStatsResponse()
        instance.beamStatsMap = source.decodeDictionary(.beamStatsMap)
        instance.date = source.decodeString(.date)
        instance.unixtime = source.decodeInt64(.unixtime)
        return instance
    }

    
    func decodeConfig(_ key: PayloadKey) -> Config? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = Config()
        instance.properties = source.decodeDictionary(.properties)
        instance._type = source.decodeString(._type)
        return instance
    }

    
    func decodeCouponResponse(_ key: PayloadKey) -> CouponResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CouponResponse()
        instance.amount = source.decodeDouble(.amount)
        instance.balance = source.decodeDouble(.balance)
        instance.billItemName = source.decodeString(.billItemName)
        instance.couponCode = source.decodeString(.couponCode)
        instance.expiryYearMonth = source.decodeString(.expiryYearMonth)
        return instance
    }

    
    func decodeCreateAndUpdateCredentialsModel(_ key: PayloadKey) -> CreateAndUpdateCredentialsModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateAndUpdateCredentialsModel()
        instance.credentials = source.decodeAnyObject(.credentials)
        instance.description = source.decodeString(.description) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: CreateAndUpdateCredentialsModel datatypeWithEnum: _type
        instance._type = source.decode_type(._type)
        return instance
    }

    
    func decodeCreateEstimatedOrderRequest(_ key: PayloadKey) -> CreateEstimatedOrderRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateEstimatedOrderRequest()
        instance.orderItemList = source.decodeArray(.orderItemList)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        return instance
    }

    
    func decodeCreateEventHandlerRequest(_ key: PayloadKey) -> CreateEventHandlerRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateEventHandlerRequest()
        instance.actionConfigList = source.decodeArray(.actionConfigList)
        instance.description = source.decodeString(.description)
        instance.name = source.decodeString(.name)
        instance.ruleConfig = source.decodeRuleConfig(.ruleConfig) // FIXME: What do I do with isEnum? , baseName: status name: status classname: CreateEventHandlerRequest datatypeWithEnum: Status
        instance.status = source.decodeStatus(.status)
        instance.targetGroupId = source.decodeString(.targetGroupId)
        instance.targetImsi = source.decodeString(.targetImsi)
        instance.targetOperatorId = source.decodeString(.targetOperatorId)
        instance.targetTag = source.decodeTagSet(.targetTag)
        return instance
    }

    
    func decodeCreateGroupRequest(_ key: PayloadKey) -> CreateGroupRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateGroupRequest()
        instance.tags = source.decodeTagSet(.tags)
        return instance
    }

    
    func decodeCreateOrUpdateRoleRequest(_ key: PayloadKey) -> CreateOrUpdateRoleRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateOrUpdateRoleRequest()
        instance.description = source.decodeString(.description)
        instance.permission = source.decodeString(.permission)
        return instance
    }

    
    func decodeCreateRoleResponse(_ key: PayloadKey) -> CreateRoleResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateRoleResponse()
        instance.roleId = source.decodeString(.roleId)
        return instance
    }

    
    func decodeCreateUserPasswordRequest(_ key: PayloadKey) -> CreateUserPasswordRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateUserPasswordRequest()
        instance.password = source.decodeString(.password)
        return instance
    }

    
    func decodeCreateUserRequest(_ key: PayloadKey) -> CreateUserRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateUserRequest()
        instance.description = source.decodeString(.description)
        return instance
    }

    
    func decodeCreateVirtualPrivateGatewayRequest(_ key: PayloadKey) -> CreateVirtualPrivateGatewayRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateVirtualPrivateGatewayRequest() // FIXME: What do I do with isEnum? baseName: primaryServiceName name: primaryServiceName classname: CreateVirtualPrivateGatewayRequest datatypeWithEnum: PrimaryServiceName
        instance.primaryServiceName = source.decodePrimaryServiceName(.primaryServiceName)
        instance.useInternetGateway = source.decodeBool(.useInternetGateway)
        instance.deviceSubnetCidrRange = source.decodeString(.deviceSubnetCidrRange)
        return instance
    }

    
    func decodeCreateVpcPeeringConnectionRequest(_ key: PayloadKey) -> CreateVpcPeeringConnectionRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreateVpcPeeringConnectionRequest()
        instance.peerOwnerId = source.decodeString(.peerOwnerId)
        instance.peerVpcId = source.decodeString(.peerVpcId)
        instance.destinationCidrBlock = source.decodeString(.destinationCidrBlock)
        return instance
    }

    
    func decodeCredentialsModel(_ key: PayloadKey) -> CredentialsModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CredentialsModel()
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.credentials = source.decodeAnyObject(.credentials)
        instance.credentialsId = source.decodeString(.credentialsId)
        instance.description = source.decodeString(.description)
        instance.lastUsedDateTime = source.decodeInt64(.lastUsedDateTime) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: CredentialsModel datatypeWithEnum: _type
        instance._type = source.decode_type(._type)
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        return instance
    }

    
    func decodeCreditCard(_ key: PayloadKey) -> CreditCard? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = CreditCard()
        instance.cvc = source.decodeString(.cvc)
        instance.expireMonth = source.decodeInt64(.expireMonth)
        instance.expireYear = source.decodeInt64(.expireYear)
        instance.name = source.decodeString(.name)
        instance.number = source.decodeString(.number)
        return instance
    }

    
    func decodeDailyBill(_ key: PayloadKey) -> DailyBill? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = DailyBill()
        instance.amount = source.decodeInt64(.amount)
        instance.date = source.decodeString(.date)
        return instance
    }

    
    func decodeDailyBillResponse(_ key: PayloadKey) -> DailyBillResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = DailyBillResponse()
        instance.billList = source.decodeArray(.billList)
        return instance
    }

    
    func decodeDataTrafficStats(_ key: PayloadKey) -> DataTrafficStats? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = DataTrafficStats()
        instance.downloadByteSizeTotal = source.decodeInt64(.downloadByteSizeTotal)
        instance.downloadPacketSizeTotal = source.decodeInt64(.downloadPacketSizeTotal)
        instance.uploadByteSizeTotal = source.decodeInt64(.uploadByteSizeTotal)
        instance.uploadPacketSizeTotal = source.decodeInt64(.uploadPacketSizeTotal)
        return instance
    }

    
    func decodeError(_ key: PayloadKey) -> Error? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = Error()
        instance.code = source.decodeInt64(.code)
        instance.message = source.decodeString(.message)
        instance.fields = source.decodeString(.fields)
        return instance
    }

    
    func decodeEstimatedOrderItemModel(_ key: PayloadKey) -> EstimatedOrderItemModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = EstimatedOrderItemModel()
        instance.product = source.decodeProductModel(.product)
        instance.productAmount = source.decodeDouble(.productAmount)
        instance.quantity = source.decodeInt64(.quantity)
        return instance
    }

    
    func decodeEstimatedOrderModel(_ key: PayloadKey) -> EstimatedOrderModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = EstimatedOrderModel()
        instance.email = source.decodeString(.email)
        instance.orderId = source.decodeString(.orderId)
        instance.orderItemList = source.decodeArray(.orderItemList)
        instance.shippingAddress = source.decodeShippingAddressModel(.shippingAddress)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        instance.shippingCost = source.decodeDouble(.shippingCost)
        instance.taxAmount = source.decodeDouble(.taxAmount)
        instance.totalAmount = source.decodeDouble(.totalAmount)
        return instance
    }

    
    func decodeEventHandlerModel(_ key: PayloadKey) -> EventHandlerModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = EventHandlerModel()
        instance.actionConfigList = source.decodeArray(.actionConfigList)
        instance.description = source.decodeString(.description)
        instance.handlerId = source.decodeString(.handlerId)
        instance.name = source.decodeString(.name)
        instance.ruleConfig = source.decodeRuleConfig(.ruleConfig) // FIXME: What do I do with isEnum? , baseName: status name: status classname: EventHandlerModel datatypeWithEnum: Status
        instance.status = source.decodeStatus(.status)
        instance.targetGroupId = source.decodeString(.targetGroupId)
        instance.targetImsi = source.decodeString(.targetImsi)
        instance.targetOperatorId = source.decodeString(.targetOperatorId)
        instance.targetTag = source.decodeTagSet(.targetTag)
        return instance
    }

    
    func decodeExpiryTime(_ key: PayloadKey) -> ExpiryTime? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ExpiryTime()
        instance.expiryTime = source.decodeInt64(.expiryTime) // FIXME: What do I do with isEnum? , baseName: expiryAction name: expiryAction classname: ExpiryTime datatypeWithEnum: ExpiryAction
        instance.expiryAction = source.decodeExpiryAction(.expiryAction)
        return instance
    }

    
    func decodeExportRequest(_ key: PayloadKey) -> ExportRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ExportRequest()
        instance.from = source.decodeInt64(.from) // FIXME: What do I do with isEnum? , baseName: period name: period classname: ExportRequest datatypeWithEnum: Period
        instance.period = source.decodePeriod(.period)
        instance.to = source.decodeInt64(.to)
        return instance
    }

    
    func decodeFileOutputResult(_ key: PayloadKey) -> FileOutputResult? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = FileOutputResult()
        instance.url = source.decodeString(.url)
        return instance
    }

    
    func decodeGatePeer(_ key: PayloadKey) -> GatePeer? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GatePeer()
        instance.outerIpAddress = source.decodeString(.outerIpAddress)
        instance.innerIpAddress = source.decodeString(.innerIpAddress)
        instance.ownedByCustomer = source.decodeBool(.ownedByCustomer)
        return instance
    }

    
    func decodeGenerateOperatorsAuthKeyResponse(_ key: PayloadKey) -> GenerateOperatorsAuthKeyResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GenerateOperatorsAuthKeyResponse()
        instance.authKey = source.decodeString(.authKey)
        instance.authKeyId = source.decodeString(.authKeyId)
        return instance
    }

    
    func decodeGenerateTokenRequest(_ key: PayloadKey) -> GenerateTokenRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GenerateTokenRequest()
        instance.tokenTimeoutSeconds = source.decodeInt64(.tokenTimeoutSeconds)
        return instance
    }

    
    func decodeGenerateTokenResponse(_ key: PayloadKey) -> GenerateTokenResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GenerateTokenResponse()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeGenerateUserAuthKeyResponse(_ key: PayloadKey) -> GenerateUserAuthKeyResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GenerateUserAuthKeyResponse()
        instance.authKey = source.decodeString(.authKey)
        instance.authKeyId = source.decodeString(.authKeyId)
        return instance
    }

    
    func decodeGetBillingHistoryResponse(_ key: PayloadKey) -> GetBillingHistoryResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetBillingHistoryResponse()
        instance.billList = source.decodeArray(.billList)
        return instance
    }

    
    func decodeGetLatestBill(_ key: PayloadKey) -> GetLatestBill? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetLatestBill()
        instance.amount = source.decodeInt64(.amount)
        instance.lastEvaluatedTime = source.decodeString(.lastEvaluatedTime)
        return instance
    }

    
    func decodeGetOperatorResponse(_ key: PayloadKey) -> GetOperatorResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetOperatorResponse()
        instance.createDate = source.decodeString(.createDate)
        instance.description = source.decodeString(.description)
        instance.email = source.decodeString(.email)
        instance.operatorId = source.decodeString(.operatorId)
        instance.rootOperatorId = source.decodeString(.rootOperatorId)
        instance.updateDate = source.decodeString(.updateDate)
        return instance
    }

    
    func decodeGetOrderResponse(_ key: PayloadKey) -> GetOrderResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetOrderResponse()
        instance.email = source.decodeString(.email)
        instance.orderDateTime = source.decodeString(.orderDateTime)
        instance.orderId = source.decodeString(.orderId)
        instance.orderItemList = source.decodeArray(.orderItemList) // FIXME: What do I do with isEnum? , baseName: orderStatus name: orderStatus classname: GetOrderResponse datatypeWithEnum: OrderStatus
        instance.orderStatus = source.decodeOrderStatus(.orderStatus)
        instance.shippingAddress = source.decodeShippingAddressModel(.shippingAddress)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        instance.shippingCost = source.decodeDouble(.shippingCost)
        instance.shippingLabelNumber = source.decodeString(.shippingLabelNumber)
        instance.taxAmount = source.decodeDouble(.taxAmount)
        instance.totalAmount = source.decodeDouble(.totalAmount)
        return instance
    }

    
    func decodeGetPaymentMethodResult(_ key: PayloadKey) -> GetPaymentMethodResult? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetPaymentMethodResult() // FIXME: What do I do with isEnum? baseName: errorCode name: errorCode classname: GetPaymentMethodResult datatypeWithEnum: ErrorCode
        instance.errorCode = source.decodeErrorCode(.errorCode)
        instance.errorMessage = source.decodeString(.errorMessage)
        instance.properties = source.decodeString(.properties) // FIXME: What do I do with isEnum? , baseName: providerType name: providerType classname: GetPaymentMethodResult datatypeWithEnum: ProviderType
        instance.providerType = source.decodeProviderType(.providerType)
        instance.updateDate = source.decodeString(.updateDate)
        return instance
    }

    
    func decodeGetPaymentTransactionResult(_ key: PayloadKey) -> GetPaymentTransactionResult? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetPaymentTransactionResult()
        instance.amount = source.decodePaymentAmount(.amount)
        instance.description = source.decodePaymentDescription(.description)
        instance.message = source.decodeString(.message) // FIXME: What do I do with isEnum? , baseName: messageCode name: messageCode classname: GetPaymentTransactionResult datatypeWithEnum: MessageCode
        instance.messageCode = source.decodeMessageCode(.messageCode) // FIXME: What do I do with isEnum? , baseName: status name: status classname: GetPaymentTransactionResult datatypeWithEnum: Status
        instance.status = source.decodeStatus(.status)
        return instance
    }

    
    func decodeGetShippingAddressResponse(_ key: PayloadKey) -> GetShippingAddressResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetShippingAddressResponse()
        instance.addressLine1 = source.decodeString(.addressLine1)
        instance.addressLine2 = source.decodeString(.addressLine2)
        instance.building = source.decodeString(.building)
        instance.city = source.decodeString(.city)
        instance.companyName = source.decodeString(.companyName)
        instance.department = source.decodeString(.department)
        instance.fullName = source.decodeString(.fullName)
        instance.phoneNumber = source.decodeString(.phoneNumber)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        instance.shippingArea = source.decodeString(.shippingArea)
        instance.state = source.decodeString(.state)
        instance.zipCode = source.decodeString(.zipCode)
        return instance
    }

    
    func decodeGetUserPasswordResponse(_ key: PayloadKey) -> GetUserPasswordResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetUserPasswordResponse()
        instance.hasPassword = source.decodeBool(.hasPassword)
        return instance
    }

    
    func decodeGetUserPermissionResponse(_ key: PayloadKey) -> GetUserPermissionResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GetUserPermissionResponse()
        instance.permission = source.decodeString(.permission)
        return instance
    }

    
    func decodeGroup(_ key: PayloadKey) -> Group? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = Group()
        instance.configuration = source.decodeMap(.configuration)
        instance.createdTime = source.decodeInt64(.createdTime)
        instance.groupId = source.decodeString(.groupId)
        instance.lastModifiedTime = source.decodeInt64(.lastModifiedTime)
        instance.operatorId = source.decodeString(.operatorId)
        instance.tags = source.decodeTagSet(.tags)
        return instance
    }

    
    func decodeGroupConfigurationUpdateRequest(_ key: PayloadKey) -> GroupConfigurationUpdateRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = GroupConfigurationUpdateRequest()
        instance.key = source.decodeString(.key)
        instance.value = source.decodeString(.value)
        return instance
    }

    
    func decodeIpAddressMapEntry(_ key: PayloadKey) -> IpAddressMapEntry? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = IpAddressMapEntry()
        instance.key = source.decodeString(.key)
        instance.ipAddress = source.decodeString(.ipAddress) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: IpAddressMapEntry datatypeWithEnum: _type
        instance._type = source.decode_type(._type)
        return instance
    }

    
    func decodeIssueEmailChangeTokenRequest(_ key: PayloadKey) -> IssueEmailChangeTokenRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = IssueEmailChangeTokenRequest()
        instance.email = source.decodeString(.email)
        return instance
    }

    
    func decodeIssuePasswordResetTokenRequest(_ key: PayloadKey) -> IssuePasswordResetTokenRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = IssuePasswordResetTokenRequest()
        instance.email = source.decodeString(.email)
        return instance
    }

    
    func decodeIssueSubscriberTransferTokenRequest(_ key: PayloadKey) -> IssueSubscriberTransferTokenRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = IssueSubscriberTransferTokenRequest()
        instance.transferDestinationOperatorEmail = source.decodeString(.transferDestinationOperatorEmail)
        instance.transferDestinationOperatorId = source.decodeString(.transferDestinationOperatorId)
        instance.transferImsi = source.decodeArray(.transferImsi)
        return instance
    }

    
    func decodeIssueSubscriberTransferTokenResponse(_ key: PayloadKey) -> IssueSubscriberTransferTokenResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = IssueSubscriberTransferTokenResponse()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeListCouponResponse(_ key: PayloadKey) -> ListCouponResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ListCouponResponse()
        instance.couponList = source.decodeArray(.couponList)
        return instance
    }

    
    func decodeListOrderResponse(_ key: PayloadKey) -> ListOrderResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ListOrderResponse()
        instance.orderList = source.decodeArray(.orderList)
        return instance
    }

    
    func decodeListOrderedSubscriberResponse(_ key: PayloadKey) -> ListOrderedSubscriberResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ListOrderedSubscriberResponse()
        instance.orderedSubscriberList = source.decodeArray(.orderedSubscriberList)
        return instance
    }

    
    func decodeListProductResponse(_ key: PayloadKey) -> ListProductResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ListProductResponse()
        instance.productList = source.decodeArray(.productList)
        instance.shippingCostList = source.decodeArray(.shippingCostList)
        return instance
    }

    
    func decodeListRolesResponse(_ key: PayloadKey) -> ListRolesResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ListRolesResponse()
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.description = source.decodeString(.description)
        instance.roleId = source.decodeString(.roleId)
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        return instance
    }

    
    func decodeListShippingAddressResponse(_ key: PayloadKey) -> ListShippingAddressResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ListShippingAddressResponse()
        instance.shippingAddresses = source.decodeArray(.shippingAddresses)
        return instance
    }

    
    func decodeListSubOperatorsResponse(_ key: PayloadKey) -> ListSubOperatorsResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ListSubOperatorsResponse()
        instance.operatorId = source.decodeString(.operatorId)
        return instance
    }

    
    func decodeMap(_ key: PayloadKey) -> Map? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = Map()
        return instance
    }

    
    func decodeMapStringDataTrafficStats(_ key: PayloadKey) -> MapStringDataTrafficStats? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = MapStringDataTrafficStats()
        return instance
    }

    
    func decodeMapStringString(_ key: PayloadKey) -> MapStringString? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = MapStringString()
        return instance
    }

    
    func decodeMonthlyBill(_ key: PayloadKey) -> MonthlyBill? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = MonthlyBill()
        instance.amount = source.decodeInt64(.amount) // FIXME: What do I do with isEnum? , baseName: paymentStatus name: paymentStatus classname: MonthlyBill datatypeWithEnum: PaymentStatus
        instance.paymentStatus = source.decodePaymentStatus(.paymentStatus)
        instance.paymentTransactionId = source.decodeString(.paymentTransactionId)
        instance.yearMonth = source.decodeString(.yearMonth)
        return instance
    }

    
    func decodeOrderItemModel(_ key: PayloadKey) -> OrderItemModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = OrderItemModel()
        instance.productCode = source.decodeString(.productCode)
        instance.quantity = source.decodeInt64(.quantity)
        return instance
    }

    
    func decodeOrderedSubscriber(_ key: PayloadKey) -> OrderedSubscriber? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = OrderedSubscriber()
        instance.imsi = source.decodeString(.imsi)
        instance.msisdn = source.decodeString(.msisdn)
        instance.serialNumber = source.decodeString(.serialNumber)
        return instance
    }

    
    func decodePaymentAmount(_ key: PayloadKey) -> PaymentAmount? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = PaymentAmount()
        instance.taxAmount = source.decodeDouble(.taxAmount)
        instance.totalAmount = source.decodeDouble(.totalAmount)
        return instance
    }

    
    func decodePaymentDescription(_ key: PayloadKey) -> PaymentDescription? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = PaymentDescription()
        instance.description = source.decodeString(.description)
        instance.itemList = source.decodeArray(.itemList)
        return instance
    }

    
    func decodeProductModel(_ key: PayloadKey) -> ProductModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ProductModel()
        instance.count = source.decodeDouble(.count)
        instance.maxQuantity = source.decodeInt64(.maxQuantity)
        instance.price = source.decodeDouble(.price)
        instance.productCode = source.decodeString(.productCode)
        instance.productInfoURL = source.decodeString(.productInfoURL)
        instance.productName = source.decodeString(.productName) // FIXME: What do I do with isEnum? , baseName: productType name: productType classname: ProductModel datatypeWithEnum: ProductType
        instance.productType = source.decodeProductType(.productType)
        instance.properties = source.decodeDictionary(.properties)
        return instance
    }

    
    func decodePutIpAddressMapEntryRequest(_ key: PayloadKey) -> PutIpAddressMapEntryRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = PutIpAddressMapEntryRequest()
        instance.key = source.decodeString(.key)
        instance.ipAddress = source.decodeString(.ipAddress)
        return instance
    }

    
    func decodeRegisterGatePeerRequest(_ key: PayloadKey) -> RegisterGatePeerRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = RegisterGatePeerRequest()
        instance.outerIpAddress = source.decodeString(.outerIpAddress)
        instance.innerIpAddress = source.decodeString(.innerIpAddress)
        return instance
    }

    
    func decodeRegisterOperatorsRequest(_ key: PayloadKey) -> RegisterOperatorsRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = RegisterOperatorsRequest()
        instance.email = source.decodeString(.email)
        instance.password = source.decodeString(.password)
        return instance
    }

    
    func decodeRegisterSubscribersRequest(_ key: PayloadKey) -> RegisterSubscribersRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = RegisterSubscribersRequest()
        instance.registrationSecret = source.decodeString(.registrationSecret)
        instance.groupId = source.decodeString(.groupId)
        instance.tags = source.decodeArray(.tags)
        return instance
    }

    
    func decodeRoleResponse(_ key: PayloadKey) -> RoleResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = RoleResponse()
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.description = source.decodeString(.description)
        instance.permission = source.decodeString(.permission)
        instance.roleId = source.decodeString(.roleId)
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        return instance
    }

    
    func decodeRuleConfig(_ key: PayloadKey) -> RuleConfig? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = RuleConfig()
        instance.properties = source.decodeRuleConfigProperty(.properties) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: RuleConfig datatypeWithEnum: _type
        instance._type = source.decode_type(._type)
        return instance
    }

    
    func decodeRuleConfigProperty(_ key: PayloadKey) -> RuleConfigProperty? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = RuleConfigProperty()
        instance.limitTotalTrafficMegaByte = source.decodeInt64(.limitTotalTrafficMegaByte) // FIXME: What do I do with isEnum? , baseName: inactiveTimeoutDateConst name: inactiveTimeoutDateConst classname: RuleConfigProperty datatypeWithEnum: InactiveTimeoutDateConst
        instance.inactiveTimeoutDateConst = source.decodeInactiveTimeoutDateConst(.inactiveTimeoutDateConst) // FIXME: What do I do with isEnum? , baseName: targetStatus name: targetStatus classname: RuleConfigProperty datatypeWithEnum: TargetStatus
        instance.targetStatus = source.decodeTargetStatus(.targetStatus) // FIXME: What do I do with isEnum? , baseName: targetSpeedClass name: targetSpeedClass classname: RuleConfigProperty datatypeWithEnum: TargetSpeedClass
        instance.targetSpeedClass = source.decodeTargetSpeedClass(.targetSpeedClass)
        return instance
    }

    
    func decodeSessionEvent(_ key: PayloadKey) -> SessionEvent? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = SessionEvent()
        instance.operatorId = source.decodeString(.operatorId)
        instance.imsi = source.decodeString(.imsi)
        instance.time = source.decodeInt64(.time)
        instance.event = source.decodeString(.event)
        instance.imei = source.decodeString(.imei)
        instance.ueIpAddress = source.decodeString(.ueIpAddress)
        instance.apn = source.decodeString(.apn)
        instance.dns0 = source.decodeString(.dns0)
        instance.dns1 = source.decodeString(.dns1)
        instance.vpgId = source.decodeString(.vpgId)
        instance.gatewayPrivateIpAddress = source.decodeString(.gatewayPrivateIpAddress)
        instance.gatewayPublicIpAddress = source.decodeString(.gatewayPublicIpAddress)
        return instance
    }

    
    func decodeSessionStatus(_ key: PayloadKey) -> SessionStatus? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = SessionStatus()
        instance.isOnline = source.decodeBool(.isOnline)
        instance.lastUpdatedAt = source.decodeInt64(.lastUpdatedAt)
        instance.imei = source.decodeString(.imei)
        instance.ueIpAddress = source.decodeString(.ueIpAddress)
        instance.dnsServers = source.decodeArray(.dnsServers)
        instance.vpgId = source.decodeString(.vpgId)
        instance.gatewayPrivateIpAddress = source.decodeString(.gatewayPrivateIpAddress)
        instance.gatewayPublicIpAddress = source.decodeString(.gatewayPublicIpAddress)
        return instance
    }

    
    func decodeSetUserPermissionRequest(_ key: PayloadKey) -> SetUserPermissionRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = SetUserPermissionRequest()
        instance.description = source.decodeString(.description)
        instance.permission = source.decodeString(.permission)
        return instance
    }

    
    func decodeShippingAddressModel(_ key: PayloadKey) -> ShippingAddressModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ShippingAddressModel()
        instance.addressLine1 = source.decodeString(.addressLine1)
        instance.addressLine2 = source.decodeString(.addressLine2)
        instance.building = source.decodeString(.building)
        instance.city = source.decodeString(.city)
        instance.companyName = source.decodeString(.companyName)
        instance.department = source.decodeString(.department)
        instance.fullName = source.decodeString(.fullName)
        instance.phoneNumber = source.decodeString(.phoneNumber)
        instance.state = source.decodeString(.state)
        instance.zipCode = source.decodeString(.zipCode)
        return instance
    }

    
    func decodeShippingCostModel(_ key: PayloadKey) -> ShippingCostModel? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = ShippingCostModel() // FIXME: What do I do with isEnum? baseName: shippingArea name: shippingArea classname: ShippingCostModel datatypeWithEnum: ShippingArea
        instance.shippingArea = source.decodeShippingArea(.shippingArea)
        instance.shippingAreaName = source.decodeString(.shippingAreaName)
        instance.shippingCost = source.decodeDouble(.shippingCost)
        instance.size = source.decodeInt64(.size)
        return instance
    }

    
    func decodeSoracomBeamStats(_ key: PayloadKey) -> SoracomBeamStats? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = SoracomBeamStats()
        instance.count = source.decodeInt64(.count)
        return instance
    }

    
    func decodeSubscriber(_ key: PayloadKey) -> Subscriber? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = Subscriber()
        instance.imsi = source.decodeString(.imsi)
        instance.msisdn = source.decodeString(.msisdn)
        instance.serialNumber = source.decodeString(.serialNumber)
        instance.iccid = source.decodeString(.iccid)
        instance.apn = source.decodeString(.apn)
        instance.speedClass = source.decodeString(.speedClass)
        instance.createdAt = source.decodeInt64(.createdAt)
        instance.lastModifiedAt = source.decodeInt64(.lastModifiedAt)
        instance.expiryTime = source.decodeInt64(.expiryTime)
        instance.expiryAction = source.decodeString(.expiryAction)
        instance.status = source.decodeString(.status)
        instance.sessionStatus = source.decodeSessionStatus(.sessionStatus)
        instance.tags = source.decodeTagSet(.tags)
        instance.operatorId = source.decodeString(.operatorId)
        return instance
    }

    
    func decodeSupportTokenResponse(_ key: PayloadKey) -> SupportTokenResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = SupportTokenResponse()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeTagSet(_ key: PayloadKey) -> TagSet? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = TagSet()
        return instance
    }

    
    func decodeTagUpdateRequest(_ key: PayloadKey) -> TagUpdateRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = TagUpdateRequest()
        instance.tagName = source.decodeString(.tagName)
        instance.tagValue = source.decodeString(.tagValue)
        return instance
    }

    
    func decodeUpdateEventHandlerRequest(_ key: PayloadKey) -> UpdateEventHandlerRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = UpdateEventHandlerRequest()
        return instance
    }

    
    func decodeUpdatePasswordRequest(_ key: PayloadKey) -> UpdatePasswordRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = UpdatePasswordRequest()
        instance.currentPassword = source.decodeString(.currentPassword)
        instance.newPassword = source.decodeString(.newPassword)
        return instance
    }

    
    func decodeUpdateSpeedClassRequest(_ key: PayloadKey) -> UpdateSpeedClassRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = UpdateSpeedClassRequest() // FIXME: What do I do with isEnum? baseName: speedClass name: speedClass classname: UpdateSpeedClassRequest datatypeWithEnum: SpeedClass
        instance.speedClass = source.decodeSpeedClass(.speedClass)
        return instance
    }

    
    func decodeUpdateUserRequest(_ key: PayloadKey) -> UpdateUserRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = UpdateUserRequest()
        instance.description = source.decodeString(.description)
        return instance
    }

    
    func decodeUserDetailResponse(_ key: PayloadKey) -> UserDetailResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = UserDetailResponse()
        instance.authKeyList = source.decodeArray(.authKeyList)
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.description = source.decodeString(.description)
        instance.hasPassword = source.decodeBool(.hasPassword)
        instance.permission = source.decodeString(.permission)
        instance.roleList = source.decodeArray(.roleList)
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        instance.userName = source.decodeString(.userName)
        return instance
    }

    
    func decodeVerifyEmailChangeTokenRequest(_ key: PayloadKey) -> VerifyEmailChangeTokenRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = VerifyEmailChangeTokenRequest()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifyOperatorsRequest(_ key: PayloadKey) -> VerifyOperatorsRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = VerifyOperatorsRequest()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifyPasswordResetTokenRequest(_ key: PayloadKey) -> VerifyPasswordResetTokenRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = VerifyPasswordResetTokenRequest()
        instance.password = source.decodeString(.password)
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifySubscriberTransferTokenRequest(_ key: PayloadKey) -> VerifySubscriberTransferTokenRequest? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = VerifySubscriberTransferTokenRequest()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifySubscriberTransferTokenResponse(_ key: PayloadKey) -> VerifySubscriberTransferTokenResponse? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = VerifySubscriberTransferTokenResponse()
        instance.transferredImsi = source.decodeArray(.transferredImsi)
        return instance
    }

    
    func decodeVirtualPrivateGateway(_ key: PayloadKey) -> VirtualPrivateGateway? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = VirtualPrivateGateway()
        instance.operatorId = source.decodeString(.operatorId)
        instance.id = source.decodeString(.id) // FIXME: What do I do with isEnum? , baseName: primaryServiceName name: primaryServiceName classname: VirtualPrivateGateway datatypeWithEnum: PrimaryServiceName
        instance.primaryServiceName = source.decodePrimaryServiceName(.primaryServiceName)
        instance._type = source.decodeInt64(._type)
        instance.status = source.decodeString(.status)
        instance.useInternetGateway = source.decodeBool(.useInternetGateway)
        instance.vpcPeeringConnections = source.decodeMap(.vpcPeeringConnections)
        instance.virtualInterfaces = source.decodeMap(.virtualInterfaces)
        instance.createdTime = source.decodeInt64(.createdTime)
        instance.lastModifiedTime = source.decodeInt64(.lastModifiedTime)
        instance.tags = source.decodeTagSet(.tags)
        return instance
    }

    
    func decodeVpcPeeringConnection(_ key: PayloadKey) -> VpcPeeringConnection? {

        guard let dict = self[key] as? [String:Any] else {
            return nil
        }
        guard let source = Payload.fromDictionary(dict) else {
            return nil
        }

        let instance = VpcPeeringConnection()
        instance.id = source.decodeString(.id)
        instance.peerOwnerId = source.decodeString(.peerOwnerId)
        instance.peerVpcId = source.decodeString(.peerVpcId)
        instance.destinationCidrBlock = source.decodeString(.destinationCidrBlock)
        return instance
    }

}


