// Models.swift Generated by swagger-codegenã€€___SORACOM_SDK_SWIFT_SWAGGERER_CODE_GENERATION_METADATA___


extension Payload {


    
    func decodeAPICallError(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = APICallError()
        instance.errorMessage = source.decodeAPICallErrorMessage(.errorMessage)
        instance.httpStatus = source.decodeInt64(.httpStatus)
        return instance
    }

    
    func decodeAPICallErrorMessage(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = APICallErrorMessage()
        instance.code = source.decodeString(.code)
        instance.message = source.decodeString(.message)
        return instance
    }

    
    func decodeAPIKeyResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = APIKeyResponse()
        instance.apiKey = source.decodeString(.apiKey)
        return instance
    }

    
    func decodeActionConfig(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ActionConfig()
        instance.properties = source.decodeActionConfigProperty(.properties) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: ActionConfig datatypeWithEnum: _type baseName: type
        return instance
    }

    
    func decodeActionConfigProperty(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ActionConfigProperty() // FIXME: What do I do with isEnum? baseName: executionDateTimeConst name: executionDateTimeConst classname: ActionConfigProperty datatypeWithEnum: ExecutionDateTimeConst baseName: executionDateTimeConst
        instance.to = source.decodeString(.to)
        instance.title = source.decodeString(.title)
        instance.message = source.decodeString(.message) // FIXME: What do I do with isEnum? , baseName: speedClass name: speedClass classname: ActionConfigProperty datatypeWithEnum: SpeedClass baseName: speedClass
        instance.url = source.decodeString(.url) // FIXME: What do I do with isEnum? , baseName: httpMethod name: httpMethod classname: ActionConfigProperty datatypeWithEnum: HttpMethod baseName: httpMethod
        instance.contentType = source.decodeString(.contentType)
        instance.headers = source.decodeAnyObject(.headers)
        instance.body = source.decodeString(.body)
        instance.endpoint = source.decodeString(.endpoint)
        instance.functionName = source.decodeString(.functionName)
        instance.accessKey = source.decodeString(.accessKey)
        instance.secretAccessKey = source.decodeString(.secretAccessKey)
        instance.parameter1 = source.decodeString(.parameter1)
        instance.parameter2 = source.decodeString(.parameter2)
        instance.parameter3 = source.decodeString(.parameter3)
        instance.parameter4 = source.decodeString(.parameter4)
        instance.parameter5 = source.decodeString(.parameter5)
        return instance
    }

    
    func decodeAirStatsResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = AirStatsResponse()
        instance.dataTrafficStatsMap = source.decodeDictionary(.dataTrafficStatsMap)
        instance.date = source.decodeString(.date)
        instance.unixtime = source.decodeInt64(.unixtime)
        return instance
    }

    
    func decodeAttachRoleRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = AttachRoleRequest()
        instance.roleId = source.decodeString(.roleId)
        return instance
    }

    
    func decodeAuthKeyResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = AuthKeyResponse()
        instance.authKeyId = source.decodeString(.authKeyId)
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.lastUsedDateTime = source.decodeInt64(.lastUsedDateTime)
        return instance
    }

    
    func decodeAuthRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = AuthRequest()
        instance.authKey = source.decodeString(.authKey)
        instance.authKeyId = source.decodeString(.authKeyId)
        instance.email = source.decodeString(.email)
        instance.operatorId = source.decodeString(.operatorId)
        instance.password = source.decodeString(.password)
        instance.tokenTimeoutSeconds = source.decodeInt64(.tokenTimeoutSeconds)
        instance.userName = source.decodeString(.userName)
        return instance
    }

    
    func decodeAuthResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = AuthResponse()
        instance.apiKey = source.decodeString(.apiKey)
        instance.operatorId = source.decodeString(.operatorId)
        instance.token = source.decodeString(.token)
        instance.userName = source.decodeString(.userName)
        return instance
    }

    
    func decodeBeamStatsResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = BeamStatsResponse()
        instance.beamStatsMap = source.decodeDictionary(.beamStatsMap)
        instance.date = source.decodeString(.date)
        instance.unixtime = source.decodeInt64(.unixtime)
        return instance
    }

    
    func decodeConfig(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = Config()
        instance.properties = source.decodeDictionary(.properties)
        instance._type = source.decodeString(._type)
        return instance
    }

    
    func decodeCouponResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CouponResponse()
        instance.amount = source.decodeDouble(.amount)
        instance.balance = source.decodeDouble(.balance)
        instance.billItemName = source.decodeString(.billItemName)
        instance.couponCode = source.decodeString(.couponCode)
        instance.expiryYearMonth = source.decodeString(.expiryYearMonth)
        return instance
    }

    
    func decodeCreateAndUpdateCredentialsModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateAndUpdateCredentialsModel()
        instance.credentials = source.decodeAnyObject(.credentials)
        instance.description = source.decodeString(.description) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: CreateAndUpdateCredentialsModel datatypeWithEnum: _type baseName: type
        return instance
    }

    
    func decodeCreateEstimatedOrderRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateEstimatedOrderRequest()
        instance.orderItemList = source.decodeArray(.orderItemList)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        return instance
    }

    
    func decodeCreateEventHandlerRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateEventHandlerRequest()
        instance.actionConfigList = source.decodeArray(.actionConfigList)
        instance.description = source.decodeString(.description)
        instance.name = source.decodeString(.name)
        instance.ruleConfig = source.decodeRuleConfig(.ruleConfig) // FIXME: What do I do with isEnum? , baseName: status name: status classname: CreateEventHandlerRequest datatypeWithEnum: Status baseName: status
        instance.targetGroupId = source.decodeString(.targetGroupId)
        instance.targetImsi = source.decodeString(.targetImsi)
        instance.targetOperatorId = source.decodeString(.targetOperatorId)
        instance.targetTag = source.decodeTag(.targetTag)
        return instance
    }

    
    func decodeCreateGroupRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateGroupRequest()
        instance.tags = source.decodeTag(.tags)
        return instance
    }

    
    func decodeCreateOrUpdateRoleRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateOrUpdateRoleRequest()
        instance.description = source.decodeString(.description)
        instance.permission = source.decodeString(.permission)
        return instance
    }

    
    func decodeCreateRoleResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateRoleResponse()
        instance.roleId = source.decodeString(.roleId)
        return instance
    }

    
    func decodeCreateUserPasswordRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateUserPasswordRequest()
        instance.password = source.decodeString(.password)
        return instance
    }

    
    func decodeCreateUserRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateUserRequest()
        instance.description = source.decodeString(.description)
        return instance
    }

    
    func decodeCreateVirtualPrivateGatewayRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateVirtualPrivateGatewayRequest() // FIXME: What do I do with isEnum? baseName: primaryServiceName name: primaryServiceName classname: CreateVirtualPrivateGatewayRequest datatypeWithEnum: PrimaryServiceName baseName: primaryServiceName
        instance.useInternetGateway = source.decodeBool(.useInternetGateway)
        instance.deviceSubnetCidrRange = source.decodeString(.deviceSubnetCidrRange)
        return instance
    }

    
    func decodeCreateVpcPeeringConnectionRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreateVpcPeeringConnectionRequest()
        instance.peerOwnerId = source.decodeString(.peerOwnerId)
        instance.peerVpcId = source.decodeString(.peerVpcId)
        instance.destinationCidrBlock = source.decodeString(.destinationCidrBlock)
        return instance
    }

    
    func decodeCredentialsModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CredentialsModel()
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.credentials = source.decodeAnyObject(.credentials)
        instance.credentialsId = source.decodeString(.credentialsId)
        instance.description = source.decodeString(.description)
        instance.lastUsedDateTime = source.decodeInt64(.lastUsedDateTime) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: CredentialsModel datatypeWithEnum: _type baseName: type
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        return instance
    }

    
    func decodeCreditCard(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = CreditCard()
        instance.cvc = source.decodeString(.cvc)
        instance.expireMonth = source.decodeInt64(.expireMonth)
        instance.expireYear = source.decodeInt64(.expireYear)
        instance.name = source.decodeString(.name)
        instance.number = source.decodeString(.number)
        return instance
    }

    
    func decodeDailyBill(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = DailyBill()
        instance.amount = source.decodeInt64(.amount)
        instance.date = source.decodeString(.date)
        return instance
    }

    
    func decodeDailyBillResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = DailyBillResponse()
        instance.billList = source.decodeArray(.billList)
        return instance
    }

    
    func decodeDataTrafficStats(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = DataTrafficStats()
        instance.downloadByteSizeTotal = source.decodeInt64(.downloadByteSizeTotal)
        instance.downloadPacketSizeTotal = source.decodeInt64(.downloadPacketSizeTotal)
        instance.uploadByteSizeTotal = source.decodeInt64(.uploadByteSizeTotal)
        instance.uploadPacketSizeTotal = source.decodeInt64(.uploadPacketSizeTotal)
        return instance
    }

    
    func decodeError(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = Error()
        instance.code = source.decodeInt64(.code)
        instance.message = source.decodeString(.message)
        instance.fields = source.decodeString(.fields)
        return instance
    }

    
    func decodeEstimatedOrderItemModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = EstimatedOrderItemModel()
        instance.product = source.decodeProductModel(.product)
        instance.productAmount = source.decodeDouble(.productAmount)
        instance.quantity = source.decodeInt64(.quantity)
        return instance
    }

    
    func decodeEstimatedOrderModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = EstimatedOrderModel()
        instance.email = source.decodeString(.email)
        instance.orderId = source.decodeString(.orderId)
        instance.orderItemList = source.decodeArray(.orderItemList)
        instance.shippingAddress = source.decodeShippingAddressModel(.shippingAddress)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        instance.shippingCost = source.decodeDouble(.shippingCost)
        instance.taxAmount = source.decodeDouble(.taxAmount)
        instance.totalAmount = source.decodeDouble(.totalAmount)
        return instance
    }

    
    func decodeEventHandlerModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = EventHandlerModel()
        instance.actionConfigList = source.decodeArray(.actionConfigList)
        instance.description = source.decodeString(.description)
        instance.handlerId = source.decodeString(.handlerId)
        instance.name = source.decodeString(.name)
        instance.ruleConfig = source.decodeRuleConfig(.ruleConfig) // FIXME: What do I do with isEnum? , baseName: status name: status classname: EventHandlerModel datatypeWithEnum: Status baseName: status
        instance.targetGroupId = source.decodeString(.targetGroupId)
        instance.targetImsi = source.decodeString(.targetImsi)
        instance.targetOperatorId = source.decodeString(.targetOperatorId)
        instance.targetTag = source.decodeTag(.targetTag)
        return instance
    }

    
    func decodeExpiryTime(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ExpiryTime()
        instance.expiryTime = source.decodeInt64(.expiryTime) // FIXME: What do I do with isEnum? , baseName: expiryAction name: expiryAction classname: ExpiryTime datatypeWithEnum: ExpiryAction baseName: expiryAction
        return instance
    }

    
    func decodeExportRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ExportRequest()
        instance.from = source.decodeInt64(.from) // FIXME: What do I do with isEnum? , baseName: period name: period classname: ExportRequest datatypeWithEnum: Period baseName: period
        instance.to = source.decodeInt64(.to)
        return instance
    }

    
    func decodeFileOutputResult(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = FileOutputResult()
        instance.url = source.decodeString(.url)
        return instance
    }

    
    func decodeGatePeer(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GatePeer()
        instance.outerIpAddress = source.decodeString(.outerIpAddress)
        instance.innerIpAddress = source.decodeString(.innerIpAddress)
        instance.ownedByCustomer = source.decodeBool(.ownedByCustomer)
        return instance
    }

    
    func decodeGenerateOperatorsAuthKeyResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GenerateOperatorsAuthKeyResponse()
        instance.authKey = source.decodeString(.authKey)
        instance.authKeyId = source.decodeString(.authKeyId)
        return instance
    }

    
    func decodeGenerateTokenRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GenerateTokenRequest()
        instance.tokenTimeoutSeconds = source.decodeInt64(.tokenTimeoutSeconds)
        return instance
    }

    
    func decodeGenerateTokenResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GenerateTokenResponse()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeGenerateUserAuthKeyResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GenerateUserAuthKeyResponse()
        instance.authKey = source.decodeString(.authKey)
        instance.authKeyId = source.decodeString(.authKeyId)
        return instance
    }

    
    func decodeGetBillingHistoryResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetBillingHistoryResponse()
        instance.billList = source.decodeArray(.billList)
        return instance
    }

    
    func decodeGetLatestBill(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetLatestBill()
        instance.amount = source.decodeInt64(.amount)
        instance.lastEvaluatedTime = source.decodeString(.lastEvaluatedTime)
        return instance
    }

    
    func decodeGetOperatorResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetOperatorResponse()
        instance.createDate = source.decodeString(.createDate)
        instance.description = source.decodeString(.description)
        instance.email = source.decodeString(.email)
        instance.operatorId = source.decodeString(.operatorId)
        instance.rootOperatorId = source.decodeString(.rootOperatorId)
        instance.updateDate = source.decodeString(.updateDate)
        return instance
    }

    
    func decodeGetOrderResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetOrderResponse()
        instance.email = source.decodeString(.email)
        instance.orderDateTime = source.decodeString(.orderDateTime)
        instance.orderId = source.decodeString(.orderId)
        instance.orderItemList = source.decodeArray(.orderItemList) // FIXME: What do I do with isEnum? , baseName: orderStatus name: orderStatus classname: GetOrderResponse datatypeWithEnum: OrderStatus baseName: orderStatus
        instance.shippingAddress = source.decodeShippingAddressModel(.shippingAddress)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        instance.shippingCost = source.decodeDouble(.shippingCost)
        instance.shippingLabelNumber = source.decodeString(.shippingLabelNumber)
        instance.taxAmount = source.decodeDouble(.taxAmount)
        instance.totalAmount = source.decodeDouble(.totalAmount)
        return instance
    }

    
    func decodeGetPaymentMethodResult(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetPaymentMethodResult() // FIXME: What do I do with isEnum? baseName: errorCode name: errorCode classname: GetPaymentMethodResult datatypeWithEnum: ErrorCode baseName: errorCode
        instance.errorMessage = source.decodeString(.errorMessage)
        instance.properties = source.decodeString(.properties) // FIXME: What do I do with isEnum? , baseName: providerType name: providerType classname: GetPaymentMethodResult datatypeWithEnum: ProviderType baseName: providerType
        instance.updateDate = source.decodeString(.updateDate)
        return instance
    }

    
    func decodeGetPaymentTransactionResult(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetPaymentTransactionResult()
        instance.amount = source.decodePaymentAmount(.amount)
        instance.description = source.decodePaymentDescription(.description)
        instance.message = source.decodeString(.message) // FIXME: What do I do with isEnum? , baseName: messageCode name: messageCode classname: GetPaymentTransactionResult datatypeWithEnum: MessageCode baseName: messageCode // FIXME: What do I do with isEnum? , baseName: status name: status classname: GetPaymentTransactionResult datatypeWithEnum: Status baseName: status
        return instance
    }

    
    func decodeGetShippingAddressResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetShippingAddressResponse()
        instance.addressLine1 = source.decodeString(.addressLine1)
        instance.addressLine2 = source.decodeString(.addressLine2)
        instance.building = source.decodeString(.building)
        instance.city = source.decodeString(.city)
        instance.companyName = source.decodeString(.companyName)
        instance.department = source.decodeString(.department)
        instance.fullName = source.decodeString(.fullName)
        instance.phoneNumber = source.decodeString(.phoneNumber)
        instance.shippingAddressId = source.decodeString(.shippingAddressId)
        instance.shippingArea = source.decodeString(.shippingArea)
        instance.state = source.decodeString(.state)
        instance.zipCode = source.decodeString(.zipCode)
        return instance
    }

    
    func decodeGetUserPasswordResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetUserPasswordResponse()
        instance.hasPassword = source.decodeBool(.hasPassword)
        return instance
    }

    
    func decodeGetUserPermissionResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GetUserPermissionResponse()
        instance.permission = source.decodeString(.permission)
        return instance
    }

    
    func decodeGroup(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = Group()
        instance.configuration = source.decodeMap(.configuration)
        instance.createdTime = source.decodeInt64(.createdTime)
        instance.groupId = source.decodeString(.groupId)
        instance.lastModifiedTime = source.decodeInt64(.lastModifiedTime)
        instance.operatorId = source.decodeString(.operatorId)
        instance.tags = source.decodeMap(.tags)
        return instance
    }

    
    func decodeGroupConfigurationUpdateRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = GroupConfigurationUpdateRequest()
        instance.key = source.decodeString(.key)
        instance.value = source.decodeString(.value)
        return instance
    }

    
    func decodeIpAddressMapEntry(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = IpAddressMapEntry()
        instance.key = source.decodeString(.key)
        instance.ipAddress = source.decodeString(.ipAddress) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: IpAddressMapEntry datatypeWithEnum: _type baseName: type
        return instance
    }

    
    func decodeIssueEmailChangeTokenRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = IssueEmailChangeTokenRequest()
        instance.email = source.decodeString(.email)
        return instance
    }

    
    func decodeIssuePasswordResetTokenRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = IssuePasswordResetTokenRequest()
        instance.email = source.decodeString(.email)
        return instance
    }

    
    func decodeIssueSubscriberTransferTokenRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = IssueSubscriberTransferTokenRequest()
        instance.transferDestinationOperatorEmail = source.decodeString(.transferDestinationOperatorEmail)
        instance.transferDestinationOperatorId = source.decodeString(.transferDestinationOperatorId)
        instance.transferImsi = source.decodeArray(.transferImsi)
        return instance
    }

    
    func decodeIssueSubscriberTransferTokenResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = IssueSubscriberTransferTokenResponse()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeListCouponResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ListCouponResponse()
        instance.couponList = source.decodeArray(.couponList)
        return instance
    }

    
    func decodeListOrderResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ListOrderResponse()
        instance.orderList = source.decodeArray(.orderList)
        return instance
    }

    
    func decodeListOrderedSubscriberResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ListOrderedSubscriberResponse()
        instance.orderedSubscriberList = source.decodeArray(.orderedSubscriberList)
        return instance
    }

    
    func decodeListProductResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ListProductResponse()
        instance.productList = source.decodeArray(.productList)
        instance.shippingCostList = source.decodeArray(.shippingCostList)
        return instance
    }

    
    func decodeListRolesResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ListRolesResponse()
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.description = source.decodeString(.description)
        instance.roleId = source.decodeString(.roleId)
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        return instance
    }

    
    func decodeListShippingAddressResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ListShippingAddressResponse()
        instance.shippingAddresses = source.decodeArray(.shippingAddresses)
        return instance
    }

    
    func decodeListSubOperatorsResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ListSubOperatorsResponse()
        instance.operatorId = source.decodeString(.operatorId)
        return instance
    }

    
    func decodeMap(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = Map()
        return instance
    }

    
    func decodeMapstringDataTrafficStats(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = MapstringDataTrafficStats()
        return instance
    }

    
    func decodeMapstringstring(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = Mapstringstring()
        return instance
    }

    
    func decodeMonthlyBill(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = MonthlyBill()
        instance.amount = source.decodeInt64(.amount) // FIXME: What do I do with isEnum? , baseName: paymentStatus name: paymentStatus classname: MonthlyBill datatypeWithEnum: PaymentStatus baseName: paymentStatus
        instance.paymentTransactionId = source.decodeString(.paymentTransactionId)
        instance.yearMonth = source.decodeString(.yearMonth)
        return instance
    }

    
    func decodeOrderItemModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = OrderItemModel()
        instance.productCode = source.decodeString(.productCode)
        instance.quantity = source.decodeInt64(.quantity)
        return instance
    }

    
    func decodeOrderedSubscriber(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = OrderedSubscriber()
        instance.imsi = source.decodeString(.imsi)
        instance.msisdn = source.decodeString(.msisdn)
        instance.serialNumber = source.decodeString(.serialNumber)
        return instance
    }

    
    func decodePaymentAmount(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = PaymentAmount()
        instance.taxAmount = source.decodeDouble(.taxAmount)
        instance.totalAmount = source.decodeDouble(.totalAmount)
        return instance
    }

    
    func decodePaymentDescription(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = PaymentDescription()
        instance.description = source.decodeString(.description)
        instance.itemList = source.decodeArray(.itemList)
        return instance
    }

    
    func decodeProductModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ProductModel()
        instance.count = source.decodeDouble(.count)
        instance.maxQuantity = source.decodeInt64(.maxQuantity)
        instance.price = source.decodeDouble(.price)
        instance.productCode = source.decodeString(.productCode)
        instance.productInfoURL = source.decodeString(.productInfoURL)
        instance.productName = source.decodeString(.productName) // FIXME: What do I do with isEnum? , baseName: productType name: productType classname: ProductModel datatypeWithEnum: ProductType baseName: productType
        instance.properties = source.decodeDictionary(.properties)
        return instance
    }

    
    func decodePutIpAddressMapEntryRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = PutIpAddressMapEntryRequest()
        instance.key = source.decodeString(.key)
        instance.ipAddress = source.decodeString(.ipAddress)
        return instance
    }

    
    func decodeRegisterGatePeerRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = RegisterGatePeerRequest()
        instance.outerIpAddress = source.decodeString(.outerIpAddress)
        instance.innerIpAddress = source.decodeString(.innerIpAddress)
        return instance
    }

    
    func decodeRegisterOperatorsRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = RegisterOperatorsRequest()
        instance.email = source.decodeString(.email)
        instance.password = source.decodeString(.password)
        return instance
    }

    
    func decodeRegisterSubscribersRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = RegisterSubscribersRequest()
        instance.registrationSecret = source.decodeString(.registrationSecret)
        instance.groupId = source.decodeString(.groupId)
        instance.tags = source.decodeArray(.tags)
        return instance
    }

    
    func decodeRoleResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = RoleResponse()
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.description = source.decodeString(.description)
        instance.permission = source.decodeString(.permission)
        instance.roleId = source.decodeString(.roleId)
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        return instance
    }

    
    func decodeRuleConfig(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = RuleConfig()
        instance.properties = source.decodeRuleConfigProperty(.properties) // FIXME: What do I do with isEnum? , baseName: type name: _type classname: RuleConfig datatypeWithEnum: _type baseName: type
        return instance
    }

    
    func decodeRuleConfigProperty(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = RuleConfigProperty()
        instance.limitTotalTrafficMegaByte = source.decodeInt64(.limitTotalTrafficMegaByte) // FIXME: What do I do with isEnum? , baseName: inactiveTimeoutDateConst name: inactiveTimeoutDateConst classname: RuleConfigProperty datatypeWithEnum: InactiveTimeoutDateConst baseName: inactiveTimeoutDateConst // FIXME: What do I do with isEnum? , baseName: targetStatus name: targetStatus classname: RuleConfigProperty datatypeWithEnum: TargetStatus baseName: targetStatus // FIXME: What do I do with isEnum? , baseName: targetSpeedClass name: targetSpeedClass classname: RuleConfigProperty datatypeWithEnum: TargetSpeedClass baseName: targetSpeedClass
        return instance
    }

    
    func decodeSessionEvent(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = SessionEvent()
        instance.operatorId = source.decodeString(.operatorId)
        instance.imsi = source.decodeString(.imsi)
        instance.time = source.decodeInt64(.time)
        instance.event = source.decodeString(.event)
        instance.imei = source.decodeString(.imei)
        instance.ueIpAddress = source.decodeString(.ueIpAddress)
        instance.apn = source.decodeString(.apn)
        instance.dns0 = source.decodeString(.dns0)
        instance.dns1 = source.decodeString(.dns1)
        instance.vpgId = source.decodeString(.vpgId)
        instance.gatewayPrivateIpAddress = source.decodeString(.gatewayPrivateIpAddress)
        instance.gatewayPublicIpAddress = source.decodeString(.gatewayPublicIpAddress)
        return instance
    }

    
    func decodeSessionStatus(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = SessionStatus()
        instance.isOnline = source.decodeBool(.isOnline)
        instance.lastUpdatedAt = source.decodeInt64(.lastUpdatedAt)
        instance.imei = source.decodeString(.imei)
        instance.ueIpAddress = source.decodeString(.ueIpAddress)
        instance.dnsServers = source.decodeArray(.dnsServers)
        instance.vpgId = source.decodeString(.vpgId)
        instance.gatewayPrivateIpAddress = source.decodeString(.gatewayPrivateIpAddress)
        instance.gatewayPublicIpAddress = source.decodeString(.gatewayPublicIpAddress)
        return instance
    }

    
    func decodeSetUserPermissionRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = SetUserPermissionRequest()
        instance.description = source.decodeString(.description)
        instance.permission = source.decodeString(.permission)
        return instance
    }

    
    func decodeShippingAddressModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ShippingAddressModel()
        instance.addressLine1 = source.decodeString(.addressLine1)
        instance.addressLine2 = source.decodeString(.addressLine2)
        instance.building = source.decodeString(.building)
        instance.city = source.decodeString(.city)
        instance.companyName = source.decodeString(.companyName)
        instance.department = source.decodeString(.department)
        instance.fullName = source.decodeString(.fullName)
        instance.phoneNumber = source.decodeString(.phoneNumber)
        instance.state = source.decodeString(.state)
        instance.zipCode = source.decodeString(.zipCode)
        return instance
    }

    
    func decodeShippingCostModel(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = ShippingCostModel() // FIXME: What do I do with isEnum? baseName: shippingArea name: shippingArea classname: ShippingCostModel datatypeWithEnum: ShippingArea baseName: shippingArea
        instance.shippingAreaName = source.decodeString(.shippingAreaName)
        instance.shippingCost = source.decodeDouble(.shippingCost)
        instance.size = source.decodeInt64(.size)
        return instance
    }

    
    func decodeSoracomBeamStats(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = SoracomBeamStats()
        instance.count = source.decodeInt64(.count)
        return instance
    }

    
    func decodeSubscriber(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = Subscriber()
        instance.imsi = source.decodeString(.imsi)
        instance.msisdn = source.decodeString(.msisdn)
        instance.serialNumber = source.decodeString(.serialNumber)
        instance.iccid = source.decodeString(.iccid)
        instance.apn = source.decodeString(.apn)
        instance.speedClass = source.decodeString(.speedClass)
        instance.createdAt = source.decodeInt64(.createdAt)
        instance.lastModifiedAt = source.decodeInt64(.lastModifiedAt)
        instance.expiryTime = source.decodeInt64(.expiryTime)
        instance.expiryAction = source.decodeString(.expiryAction)
        instance.status = source.decodeString(.status)
        instance.sessionStatus = source.decodeSessionStatus(.sessionStatus)
        instance.tags = source.decodeMap(.tags)
        instance.operatorId = source.decodeString(.operatorId)
        return instance
    }

    
    func decodeSupportTokenResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = SupportTokenResponse()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeTag(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = Tag()
        return instance
    }

    
    func decodeTagUpdateRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = TagUpdateRequest()
        instance.tagName = source.decodeString(.tagName)
        instance.tagValue = source.decodeString(.tagValue)
        return instance
    }

    
    func decodeUpdateEventHandlerRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = UpdateEventHandlerRequest()
        return instance
    }

    
    func decodeUpdatePasswordRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = UpdatePasswordRequest()
        instance.currentPassword = source.decodeString(.currentPassword)
        instance.newPassword = source.decodeString(.newPassword)
        return instance
    }

    
    func decodeUpdateSpeedClassRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = UpdateSpeedClassRequest() // FIXME: What do I do with isEnum? baseName: speedClass name: speedClass classname: UpdateSpeedClassRequest datatypeWithEnum: SpeedClass baseName: speedClass
        return instance
    }

    
    func decodeUpdateUserRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = UpdateUserRequest()
        instance.description = source.decodeString(.description)
        return instance
    }

    
    func decodeUserDetailResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = UserDetailResponse()
        instance.authKeyList = source.decodeArray(.authKeyList)
        instance.createDateTime = source.decodeInt64(.createDateTime)
        instance.description = source.decodeString(.description)
        instance.hasPassword = source.decodeBool(.hasPassword)
        instance.permission = source.decodeString(.permission)
        instance.roleList = source.decodeArray(.roleList)
        instance.updateDateTime = source.decodeInt64(.updateDateTime)
        instance.userName = source.decodeString(.userName)
        return instance
    }

    
    func decodeVerifyEmailChangeTokenRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = VerifyEmailChangeTokenRequest()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifyOperatorsRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = VerifyOperatorsRequest()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifyPasswordResetTokenRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = VerifyPasswordResetTokenRequest()
        instance.password = source.decodeString(.password)
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifySubscriberTransferTokenRequest(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = VerifySubscriberTransferTokenRequest()
        instance.token = source.decodeString(.token)
        return instance
    }

    
    func decodeVerifySubscriberTransferTokenResponse(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = VerifySubscriberTransferTokenResponse()
        instance.transferredImsi = source.decodeArray(.transferredImsi)
        return instance
    }

    
    func decodeVirtualPrivateGateway(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = VirtualPrivateGateway()
        instance.operatorId = source.decodeString(.operatorId)
        instance.id = source.decodeString(.id) // FIXME: What do I do with isEnum? , baseName: primaryServiceName name: primaryServiceName classname: VirtualPrivateGateway datatypeWithEnum: PrimaryServiceName baseName: primaryServiceName
        instance._type = source.decodeInt64(._type)
        instance.status = source.decodeString(.status)
        instance.useInternetGateway = source.decodeBool(.useInternetGateway)
        instance.vpcPeeringConnections = source.decodeMap(.vpcPeeringConnections)
        instance.virtualInterfaces = source.decodeMap(.virtualInterfaces)
        instance.createdTime = source.decodeInt64(.createdTime)
        instance.lastModifiedTime = source.decodeInt64(.lastModifiedTime)
        instance.tags = source.decodeTag(.tags)
        return instance
    }

    
    func decodeVpcPeeringConnection(key: PayloadKey) {

        let source = Payload.fromDictionary(self[key])

        let instance = VpcPeeringConnection()
        instance.id = source.decodeString(.id)
        instance.peerOwnerId = source.decodeString(.peerOwnerId)
        instance.peerVpcId = source.decodeString(.peerVpcId)
        instance.destinationCidrBlock = source.decodeString(.destinationCidrBlock)
        return instance
    }

}


