// RuleConfigProperty.swift Generated by swagger-codegen  â€” Custom output templates and post-processing by CodeGeneratorForSoracomSDKSwift.Swaggerer version 0.0d1. Generated 2016-09-12T00:54:57Z

import Foundation


public class RuleConfigProperty: PayloadConvertible {

    public enum InactiveTimeoutDateConst: String { 
        case Immediately = "IMMEDIATELY"
        case BeginningOfNextMonth = "BEGINNING_OF_NEXT_MONTH"
        case BeginningOfNextDay = "BEGINNING_OF_NEXT_DAY"
        case AfterOneDay = "AFTER_ONE_DAY"
        case Never = "NEVER"
    }
    public enum TargetStatus: String { 
        case Ready = "ready"
        case Active = "active"
        case Inactive = "inactive"
        case Suspended = "suspended"
        case Terminated = "terminated"
    }
    public enum TargetSpeedClass: String { 
        case s1_minimum  = "s1.minimum"
        case s1_slow     = "s1.slow"
        case s1_standard = "s1.standard"
        case s1_fast     = "s1.fast"
    }
    public var limitTotalTrafficMegaByte: Int64?

    public var inactiveTimeoutDateConst: InactiveTimeoutDateConst?

    /** SubscriberStatusAttributeRule \u306E\u6642\u306E\u307F\u6709\u52B9 */
    public var targetStatus: TargetStatus?

    /** SubscriberSpeedClassAttributeRule \u306E\u6642\u306E\u307F\u6709\u52B9 */
    public var targetSpeedClass: TargetSpeedClass?

    public required init(
        limitTotalTrafficMegaByte: Int64? = nil, 
        inactiveTimeoutDateConst: InactiveTimeoutDateConst? = nil, 
        targetStatus: TargetStatus? = nil, 
        targetSpeedClass: TargetSpeedClass? = nil
    ) {
        self.limitTotalTrafficMegaByte = limitTotalTrafficMegaByte
        self.inactiveTimeoutDateConst = inactiveTimeoutDateConst
        self.targetStatus = targetStatus
        self.targetSpeedClass = targetSpeedClass
        
    }

    // MARK: PayloadConvertible

    public func toPayload() -> Payload {

        let payload: Payload = [:]

        payload[.limitTotalTrafficMegaByte] = limitTotalTrafficMegaByte
        payload[.inactiveTimeoutDateConst] = inactiveTimeoutDateConst
        payload[.targetStatus] = targetStatus
        payload[.targetSpeedClass] = targetSpeedClass

        return payload;
    }

    public static func from(_ payload: Payload?) -> Self? {
        guard let payload = payload else {
            return nil
        }

        _ = payload // suppress compiler warnings when payload isn't used in generated code

        let result = self.init()

        result.limitTotalTrafficMegaByte = payload.decodeInt64(.limitTotalTrafficMegaByte)
        result.inactiveTimeoutDateConst = payload.decodeInactiveTimeoutDateConst(.inactiveTimeoutDateConst)
        result.targetStatus = payload.decodeTargetStatus(.targetStatus)
        result.targetSpeedClass = payload.decodeTargetSpeedClass(.targetSpeedClass)
        return result
    }

}

public typealias RuleConfigPropertyList = [RuleConfigProperty]
