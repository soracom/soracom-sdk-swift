//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AuthAPI: APIBase {
    
    
    
    /**
     
     Performs authentication to access to the SORACOM API.
     
     - parameter auth: (body) Authentication request. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func auth(auth auth: AuthRequest, completion: ((data: AuthResponse?, error: ErrorType?) -> Void)) {
        authWithRequestBuilder(auth: auth).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Performs authentication to access to the SORACOM API.
     
     - POST /auth
     - Performs authentication to access to the SORACOM API. To perform authentication by a root account, specify `email` and `password`. To perform authentication by an AuthKey, specify `authKeyId` and `authKey`. To perform authentication by a SAM user, specify `operatorId`, `userName` and `password`. An API Key and an API Token will be included in the response if successful. Specify the API Key and the API Token to requests afterwards
     - examples: [{contentType=application/json, example={
  "apiKey" : "aeiou",
  "userName" : "aeiou",
  "operatorId" : "aeiou",
  "token" : "aeiou"
}}]
     
     - parameter auth: (body) Authentication request. 

     - returns: RequestBuilder<AuthResponse> 
     */
    public class func authWithRequestBuilder(auth auth: AuthRequest) -> RequestBuilder<AuthResponse> {
        let path = "/auth"
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = auth.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<AuthResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Issues a password reset token for the operator.
     
     - parameter request: (body) Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func issuePasswordResetToken(request request: IssuePasswordResetTokenRequest, completion: ((error: ErrorType?) -> Void)) {
        issuePasswordResetTokenWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Issues a password reset token for the operator.
     
     - POST /auth/password_reset_token/issue
     - Generates a password reset token and send it to the operator's mail address. After receiving the password reset token, call /v1/auth/password_reset_token/verify API with the token to update operator's password.
     
     - parameter request: (body) Request 

     - returns: RequestBuilder<Void> 
     */
    public class func issuePasswordResetTokenWithRequestBuilder(request request: IssuePasswordResetTokenRequest) -> RequestBuilder<Void> {
        let path = "/auth/password_reset_token/issue"
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Verifies the password reset token and updates password.
     
     - parameter request: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func verifyPasswordResetToken(request request: VerifyPasswordResetTokenRequest, completion: ((error: ErrorType?) -> Void)) {
        verifyPasswordResetTokenWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Verifies the password reset token and updates password.
     
     - POST /auth/password_reset_token/verify
     - Updates the operator's password if the password reset token is verified.
     
     - parameter request: (body) request 

     - returns: RequestBuilder<Void> 
     */
    public class func verifyPasswordResetTokenWithRequestBuilder(request request: VerifyPasswordResetTokenRequest) -> RequestBuilder<Void> {
        let path = "/auth/password_reset_token/verify"
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
