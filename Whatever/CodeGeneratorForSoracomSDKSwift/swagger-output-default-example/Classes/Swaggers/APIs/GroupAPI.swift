//
// GroupAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class GroupAPI: APIBase {
    
    
    
    /**
     
     Create Group.
     
     - parameter group: (body) Group to be created. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createGroup(group group: CreateGroupRequest, completion: ((data: Group?, error: ErrorType?) -> Void)) {
        createGroupWithRequestBuilder(group: group).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Create Group.
     
     - POST /groups
     - Create a new group.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : 123456789,
  "configuration" : { },
  "groupId" : "aeiou",
  "createdTime" : 123456789,
  "operatorId" : "aeiou",
  "tags" : { }
}}]
     
     - parameter group: (body) Group to be created. 

     - returns: RequestBuilder<Group> 
     */
    public class func createGroupWithRequestBuilder(group group: CreateGroupRequest) -> RequestBuilder<Group> {
        let path = "/groups"
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = group.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     * enum for parameter namespace
     */
    public enum Namespace_deleteConfigurationParameter: String { 
        case SoracomAir = "SoracomAir"
        case SoracomBeam = "SoracomBeam"
    }

    
    
    
    
    
    /**
     
     Delete Group Configuration Parameters.
     
     - parameter groupId: (path) Target group. 
     - parameter namespace: (path) Namespace of target parameters. 
     - parameter name: (path) Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteConfigurationParameter(groupId groupId: String, namespace: Namespace_deleteConfigurationParameter, name: String, completion: ((error: ErrorType?) -> Void)) {
        deleteConfigurationParameterWithRequestBuilder(groupId: groupId, namespace: namespace, name: name).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete Group Configuration Parameters.
     
     - DELETE /groups/{groupId}/configuration/{namespace}/{name}
     - Delete parameters for the specified group.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter groupId: (path) Target group. 
     - parameter namespace: (path) Namespace of target parameters. 
     - parameter name: (path) Parameter name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteConfigurationParameterWithRequestBuilder(groupId groupId: String, namespace: Namespace_deleteConfigurationParameter, name: String) -> RequestBuilder<Void> {
        var path = "/groups/{groupId}/configuration/{namespace}/{name}"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{namespace}", withString: "\(namespace.rawValue)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{name}", withString: "\(name)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Delete Group.
     
     - parameter groupId: (path) Target group ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteGroup(groupId groupId: String, completion: ((error: ErrorType?) -> Void)) {
        deleteGroupWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete Group.
     
     - DELETE /groups/{groupId}
     - Deletes the specified group by group ID
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter groupId: (path) Target group ID. 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteGroupWithRequestBuilder(groupId groupId: String) -> RequestBuilder<Void> {
        var path = "/groups/{groupId}"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     
     Delete Group Tag.
     
     - parameter groupId: (path) Target group ID. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteGroupTag(groupId groupId: String, tagName: String, completion: ((error: ErrorType?) -> Void)) {
        deleteGroupTagWithRequestBuilder(groupId: groupId, tagName: tagName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete Group Tag.
     
     - DELETE /groups/{groupId}/tags/{tagName}
     - Deletes tag from the specified group.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter groupId: (path) Target group ID. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteGroupTagWithRequestBuilder(groupId groupId: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/groups/{groupId}/tags/{tagName}"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tagName}", withString: "\(tagName)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Get Group.
     
     - parameter groupId: (path) Target group ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getGroup(groupId groupId: String, completion: ((data: Group?, error: ErrorType?) -> Void)) {
        getGroupWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get Group.
     
     - GET /groups/{groupId}
     - Returns the group specified by the group ID.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : 123456789,
  "configuration" : { },
  "groupId" : "aeiou",
  "createdTime" : 123456789,
  "operatorId" : "aeiou",
  "tags" : { }
}}]
     
     - parameter groupId: (path) Target group ID. 

     - returns: RequestBuilder<Group> 
     */
    public class func getGroupWithRequestBuilder(groupId groupId: String) -> RequestBuilder<Group> {
        var path = "/groups/{groupId}"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    
    
    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listGroups: String { 
        case Exact = "exact"
        case Prefix = "prefix"
    }

    
    
    
    
    
    
    
    /**
     
     List Groups.
     
     - parameter tagName: (query) Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required. (optional)
     - parameter tagValue: (query) Tag value of the groups. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of results per response page. (optional)
     - parameter lastEvaluatedKey: (query) The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listGroups(tagName tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listGroups? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: ((data: [Group]?, error: ErrorType?) -> Void)) {
        listGroupsWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     List Groups.
     
     - GET /groups
     - Returns a list of groups.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : 123456789,
  "configuration" : { },
  "groupId" : "aeiou",
  "createdTime" : 123456789,
  "operatorId" : "aeiou",
  "tags" : { }
} ]}]
     
     - parameter tagName: (query) Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required. (optional)
     - parameter tagValue: (query) Tag value of the groups. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of results per response page. (optional)
     - parameter lastEvaluatedKey: (query) The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    public class func listGroupsWithRequestBuilder(tagName tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listGroups? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[Group]> {
        let path = "/groups"
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "tag_name": tagName,
            "tag_value": tagValue,
            "tag_value_match_mode": tagValueMatchMode?.rawValue,
            "limit": limit,
            "last_evaluated_key": lastEvaluatedKey
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Group]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    
    
    
    
    
    
    
    /**
     
     List Subscribers in a group.
     
     - parameter groupId: (path) Target group ID. 
     - parameter limit: (query) Maximum number of results per response page. (optional)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listSubscribersInGroup(groupId groupId: String, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: ((data: Group?, error: ErrorType?) -> Void)) {
        listSubscribersInGroupWithRequestBuilder(groupId: groupId, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     List Subscribers in a group.
     
     - GET /groups/{groupId}/subscribers
     - Returns a list of subscribers that belong to the specified group by group ID.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : 123456789,
  "configuration" : { },
  "groupId" : "aeiou",
  "createdTime" : 123456789,
  "operatorId" : "aeiou",
  "tags" : { }
}}]
     
     - parameter groupId: (path) Target group ID. 
     - parameter limit: (query) Maximum number of results per response page. (optional)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)

     - returns: RequestBuilder<Group> 
     */
    public class func listSubscribersInGroupWithRequestBuilder(groupId groupId: String, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<Group> {
        var path = "/groups/{groupId}/subscribers"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "limit": limit,
            "last_evaluated_key": lastEvaluatedKey
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    
    
    
    
    
    /**
     * enum for parameter namespace
     */
    public enum Namespace_putConfigurationParameters: String { 
        case SoracomAir = "SoracomAir"
        case SoracomBeam = "SoracomBeam"
    }

    
    
    
    
    
    /**
     
     Update Group Configuration Parameters.
     
     - parameter groupId: (path) Target group. 
     - parameter namespace: (path) Target configuration. 
     - parameter parameters: (body) Array of values for target object to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putConfigurationParameters(groupId groupId: String, namespace: Namespace_putConfigurationParameters, parameters: [GroupConfigurationUpdateRequest], completion: ((data: Group?, error: ErrorType?) -> Void)) {
        putConfigurationParametersWithRequestBuilder(groupId: groupId, namespace: namespace, parameters: parameters).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Update Group Configuration Parameters.
     
     - PUT /groups/{groupId}/configuration/{namespace}
     - Adds/updates parameters for the specified group.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : 123456789,
  "configuration" : { },
  "groupId" : "aeiou",
  "createdTime" : 123456789,
  "operatorId" : "aeiou",
  "tags" : { }
}}]
     
     - parameter groupId: (path) Target group. 
     - parameter namespace: (path) Target configuration. 
     - parameter parameters: (body) Array of values for target object to be updated. 

     - returns: RequestBuilder<Group> 
     */
    public class func putConfigurationParametersWithRequestBuilder(groupId groupId: String, namespace: Namespace_putConfigurationParameters, parameters: [GroupConfigurationUpdateRequest]) -> RequestBuilder<Group> {
        var path = "/groups/{groupId}/configuration/{namespace}"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{namespace}", withString: "\(namespace.rawValue)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = parameters.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Group>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     
     Update Group Tags.
     
     - parameter groupId: (path) Target group ID. 
     - parameter tags: (body) Array of values for tags to be updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putGroupTags(groupId groupId: String, tags: [TagUpdateRequest], completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        putGroupTagsWithRequestBuilder(groupId: groupId, tags: tags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Update Group Tags.
     
     - PUT /groups/{groupId}/tags
     - Adds/updates tags of specified configuration group.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter groupId: (path) Target group ID. 
     - parameter tags: (body) Array of values for tags to be updated. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func putGroupTagsWithRequestBuilder(groupId groupId: String, tags: [TagUpdateRequest]) -> RequestBuilder<Subscriber> {
        var path = "/groups/{groupId}/tags"
        path = path.stringByReplacingOccurrencesOfString("{groupId}", withString: "\(groupId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = tags.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
