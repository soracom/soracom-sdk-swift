//
// SubscriberAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SubscriberAPI: APIBase {
    
    
    
    /**
     
     Activate Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func activateSubscriber(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        activateSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Activate Subscriber.
     
     - POST /subscribers/{imsi}/activate
     - Activates status of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func activateSubscriberWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/activate"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Deactivate Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deactivateSubscriber(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        deactivateSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Deactivate Subscriber.
     
     - POST /subscribers/{imsi}/deactivate
     - Deactivates specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func deactivateSubscriberWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/deactivate"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Delete Session
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubscriberSession(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        deleteSubscriberSessionWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Delete Session
     
     - POST /subscribers/{imsi}/delete_session
     - Deletes session for the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func deleteSubscriberSessionWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/delete_session"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     
     Delete Subscriber Tag.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubscriberTag(imsi imsi: String, tagName: String, completion: ((error: ErrorType?) -> Void)) {
        deleteSubscriberTagWithRequestBuilder(imsi: imsi, tagName: tagName).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete Subscriber Tag.
     
     - DELETE /subscribers/{imsi}/tags/{tagName}
     - Deletes a tag from the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubscriberTagWithRequestBuilder(imsi imsi: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/subscribers/{imsi}/tags/{tagName}"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{tagName}", withString: "\(tagName)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Delete Subscribers Transfer Token.
     
     - parameter token: (path) token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubscriberTransferToken(token token: String, completion: ((error: ErrorType?) -> Void)) {
        deleteSubscriberTransferTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete Subscribers Transfer Token.
     
     - DELETE /subscribers/transfer_token/{token}
     - Deletes the subscriber's inter-operator control transfer token, and cancels the control transfer.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter token: (path) token 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteSubscriberTransferTokenWithRequestBuilder(token token: String) -> RequestBuilder<Void> {
        var path = "/subscribers/transfer_token/{token}"
        path = path.stringByReplacingOccurrencesOfString("{token}", withString: "\(token)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Disable Termination of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func disableTermination(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        disableTerminationWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Disable Termination of Subscriber.
     
     - POST /subscribers/{imsi}/disable_termination
     - Disables termination of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func disableTerminationWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/disable_termination"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Enable Termination of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func enableTermination(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        enableTerminationWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Enable Termination of Subscriber.
     
     - POST /subscribers/{imsi}/enable_termination
     - Enables termination of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func enableTerminationWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/enable_termination"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Get Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubscriber(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        getSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Get Subscriber.
     
     - GET /subscribers/{imsi}
     - Returns information about the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func getSubscriberWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Issue Subscribers Transfer Token.
     
     - parameter request: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func issueSubscriberTransferToken(request request: IssueSubscriberTransferTokenRequest, completion: ((data: IssueSubscriberTransferTokenResponse?, error: ErrorType?) -> Void)) {
        issueSubscriberTransferTokenWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Issue Subscribers Transfer Token.
     
     - POST /subscribers/transfer_token/issue
     - Sends the subscriber's inter-operator control transfer token to the control destination operator.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "token" : "aeiou"
}}]
     
     - parameter request: (body) request 

     - returns: RequestBuilder<IssueSubscriberTransferTokenResponse> 
     */
    public class func issueSubscriberTransferTokenWithRequestBuilder(request request: IssueSubscriberTransferTokenRequest) -> RequestBuilder<IssueSubscriberTransferTokenResponse> {
        let path = "/subscribers/transfer_token/issue"
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<IssueSubscriberTransferTokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     List Session Events.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter from: (query) Start time for the events search range. (optional)
     - parameter to: (query) End time for the events search range. (optional)
     - parameter limit: (query) Maximum number of events to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listSessionEvents(imsi imsi: String, from: Int? = nil, to: Int? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: ((data: [SessionEvent]?, error: ErrorType?) -> Void)) {
        listSessionEventsWithRequestBuilder(imsi: imsi, from: from, to: to, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     List Session Events.
     
     - GET /subscribers/{imsi}/events/sessions
     - Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "gatewayPublicIpAddress" : "aeiou",
  "dns1" : "aeiou",
  "dns0" : "aeiou",
  "gatewayPrivateIpAddress" : "aeiou",
  "imei" : "aeiou",
  "imsi" : "aeiou",
  "time" : 123456789,
  "ueIpAddress" : "aeiou",
  "vpgId" : "aeiou",
  "event" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou"
} ]}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter from: (query) Start time for the events search range. (optional)
     - parameter to: (query) End time for the events search range. (optional)
     - parameter limit: (query) Maximum number of events to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward. (optional)

     - returns: RequestBuilder<[SessionEvent]> 
     */
    public class func listSessionEventsWithRequestBuilder(imsi imsi: String, from: Int? = nil, to: Int? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[SessionEvent]> {
        var path = "/subscribers/{imsi}/events/sessions"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "from": from,
            "to": to,
            "limit": limit,
            "last_evaluated_key": lastEvaluatedKey
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[SessionEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    
    
    
    
    
    
    
    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listSubscribers: String { 
        case Exact = "exact"
        case Prefix = "prefix"
    }

    
    
    
    
    
    
    
    
    
    
    
    /**
     
     List Subscribers.
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when `tag_name` has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter statusFilter: (query) Status for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `active`, `inactive`, `ready`, `instock`, `shipped`, `suspended`, and `terminated`. (optional)
     - parameter speedClassFilter: (query) Speed class for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `s1.minimum`, `s1.slow`, `s1.standard`, `s1.fast` (optional)
     - parameter limit: (query) Maximum number of subscribers to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listSubscribers(tagName tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listSubscribers? = nil, statusFilter: String? = nil, speedClassFilter: String? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: ((data: [Subscriber]?, error: ErrorType?) -> Void)) {
        listSubscribersWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, statusFilter: statusFilter, speedClassFilter: speedClassFilter, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     List Subscribers.
     
     - GET /subscribers
     - Returns a list of subscribers that match a certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
} ]}]
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when `tag_name` has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter statusFilter: (query) Status for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `active`, `inactive`, `ready`, `instock`, `shipped`, `suspended`, and `terminated`. (optional)
     - parameter speedClassFilter: (query) Speed class for filtering the search. Can specify multiple values delimited by `|`. Valid values include: `s1.minimum`, `s1.slow`, `s1.standard`, `s1.fast` (optional)
     - parameter limit: (query) Maximum number of subscribers to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)

     - returns: RequestBuilder<[Subscriber]> 
     */
    public class func listSubscribersWithRequestBuilder(tagName tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listSubscribers? = nil, statusFilter: String? = nil, speedClassFilter: String? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[Subscriber]> {
        let path = "/subscribers"
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [
            "tag_name": tagName,
            "tag_value": tagValue,
            "tag_value_match_mode": tagValueMatchMode?.rawValue,
            "status_filter": statusFilter,
            "speed_class_filter": speedClassFilter,
            "limit": limit,
            "last_evaluated_key": lastEvaluatedKey
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Subscriber]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    
    
    
    
    
    /**
     
     Bulk Insert or Update Subscriber Tags.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tags: (body) Array of tags to be inserted/updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putSubscriberTags(imsi imsi: String, tags: [TagUpdateRequest], completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        putSubscriberTagsWithRequestBuilder(imsi: imsi, tags: tags).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Bulk Insert or Update Subscriber Tags.
     
     - PUT /subscribers/{imsi}/tags
     - Inserts/updates tags for the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tags: (body) Array of tags to be inserted/updated. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func putSubscriberTagsWithRequestBuilder(imsi imsi: String, tags: [TagUpdateRequest]) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/tags"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = tags.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     
     Register Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter subscriber: (body) subscriber 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func registerSubscriber(imsi imsi: String, subscriber: RegisterSubscribersRequest, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        registerSubscriberWithRequestBuilder(imsi: imsi, subscriber: subscriber).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Register Subscriber.
     
     - POST /subscribers/{imsi}/register
     - Registers a subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter subscriber: (body) subscriber 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func registerSubscriberWithRequestBuilder(imsi imsi: String, subscriber: RegisterSubscribersRequest) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/register"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = subscriber.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     
     Update Expiry Time of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter request: (body) Expiry time after the update (unixtime: in milliseconds). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setExpiryTime(imsi imsi: String, request: ExpiryTime, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        setExpiryTimeWithRequestBuilder(imsi: imsi, request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Update Expiry Time of Subscriber.
     
     - POST /subscribers/{imsi}/set_expiry_time
     - Updates expiry time of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter request: (body) Expiry time after the update (unixtime: in milliseconds). 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func setExpiryTimeWithRequestBuilder(imsi imsi: String, request: ExpiryTime) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/set_expiry_time"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     
     Set Group to Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter group: (body) Group (may include ID only). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setGroup(imsi imsi: String, group: Group, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        setGroupWithRequestBuilder(imsi: imsi, group: group).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Set Group to Subscriber.
     
     - POST /subscribers/{imsi}/set_group
     - Sets or overwrites a group for the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter group: (body) Group (may include ID only). 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func setGroupWithRequestBuilder(imsi imsi: String, group: Group) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/set_group"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = group.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Terminate Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func terminateSubscriber(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        terminateSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Terminate Subscriber.
     
     - POST /subscribers/{imsi}/terminate
     - Terminates the specified subscriber
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func terminateSubscriberWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/terminate"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Delete Expiry Time of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func unsetExpiryTime(imsi imsi: String, completion: ((error: ErrorType?) -> Void)) {
        unsetExpiryTimeWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     
     Delete Expiry Time of Subscriber.
     
     - POST /subscribers/{imsi}/unset_expiry_time
     - Deletes expiry time of specified subscriber and changes it to indefinite.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Void> 
     */
    public class func unsetExpiryTimeWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Void> {
        var path = "/subscribers/{imsi}/unset_expiry_time"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Unset Group to Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func unsetGroup(imsi imsi: String, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        unsetGroupWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Unset Group to Subscriber.
     
     - POST /subscribers/{imsi}/unset_group
     - Removes the group configuration from the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    public class func unsetGroupWithRequestBuilder(imsi imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/unset_group"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    
    
    /**
     
     Update Subscriber speed class.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter speedClass: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSpeedClass(imsi imsi: String, speedClass: UpdateSpeedClassRequest, completion: ((data: Subscriber?, error: ErrorType?) -> Void)) {
        updateSpeedClassWithRequestBuilder(imsi: imsi, speedClass: speedClass).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Update Subscriber speed class.
     
     - POST /subscribers/{imsi}/update_speed_class
     - Changes the speed class of the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "aeiou",
  "serialNumber" : "aeiou",
  "lastModifiedAt" : 123456789,
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "aeiou",
    "lastUpdatedAt" : 123456789,
    "gatewayPrivateIpAddress" : "aeiou",
    "imei" : "aeiou",
    "isOnline" : true,
    "ueIpAddress" : "aeiou",
    "vpgId" : "aeiou",
    "dnsServers" : [ "aeiou" ]
  },
  "imsi" : "aeiou",
  "tags" : { },
  "speedClass" : "aeiou",
  "createdAt" : 123456789,
  "iccid" : "aeiou",
  "expiryTime" : 123456789,
  "msisdn" : "aeiou",
  "operatorId" : "aeiou",
  "apn" : "aeiou",
  "status" : "aeiou"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter speedClass: (body)  

     - returns: RequestBuilder<Subscriber> 
     */
    public class func updateSpeedClassWithRequestBuilder(imsi imsi: String, speedClass: UpdateSpeedClassRequest) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/update_speed_class"
        path = path.stringByReplacingOccurrencesOfString("{imsi}", withString: "\(imsi)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = speedClass.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    
    
    
    /**
     
     Verify Subscriber Transfer Token.
     
     - parameter request: (body) request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func verifySubscriberTransferToken(request request: VerifySubscriberTransferTokenRequest, completion: ((data: VerifySubscriberTransferTokenResponse?, error: ErrorType?) -> Void)) {
        verifySubscriberTransferTokenWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     
     Verify Subscriber Transfer Token.
     
     - POST /subscribers/transfer_token/verify
     - Verifies the subscriber's control transfer token, and executes the transfer. This API is called from the operator of the control destination.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "transferredImsi" : [ "aeiou" ]
}}]
     
     - parameter request: (body) request 

     - returns: RequestBuilder<VerifySubscriberTransferTokenResponse> 
     */
    public class func verifySubscriberTransferTokenWithRequestBuilder(request request: VerifySubscriberTransferTokenRequest) -> RequestBuilder<VerifySubscriberTransferTokenResponse> {
        let path = "/subscribers/transfer_token/verify"
        let URLString = SwaggerClientAPI.basePath + path
        
        let parameters = request.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VerifySubscriberTransferTokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
