// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if source is T {
            return source as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [APICallError]
            Decoders.addDecoder(clazz: [APICallError].self) { (source: AnyObject) -> [APICallError] in
                return Decoders.decode(clazz: [APICallError].self, source: source)
            }
            // Decoder for APICallError
            Decoders.addDecoder(clazz: APICallError.self) { (source: AnyObject) -> APICallError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = APICallError()
                instance.errorMessage = Decoders.decodeOptional(clazz: APICallErrorMessage.self, source: sourceDictionary["errorMessage"])
                instance.httpStatus = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["httpStatus"])
                
                return instance
            }
			

            // Decoder for [APICallErrorMessage]
            Decoders.addDecoder(clazz: [APICallErrorMessage].self) { (source: AnyObject) -> [APICallErrorMessage] in
                return Decoders.decode(clazz: [APICallErrorMessage].self, source: source)
            }
            // Decoder for APICallErrorMessage
            Decoders.addDecoder(clazz: APICallErrorMessage.self) { (source: AnyObject) -> APICallErrorMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = APICallErrorMessage()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                
                return instance
            }
			

            // Decoder for [APIKeyResponse]
            Decoders.addDecoder(clazz: [APIKeyResponse].self) { (source: AnyObject) -> [APIKeyResponse] in
                return Decoders.decode(clazz: [APIKeyResponse].self, source: source)
            }
            // Decoder for APIKeyResponse
            Decoders.addDecoder(clazz: APIKeyResponse.self) { (source: AnyObject) -> APIKeyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = APIKeyResponse()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apiKey"])
                
                return instance
            }
			

            // Decoder for [ActionConfig]
            Decoders.addDecoder(clazz: [ActionConfig].self) { (source: AnyObject) -> [ActionConfig] in
                return Decoders.decode(clazz: [ActionConfig].self, source: source)
            }
            // Decoder for ActionConfig
            Decoders.addDecoder(clazz: ActionConfig.self) { (source: AnyObject) -> ActionConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ActionConfig()
                instance.properties = Decoders.decodeOptional(clazz: ActionConfigProperty.self, source: sourceDictionary["properties"])
                instance._type = ActionConfig._type(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [ActionConfigProperty]
            Decoders.addDecoder(clazz: [ActionConfigProperty].self) { (source: AnyObject) -> [ActionConfigProperty] in
                return Decoders.decode(clazz: [ActionConfigProperty].self, source: source)
            }
            // Decoder for ActionConfigProperty
            Decoders.addDecoder(clazz: ActionConfigProperty.self) { (source: AnyObject) -> ActionConfigProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ActionConfigProperty()
                instance.executionDateTimeConst = ActionConfigProperty.ExecutionDateTimeConst(rawValue: (sourceDictionary["executionDateTimeConst"] as? String) ?? "") 
                instance.to = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.speedClass = ActionConfigProperty.SpeedClass(rawValue: (sourceDictionary["speedClass"] as? String) ?? "") 
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.httpMethod = ActionConfigProperty.HttpMethod(rawValue: (sourceDictionary["httpMethod"] as? String) ?? "") 
                instance.contentType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["contentType"])
                instance.headers = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["headers"])
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"])
                instance.endpoint = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endpoint"])
                instance.functionName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["functionName"])
                instance.accessKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["accessKey"])
                instance.secretAccessKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["secretAccessKey"])
                instance.parameter1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parameter1"])
                instance.parameter2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parameter2"])
                instance.parameter3 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parameter3"])
                instance.parameter4 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parameter4"])
                instance.parameter5 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["parameter5"])
                
                return instance
            }
			

            // Decoder for [AirStatsResponse]
            Decoders.addDecoder(clazz: [AirStatsResponse].self) { (source: AnyObject) -> [AirStatsResponse] in
                return Decoders.decode(clazz: [AirStatsResponse].self, source: source)
            }
            // Decoder for AirStatsResponse
            Decoders.addDecoder(clazz: AirStatsResponse.self) { (source: AnyObject) -> AirStatsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = AirStatsResponse()
                instance.dataTrafficStatsMap = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["dataTrafficStatsMap"])
                instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"])
                instance.unixtime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unixtime"])
                
                return instance
            }
			

            // Decoder for [AttachRoleRequest]
            Decoders.addDecoder(clazz: [AttachRoleRequest].self) { (source: AnyObject) -> [AttachRoleRequest] in
                return Decoders.decode(clazz: [AttachRoleRequest].self, source: source)
            }
            // Decoder for AttachRoleRequest
            Decoders.addDecoder(clazz: AttachRoleRequest.self) { (source: AnyObject) -> AttachRoleRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = AttachRoleRequest()
                instance.roleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roleId"])
                
                return instance
            }
			

            // Decoder for [AuthKeyResponse]
            Decoders.addDecoder(clazz: [AuthKeyResponse].self) { (source: AnyObject) -> [AuthKeyResponse] in
                return Decoders.decode(clazz: [AuthKeyResponse].self, source: source)
            }
            // Decoder for AuthKeyResponse
            Decoders.addDecoder(clazz: AuthKeyResponse.self) { (source: AnyObject) -> AuthKeyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = AuthKeyResponse()
                instance.authKeyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authKeyId"])
                instance.createDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createDateTime"])
                instance.lastUsedDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastUsedDateTime"])
                
                return instance
            }
			

            // Decoder for [AuthRequest]
            Decoders.addDecoder(clazz: [AuthRequest].self) { (source: AnyObject) -> [AuthRequest] in
                return Decoders.decode(clazz: [AuthRequest].self, source: source)
            }
            // Decoder for AuthRequest
            Decoders.addDecoder(clazz: AuthRequest.self) { (source: AnyObject) -> AuthRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = AuthRequest()
                instance.authKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authKey"])
                instance.authKeyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authKeyId"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.tokenTimeoutSeconds = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["tokenTimeoutSeconds"])
                instance.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"])
                
                return instance
            }
			

            // Decoder for [AuthResponse]
            Decoders.addDecoder(clazz: [AuthResponse].self) { (source: AnyObject) -> [AuthResponse] in
                return Decoders.decode(clazz: [AuthResponse].self, source: source)
            }
            // Decoder for AuthResponse
            Decoders.addDecoder(clazz: AuthResponse.self) { (source: AnyObject) -> AuthResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = AuthResponse()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apiKey"])
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                instance.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"])
                
                return instance
            }
			

            // Decoder for [BeamStatsResponse]
            Decoders.addDecoder(clazz: [BeamStatsResponse].self) { (source: AnyObject) -> [BeamStatsResponse] in
                return Decoders.decode(clazz: [BeamStatsResponse].self, source: source)
            }
            // Decoder for BeamStatsResponse
            Decoders.addDecoder(clazz: BeamStatsResponse.self) { (source: AnyObject) -> BeamStatsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = BeamStatsResponse()
                instance.beamStatsMap = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["beamStatsMap"])
                instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"])
                instance.unixtime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["unixtime"])
                
                return instance
            }
			

            // Decoder for [Config]
            Decoders.addDecoder(clazz: [Config].self) { (source: AnyObject) -> [Config] in
                return Decoders.decode(clazz: [Config].self, source: source)
            }
            // Decoder for Config
            Decoders.addDecoder(clazz: Config.self) { (source: AnyObject) -> Config in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = Config()
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                instance._type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                
                return instance
            }
			

            // Decoder for [CouponResponse]
            Decoders.addDecoder(clazz: [CouponResponse].self) { (source: AnyObject) -> [CouponResponse] in
                return Decoders.decode(clazz: [CouponResponse].self, source: source)
            }
            // Decoder for CouponResponse
            Decoders.addDecoder(clazz: CouponResponse.self) { (source: AnyObject) -> CouponResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CouponResponse()
                instance.amount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["amount"])
                instance.balance = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["balance"])
                instance.billItemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["billItemName"])
                instance.couponCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["couponCode"])
                instance.expiryYearMonth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expiryYearMonth"])
                
                return instance
            }
			

            // Decoder for [CreateAndUpdateCredentialsModel]
            Decoders.addDecoder(clazz: [CreateAndUpdateCredentialsModel].self) { (source: AnyObject) -> [CreateAndUpdateCredentialsModel] in
                return Decoders.decode(clazz: [CreateAndUpdateCredentialsModel].self, source: source)
            }
            // Decoder for CreateAndUpdateCredentialsModel
            Decoders.addDecoder(clazz: CreateAndUpdateCredentialsModel.self) { (source: AnyObject) -> CreateAndUpdateCredentialsModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateAndUpdateCredentialsModel()
                instance.credentials = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["credentials"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance._type = CreateAndUpdateCredentialsModel._type(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [CreateEstimatedOrderRequest]
            Decoders.addDecoder(clazz: [CreateEstimatedOrderRequest].self) { (source: AnyObject) -> [CreateEstimatedOrderRequest] in
                return Decoders.decode(clazz: [CreateEstimatedOrderRequest].self, source: source)
            }
            // Decoder for CreateEstimatedOrderRequest
            Decoders.addDecoder(clazz: CreateEstimatedOrderRequest.self) { (source: AnyObject) -> CreateEstimatedOrderRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateEstimatedOrderRequest()
                instance.orderItemList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderItemList"])
                instance.shippingAddressId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingAddressId"])
                
                return instance
            }
			

            // Decoder for [CreateEventHandlerRequest]
            Decoders.addDecoder(clazz: [CreateEventHandlerRequest].self) { (source: AnyObject) -> [CreateEventHandlerRequest] in
                return Decoders.decode(clazz: [CreateEventHandlerRequest].self, source: source)
            }
            // Decoder for CreateEventHandlerRequest
            Decoders.addDecoder(clazz: CreateEventHandlerRequest.self) { (source: AnyObject) -> CreateEventHandlerRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateEventHandlerRequest()
                instance.actionConfigList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actionConfigList"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ruleConfig = Decoders.decodeOptional(clazz: RuleConfig.self, source: sourceDictionary["ruleConfig"])
                instance.status = CreateEventHandlerRequest.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.targetGroupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["targetGroupId"])
                instance.targetImsi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["targetImsi"])
                instance.targetOperatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["targetOperatorId"])
                instance.targetTag = Decoders.decodeOptional(clazz: Tag.self, source: sourceDictionary["targetTag"])
                
                return instance
            }
			

            // Decoder for [CreateGroupRequest]
            Decoders.addDecoder(clazz: [CreateGroupRequest].self) { (source: AnyObject) -> [CreateGroupRequest] in
                return Decoders.decode(clazz: [CreateGroupRequest].self, source: source)
            }
            // Decoder for CreateGroupRequest
            Decoders.addDecoder(clazz: CreateGroupRequest.self) { (source: AnyObject) -> CreateGroupRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateGroupRequest()
                instance.tags = Decoders.decodeOptional(clazz: Tag.self, source: sourceDictionary["tags"])
                
                return instance
            }
			

            // Decoder for [CreateOrUpdateRoleRequest]
            Decoders.addDecoder(clazz: [CreateOrUpdateRoleRequest].self) { (source: AnyObject) -> [CreateOrUpdateRoleRequest] in
                return Decoders.decode(clazz: [CreateOrUpdateRoleRequest].self, source: source)
            }
            // Decoder for CreateOrUpdateRoleRequest
            Decoders.addDecoder(clazz: CreateOrUpdateRoleRequest.self) { (source: AnyObject) -> CreateOrUpdateRoleRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateOrUpdateRoleRequest()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"])
                
                return instance
            }
			

            // Decoder for [CreateRoleResponse]
            Decoders.addDecoder(clazz: [CreateRoleResponse].self) { (source: AnyObject) -> [CreateRoleResponse] in
                return Decoders.decode(clazz: [CreateRoleResponse].self, source: source)
            }
            // Decoder for CreateRoleResponse
            Decoders.addDecoder(clazz: CreateRoleResponse.self) { (source: AnyObject) -> CreateRoleResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateRoleResponse()
                instance.roleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roleId"])
                
                return instance
            }
			

            // Decoder for [CreateUserPasswordRequest]
            Decoders.addDecoder(clazz: [CreateUserPasswordRequest].self) { (source: AnyObject) -> [CreateUserPasswordRequest] in
                return Decoders.decode(clazz: [CreateUserPasswordRequest].self, source: source)
            }
            // Decoder for CreateUserPasswordRequest
            Decoders.addDecoder(clazz: CreateUserPasswordRequest.self) { (source: AnyObject) -> CreateUserPasswordRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateUserPasswordRequest()
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                
                return instance
            }
			

            // Decoder for [CreateUserRequest]
            Decoders.addDecoder(clazz: [CreateUserRequest].self) { (source: AnyObject) -> [CreateUserRequest] in
                return Decoders.decode(clazz: [CreateUserRequest].self, source: source)
            }
            // Decoder for CreateUserRequest
            Decoders.addDecoder(clazz: CreateUserRequest.self) { (source: AnyObject) -> CreateUserRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateUserRequest()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                
                return instance
            }
			

            // Decoder for [CreateVirtualPrivateGatewayRequest]
            Decoders.addDecoder(clazz: [CreateVirtualPrivateGatewayRequest].self) { (source: AnyObject) -> [CreateVirtualPrivateGatewayRequest] in
                return Decoders.decode(clazz: [CreateVirtualPrivateGatewayRequest].self, source: source)
            }
            // Decoder for CreateVirtualPrivateGatewayRequest
            Decoders.addDecoder(clazz: CreateVirtualPrivateGatewayRequest.self) { (source: AnyObject) -> CreateVirtualPrivateGatewayRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateVirtualPrivateGatewayRequest()
                instance.primaryServiceName = CreateVirtualPrivateGatewayRequest.PrimaryServiceName(rawValue: (sourceDictionary["primaryServiceName"] as? String) ?? "") 
                instance.useInternetGateway = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useInternetGateway"])
                instance.deviceSubnetCidrRange = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["deviceSubnetCidrRange"])
                
                return instance
            }
			

            // Decoder for [CreateVpcPeeringConnectionRequest]
            Decoders.addDecoder(clazz: [CreateVpcPeeringConnectionRequest].self) { (source: AnyObject) -> [CreateVpcPeeringConnectionRequest] in
                return Decoders.decode(clazz: [CreateVpcPeeringConnectionRequest].self, source: source)
            }
            // Decoder for CreateVpcPeeringConnectionRequest
            Decoders.addDecoder(clazz: CreateVpcPeeringConnectionRequest.self) { (source: AnyObject) -> CreateVpcPeeringConnectionRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreateVpcPeeringConnectionRequest()
                instance.peerOwnerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["peerOwnerId"])
                instance.peerVpcId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["peerVpcId"])
                instance.destinationCidrBlock = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationCidrBlock"])
                
                return instance
            }
			

            // Decoder for [CredentialsModel]
            Decoders.addDecoder(clazz: [CredentialsModel].self) { (source: AnyObject) -> [CredentialsModel] in
                return Decoders.decode(clazz: [CredentialsModel].self, source: source)
            }
            // Decoder for CredentialsModel
            Decoders.addDecoder(clazz: CredentialsModel.self) { (source: AnyObject) -> CredentialsModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CredentialsModel()
                instance.createDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createDateTime"])
                instance.credentials = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["credentials"])
                instance.credentialsId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["credentialsId"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.lastUsedDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastUsedDateTime"])
                instance._type = CredentialsModel._type(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.updateDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updateDateTime"])
                
                return instance
            }
			

            // Decoder for [CreditCard]
            Decoders.addDecoder(clazz: [CreditCard].self) { (source: AnyObject) -> [CreditCard] in
                return Decoders.decode(clazz: [CreditCard].self, source: source)
            }
            // Decoder for CreditCard
            Decoders.addDecoder(clazz: CreditCard.self) { (source: AnyObject) -> CreditCard in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = CreditCard()
                instance.cvc = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cvc"])
                instance.expireMonth = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["expireMonth"])
                instance.expireYear = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["expireYear"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"])
                
                return instance
            }
			

            // Decoder for [DailyBill]
            Decoders.addDecoder(clazz: [DailyBill].self) { (source: AnyObject) -> [DailyBill] in
                return Decoders.decode(clazz: [DailyBill].self, source: source)
            }
            // Decoder for DailyBill
            Decoders.addDecoder(clazz: DailyBill.self) { (source: AnyObject) -> DailyBill in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = DailyBill()
                instance.amount = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["amount"])
                instance.date = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["date"])
                
                return instance
            }
			

            // Decoder for [DailyBillResponse]
            Decoders.addDecoder(clazz: [DailyBillResponse].self) { (source: AnyObject) -> [DailyBillResponse] in
                return Decoders.decode(clazz: [DailyBillResponse].self, source: source)
            }
            // Decoder for DailyBillResponse
            Decoders.addDecoder(clazz: DailyBillResponse.self) { (source: AnyObject) -> DailyBillResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = DailyBillResponse()
                instance.billList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["billList"])
                
                return instance
            }
			

            // Decoder for [DataTrafficStats]
            Decoders.addDecoder(clazz: [DataTrafficStats].self) { (source: AnyObject) -> [DataTrafficStats] in
                return Decoders.decode(clazz: [DataTrafficStats].self, source: source)
            }
            // Decoder for DataTrafficStats
            Decoders.addDecoder(clazz: DataTrafficStats.self) { (source: AnyObject) -> DataTrafficStats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = DataTrafficStats()
                instance.downloadByteSizeTotal = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["downloadByteSizeTotal"])
                instance.downloadPacketSizeTotal = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["downloadPacketSizeTotal"])
                instance.uploadByteSizeTotal = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["uploadByteSizeTotal"])
                instance.uploadPacketSizeTotal = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["uploadPacketSizeTotal"])
                
                return instance
            }
			

            // Decoder for [Error]
            Decoders.addDecoder(clazz: [Error].self) { (source: AnyObject) -> [Error] in
                return Decoders.decode(clazz: [Error].self, source: source)
            }
            // Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = Error()
                instance.code = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["code"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.fields = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fields"])
                
                return instance
            }
			

            // Decoder for [EstimatedOrderItemModel]
            Decoders.addDecoder(clazz: [EstimatedOrderItemModel].self) { (source: AnyObject) -> [EstimatedOrderItemModel] in
                return Decoders.decode(clazz: [EstimatedOrderItemModel].self, source: source)
            }
            // Decoder for EstimatedOrderItemModel
            Decoders.addDecoder(clazz: EstimatedOrderItemModel.self) { (source: AnyObject) -> EstimatedOrderItemModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = EstimatedOrderItemModel()
                instance.product = Decoders.decodeOptional(clazz: ProductModel.self, source: sourceDictionary["product"])
                instance.productAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["productAmount"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                
                return instance
            }
			

            // Decoder for [EstimatedOrderModel]
            Decoders.addDecoder(clazz: [EstimatedOrderModel].self) { (source: AnyObject) -> [EstimatedOrderModel] in
                return Decoders.decode(clazz: [EstimatedOrderModel].self, source: source)
            }
            // Decoder for EstimatedOrderModel
            Decoders.addDecoder(clazz: EstimatedOrderModel.self) { (source: AnyObject) -> EstimatedOrderModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = EstimatedOrderModel()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.orderId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderId"])
                instance.orderItemList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderItemList"])
                instance.shippingAddress = Decoders.decodeOptional(clazz: ShippingAddressModel.self, source: sourceDictionary["shippingAddress"])
                instance.shippingAddressId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingAddressId"])
                instance.shippingCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shippingCost"])
                instance.taxAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxAmount"])
                instance.totalAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalAmount"])
                
                return instance
            }
			

            // Decoder for [EventHandlerModel]
            Decoders.addDecoder(clazz: [EventHandlerModel].self) { (source: AnyObject) -> [EventHandlerModel] in
                return Decoders.decode(clazz: [EventHandlerModel].self, source: source)
            }
            // Decoder for EventHandlerModel
            Decoders.addDecoder(clazz: EventHandlerModel.self) { (source: AnyObject) -> EventHandlerModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = EventHandlerModel()
                instance.actionConfigList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actionConfigList"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.handlerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["handlerId"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ruleConfig = Decoders.decodeOptional(clazz: RuleConfig.self, source: sourceDictionary["ruleConfig"])
                instance.status = EventHandlerModel.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                instance.targetGroupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["targetGroupId"])
                instance.targetImsi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["targetImsi"])
                instance.targetOperatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["targetOperatorId"])
                instance.targetTag = Decoders.decodeOptional(clazz: Tag.self, source: sourceDictionary["targetTag"])
                
                return instance
            }
			

            // Decoder for [ExpiryTime]
            Decoders.addDecoder(clazz: [ExpiryTime].self) { (source: AnyObject) -> [ExpiryTime] in
                return Decoders.decode(clazz: [ExpiryTime].self, source: source)
            }
            // Decoder for ExpiryTime
            Decoders.addDecoder(clazz: ExpiryTime.self) { (source: AnyObject) -> ExpiryTime in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ExpiryTime()
                instance.expiryTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["expiryTime"])
                instance.expiryAction = ExpiryTime.ExpiryAction(rawValue: (sourceDictionary["expiryAction"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [ExportRequest]
            Decoders.addDecoder(clazz: [ExportRequest].self) { (source: AnyObject) -> [ExportRequest] in
                return Decoders.decode(clazz: [ExportRequest].self, source: source)
            }
            // Decoder for ExportRequest
            Decoders.addDecoder(clazz: ExportRequest.self) { (source: AnyObject) -> ExportRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ExportRequest()
                instance.from = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["from"])
                instance.period = ExportRequest.Period(rawValue: (sourceDictionary["period"] as? String) ?? "") 
                instance.to = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["to"])
                
                return instance
            }
			

            // Decoder for [FileOutputResult]
            Decoders.addDecoder(clazz: [FileOutputResult].self) { (source: AnyObject) -> [FileOutputResult] in
                return Decoders.decode(clazz: [FileOutputResult].self, source: source)
            }
            // Decoder for FileOutputResult
            Decoders.addDecoder(clazz: FileOutputResult.self) { (source: AnyObject) -> FileOutputResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = FileOutputResult()
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                
                return instance
            }
			

            // Decoder for [GatePeer]
            Decoders.addDecoder(clazz: [GatePeer].self) { (source: AnyObject) -> [GatePeer] in
                return Decoders.decode(clazz: [GatePeer].self, source: source)
            }
            // Decoder for GatePeer
            Decoders.addDecoder(clazz: GatePeer.self) { (source: AnyObject) -> GatePeer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GatePeer()
                instance.outerIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outerIpAddress"])
                instance.innerIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["innerIpAddress"])
                instance.ownedByCustomer = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["ownedByCustomer"])
                
                return instance
            }
			

            // Decoder for [GenerateOperatorsAuthKeyResponse]
            Decoders.addDecoder(clazz: [GenerateOperatorsAuthKeyResponse].self) { (source: AnyObject) -> [GenerateOperatorsAuthKeyResponse] in
                return Decoders.decode(clazz: [GenerateOperatorsAuthKeyResponse].self, source: source)
            }
            // Decoder for GenerateOperatorsAuthKeyResponse
            Decoders.addDecoder(clazz: GenerateOperatorsAuthKeyResponse.self) { (source: AnyObject) -> GenerateOperatorsAuthKeyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GenerateOperatorsAuthKeyResponse()
                instance.authKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authKey"])
                instance.authKeyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authKeyId"])
                
                return instance
            }
			

            // Decoder for [GenerateTokenRequest]
            Decoders.addDecoder(clazz: [GenerateTokenRequest].self) { (source: AnyObject) -> [GenerateTokenRequest] in
                return Decoders.decode(clazz: [GenerateTokenRequest].self, source: source)
            }
            // Decoder for GenerateTokenRequest
            Decoders.addDecoder(clazz: GenerateTokenRequest.self) { (source: AnyObject) -> GenerateTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GenerateTokenRequest()
                instance.tokenTimeoutSeconds = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["tokenTimeoutSeconds"])
                
                return instance
            }
			

            // Decoder for [GenerateTokenResponse]
            Decoders.addDecoder(clazz: [GenerateTokenResponse].self) { (source: AnyObject) -> [GenerateTokenResponse] in
                return Decoders.decode(clazz: [GenerateTokenResponse].self, source: source)
            }
            // Decoder for GenerateTokenResponse
            Decoders.addDecoder(clazz: GenerateTokenResponse.self) { (source: AnyObject) -> GenerateTokenResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GenerateTokenResponse()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                
                return instance
            }
			

            // Decoder for [GenerateUserAuthKeyResponse]
            Decoders.addDecoder(clazz: [GenerateUserAuthKeyResponse].self) { (source: AnyObject) -> [GenerateUserAuthKeyResponse] in
                return Decoders.decode(clazz: [GenerateUserAuthKeyResponse].self, source: source)
            }
            // Decoder for GenerateUserAuthKeyResponse
            Decoders.addDecoder(clazz: GenerateUserAuthKeyResponse.self) { (source: AnyObject) -> GenerateUserAuthKeyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GenerateUserAuthKeyResponse()
                instance.authKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authKey"])
                instance.authKeyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["authKeyId"])
                
                return instance
            }
			

            // Decoder for [GetBillingHistoryResponse]
            Decoders.addDecoder(clazz: [GetBillingHistoryResponse].self) { (source: AnyObject) -> [GetBillingHistoryResponse] in
                return Decoders.decode(clazz: [GetBillingHistoryResponse].self, source: source)
            }
            // Decoder for GetBillingHistoryResponse
            Decoders.addDecoder(clazz: GetBillingHistoryResponse.self) { (source: AnyObject) -> GetBillingHistoryResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetBillingHistoryResponse()
                instance.billList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["billList"])
                
                return instance
            }
			

            // Decoder for [GetLatestBill]
            Decoders.addDecoder(clazz: [GetLatestBill].self) { (source: AnyObject) -> [GetLatestBill] in
                return Decoders.decode(clazz: [GetLatestBill].self, source: source)
            }
            // Decoder for GetLatestBill
            Decoders.addDecoder(clazz: GetLatestBill.self) { (source: AnyObject) -> GetLatestBill in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetLatestBill()
                instance.amount = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["amount"])
                instance.lastEvaluatedTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastEvaluatedTime"])
                
                return instance
            }
			

            // Decoder for [GetOperatorResponse]
            Decoders.addDecoder(clazz: [GetOperatorResponse].self) { (source: AnyObject) -> [GetOperatorResponse] in
                return Decoders.decode(clazz: [GetOperatorResponse].self, source: source)
            }
            // Decoder for GetOperatorResponse
            Decoders.addDecoder(clazz: GetOperatorResponse.self) { (source: AnyObject) -> GetOperatorResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetOperatorResponse()
                instance.createDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createDate"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                instance.rootOperatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rootOperatorId"])
                instance.updateDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updateDate"])
                
                return instance
            }
			

            // Decoder for [GetOrderResponse]
            Decoders.addDecoder(clazz: [GetOrderResponse].self) { (source: AnyObject) -> [GetOrderResponse] in
                return Decoders.decode(clazz: [GetOrderResponse].self, source: source)
            }
            // Decoder for GetOrderResponse
            Decoders.addDecoder(clazz: GetOrderResponse.self) { (source: AnyObject) -> GetOrderResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetOrderResponse()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.orderDateTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderDateTime"])
                instance.orderId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["orderId"])
                instance.orderItemList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderItemList"])
                instance.orderStatus = GetOrderResponse.OrderStatus(rawValue: (sourceDictionary["orderStatus"] as? String) ?? "") 
                instance.shippingAddress = Decoders.decodeOptional(clazz: ShippingAddressModel.self, source: sourceDictionary["shippingAddress"])
                instance.shippingAddressId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingAddressId"])
                instance.shippingCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shippingCost"])
                instance.shippingLabelNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingLabelNumber"])
                instance.taxAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxAmount"])
                instance.totalAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalAmount"])
                
                return instance
            }
			

            // Decoder for [GetPaymentMethodResult]
            Decoders.addDecoder(clazz: [GetPaymentMethodResult].self) { (source: AnyObject) -> [GetPaymentMethodResult] in
                return Decoders.decode(clazz: [GetPaymentMethodResult].self, source: source)
            }
            // Decoder for GetPaymentMethodResult
            Decoders.addDecoder(clazz: GetPaymentMethodResult.self) { (source: AnyObject) -> GetPaymentMethodResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetPaymentMethodResult()
                instance.errorCode = GetPaymentMethodResult.ErrorCode(rawValue: (sourceDictionary["errorCode"] as? String) ?? "") 
                instance.errorMessage = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["errorMessage"])
                instance.properties = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["properties"])
                instance.providerType = GetPaymentMethodResult.ProviderType(rawValue: (sourceDictionary["providerType"] as? String) ?? "") 
                instance.updateDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updateDate"])
                
                return instance
            }
			

            // Decoder for [GetPaymentTransactionResult]
            Decoders.addDecoder(clazz: [GetPaymentTransactionResult].self) { (source: AnyObject) -> [GetPaymentTransactionResult] in
                return Decoders.decode(clazz: [GetPaymentTransactionResult].self, source: source)
            }
            // Decoder for GetPaymentTransactionResult
            Decoders.addDecoder(clazz: GetPaymentTransactionResult.self) { (source: AnyObject) -> GetPaymentTransactionResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetPaymentTransactionResult()
                instance.amount = Decoders.decodeOptional(clazz: PaymentAmount.self, source: sourceDictionary["amount"])
                instance.description = Decoders.decodeOptional(clazz: PaymentDescription.self, source: sourceDictionary["description"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.messageCode = GetPaymentTransactionResult.MessageCode(rawValue: (sourceDictionary["messageCode"] as? String) ?? "") 
                instance.status = GetPaymentTransactionResult.Status(rawValue: (sourceDictionary["status"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [GetShippingAddressResponse]
            Decoders.addDecoder(clazz: [GetShippingAddressResponse].self) { (source: AnyObject) -> [GetShippingAddressResponse] in
                return Decoders.decode(clazz: [GetShippingAddressResponse].self, source: source)
            }
            // Decoder for GetShippingAddressResponse
            Decoders.addDecoder(clazz: GetShippingAddressResponse.self) { (source: AnyObject) -> GetShippingAddressResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetShippingAddressResponse()
                instance.addressLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressLine1"])
                instance.addressLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressLine2"])
                instance.building = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["building"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyName"])
                instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.shippingAddressId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingAddressId"])
                instance.shippingArea = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingArea"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipCode"])
                
                return instance
            }
			

            // Decoder for [GetUserPasswordResponse]
            Decoders.addDecoder(clazz: [GetUserPasswordResponse].self) { (source: AnyObject) -> [GetUserPasswordResponse] in
                return Decoders.decode(clazz: [GetUserPasswordResponse].self, source: source)
            }
            // Decoder for GetUserPasswordResponse
            Decoders.addDecoder(clazz: GetUserPasswordResponse.self) { (source: AnyObject) -> GetUserPasswordResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetUserPasswordResponse()
                instance.hasPassword = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPassword"])
                
                return instance
            }
			

            // Decoder for [GetUserPermissionResponse]
            Decoders.addDecoder(clazz: [GetUserPermissionResponse].self) { (source: AnyObject) -> [GetUserPermissionResponse] in
                return Decoders.decode(clazz: [GetUserPermissionResponse].self, source: source)
            }
            // Decoder for GetUserPermissionResponse
            Decoders.addDecoder(clazz: GetUserPermissionResponse.self) { (source: AnyObject) -> GetUserPermissionResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GetUserPermissionResponse()
                instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"])
                
                return instance
            }
			

            // Decoder for [Group]
            Decoders.addDecoder(clazz: [Group].self) { (source: AnyObject) -> [Group] in
                return Decoders.decode(clazz: [Group].self, source: source)
            }
            // Decoder for Group
            Decoders.addDecoder(clazz: Group.self) { (source: AnyObject) -> Group in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = Group()
                instance.configuration = Decoders.decodeOptional(clazz: Map.self, source: sourceDictionary["configuration"])
                instance.createdTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createdTime"])
                instance.groupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["groupId"])
                instance.lastModifiedTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastModifiedTime"])
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                instance.tags = Decoders.decodeOptional(clazz: Tag.self, source: sourceDictionary["tags"])
                
                return instance
            }
			

            // Decoder for [GroupConfigurationUpdateRequest]
            Decoders.addDecoder(clazz: [GroupConfigurationUpdateRequest].self) { (source: AnyObject) -> [GroupConfigurationUpdateRequest] in
                return Decoders.decode(clazz: [GroupConfigurationUpdateRequest].self, source: source)
            }
            // Decoder for GroupConfigurationUpdateRequest
            Decoders.addDecoder(clazz: GroupConfigurationUpdateRequest.self) { (source: AnyObject) -> GroupConfigurationUpdateRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = GroupConfigurationUpdateRequest()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                
                return instance
            }
			

            // Decoder for [IpAddressMapEntry]
            Decoders.addDecoder(clazz: [IpAddressMapEntry].self) { (source: AnyObject) -> [IpAddressMapEntry] in
                return Decoders.decode(clazz: [IpAddressMapEntry].self, source: source)
            }
            // Decoder for IpAddressMapEntry
            Decoders.addDecoder(clazz: IpAddressMapEntry.self) { (source: AnyObject) -> IpAddressMapEntry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = IpAddressMapEntry()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.ipAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipAddress"])
                instance._type = IpAddressMapEntry._type(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [IssueEmailChangeTokenRequest]
            Decoders.addDecoder(clazz: [IssueEmailChangeTokenRequest].self) { (source: AnyObject) -> [IssueEmailChangeTokenRequest] in
                return Decoders.decode(clazz: [IssueEmailChangeTokenRequest].self, source: source)
            }
            // Decoder for IssueEmailChangeTokenRequest
            Decoders.addDecoder(clazz: IssueEmailChangeTokenRequest.self) { (source: AnyObject) -> IssueEmailChangeTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = IssueEmailChangeTokenRequest()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                
                return instance
            }
			

            // Decoder for [IssuePasswordResetTokenRequest]
            Decoders.addDecoder(clazz: [IssuePasswordResetTokenRequest].self) { (source: AnyObject) -> [IssuePasswordResetTokenRequest] in
                return Decoders.decode(clazz: [IssuePasswordResetTokenRequest].self, source: source)
            }
            // Decoder for IssuePasswordResetTokenRequest
            Decoders.addDecoder(clazz: IssuePasswordResetTokenRequest.self) { (source: AnyObject) -> IssuePasswordResetTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = IssuePasswordResetTokenRequest()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                
                return instance
            }
			

            // Decoder for [IssueSubscriberTransferTokenRequest]
            Decoders.addDecoder(clazz: [IssueSubscriberTransferTokenRequest].self) { (source: AnyObject) -> [IssueSubscriberTransferTokenRequest] in
                return Decoders.decode(clazz: [IssueSubscriberTransferTokenRequest].self, source: source)
            }
            // Decoder for IssueSubscriberTransferTokenRequest
            Decoders.addDecoder(clazz: IssueSubscriberTransferTokenRequest.self) { (source: AnyObject) -> IssueSubscriberTransferTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = IssueSubscriberTransferTokenRequest()
                instance.transferDestinationOperatorEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transferDestinationOperatorEmail"])
                instance.transferDestinationOperatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transferDestinationOperatorId"])
                instance.transferImsi = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["transferImsi"])
                
                return instance
            }
			

            // Decoder for [IssueSubscriberTransferTokenResponse]
            Decoders.addDecoder(clazz: [IssueSubscriberTransferTokenResponse].self) { (source: AnyObject) -> [IssueSubscriberTransferTokenResponse] in
                return Decoders.decode(clazz: [IssueSubscriberTransferTokenResponse].self, source: source)
            }
            // Decoder for IssueSubscriberTransferTokenResponse
            Decoders.addDecoder(clazz: IssueSubscriberTransferTokenResponse.self) { (source: AnyObject) -> IssueSubscriberTransferTokenResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = IssueSubscriberTransferTokenResponse()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                
                return instance
            }
			

            // Decoder for [ListCouponResponse]
            Decoders.addDecoder(clazz: [ListCouponResponse].self) { (source: AnyObject) -> [ListCouponResponse] in
                return Decoders.decode(clazz: [ListCouponResponse].self, source: source)
            }
            // Decoder for ListCouponResponse
            Decoders.addDecoder(clazz: ListCouponResponse.self) { (source: AnyObject) -> ListCouponResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ListCouponResponse()
                instance.couponList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["couponList"])
                
                return instance
            }
			

            // Decoder for [ListOrderResponse]
            Decoders.addDecoder(clazz: [ListOrderResponse].self) { (source: AnyObject) -> [ListOrderResponse] in
                return Decoders.decode(clazz: [ListOrderResponse].self, source: source)
            }
            // Decoder for ListOrderResponse
            Decoders.addDecoder(clazz: ListOrderResponse.self) { (source: AnyObject) -> ListOrderResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ListOrderResponse()
                instance.orderList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderList"])
                
                return instance
            }
			

            // Decoder for [ListOrderedSubscriberResponse]
            Decoders.addDecoder(clazz: [ListOrderedSubscriberResponse].self) { (source: AnyObject) -> [ListOrderedSubscriberResponse] in
                return Decoders.decode(clazz: [ListOrderedSubscriberResponse].self, source: source)
            }
            // Decoder for ListOrderedSubscriberResponse
            Decoders.addDecoder(clazz: ListOrderedSubscriberResponse.self) { (source: AnyObject) -> ListOrderedSubscriberResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ListOrderedSubscriberResponse()
                instance.orderedSubscriberList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderedSubscriberList"])
                
                return instance
            }
			

            // Decoder for [ListProductResponse]
            Decoders.addDecoder(clazz: [ListProductResponse].self) { (source: AnyObject) -> [ListProductResponse] in
                return Decoders.decode(clazz: [ListProductResponse].self, source: source)
            }
            // Decoder for ListProductResponse
            Decoders.addDecoder(clazz: ListProductResponse.self) { (source: AnyObject) -> ListProductResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ListProductResponse()
                instance.productList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["productList"])
                instance.shippingCostList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shippingCostList"])
                
                return instance
            }
			

            // Decoder for [ListRolesResponse]
            Decoders.addDecoder(clazz: [ListRolesResponse].self) { (source: AnyObject) -> [ListRolesResponse] in
                return Decoders.decode(clazz: [ListRolesResponse].self, source: source)
            }
            // Decoder for ListRolesResponse
            Decoders.addDecoder(clazz: ListRolesResponse.self) { (source: AnyObject) -> ListRolesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ListRolesResponse()
                instance.createDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createDateTime"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.roleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roleId"])
                instance.updateDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updateDateTime"])
                
                return instance
            }
			

            // Decoder for [ListShippingAddressResponse]
            Decoders.addDecoder(clazz: [ListShippingAddressResponse].self) { (source: AnyObject) -> [ListShippingAddressResponse] in
                return Decoders.decode(clazz: [ListShippingAddressResponse].self, source: source)
            }
            // Decoder for ListShippingAddressResponse
            Decoders.addDecoder(clazz: ListShippingAddressResponse.self) { (source: AnyObject) -> ListShippingAddressResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ListShippingAddressResponse()
                instance.shippingAddresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shippingAddresses"])
                
                return instance
            }
			

            // Decoder for [ListSubOperatorsResponse]
            Decoders.addDecoder(clazz: [ListSubOperatorsResponse].self) { (source: AnyObject) -> [ListSubOperatorsResponse] in
                return Decoders.decode(clazz: [ListSubOperatorsResponse].self, source: source)
            }
            // Decoder for ListSubOperatorsResponse
            Decoders.addDecoder(clazz: ListSubOperatorsResponse.self) { (source: AnyObject) -> ListSubOperatorsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ListSubOperatorsResponse()
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                
                return instance
            }
			

            // Decoder for [Map]
            Decoders.addDecoder(clazz: [Map].self) { (source: AnyObject) -> [Map] in
                return Decoders.decode(clazz: [Map].self, source: source)
            }
            // Decoder for Map
            Decoders.addDecoder(clazz: Map.self) { (source: AnyObject) -> Map in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = Map()
                
                return instance
            }
			

            // Decoder for [MapstringDataTrafficStats]
            Decoders.addDecoder(clazz: [MapstringDataTrafficStats].self) { (source: AnyObject) -> [MapstringDataTrafficStats] in
                return Decoders.decode(clazz: [MapstringDataTrafficStats].self, source: source)
            }
            // Decoder for MapstringDataTrafficStats
            Decoders.addDecoder(clazz: MapstringDataTrafficStats.self) { (source: AnyObject) -> MapstringDataTrafficStats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = MapstringDataTrafficStats()
                
                return instance
            }
			

            // Decoder for [Mapstringstring]
            Decoders.addDecoder(clazz: [Mapstringstring].self) { (source: AnyObject) -> [Mapstringstring] in
                return Decoders.decode(clazz: [Mapstringstring].self, source: source)
            }
            // Decoder for Mapstringstring
            Decoders.addDecoder(clazz: Mapstringstring.self) { (source: AnyObject) -> Mapstringstring in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = Mapstringstring()
                
                return instance
            }
			

            // Decoder for [MonthlyBill]
            Decoders.addDecoder(clazz: [MonthlyBill].self) { (source: AnyObject) -> [MonthlyBill] in
                return Decoders.decode(clazz: [MonthlyBill].self, source: source)
            }
            // Decoder for MonthlyBill
            Decoders.addDecoder(clazz: MonthlyBill.self) { (source: AnyObject) -> MonthlyBill in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = MonthlyBill()
                instance.amount = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["amount"])
                instance.paymentStatus = MonthlyBill.PaymentStatus(rawValue: (sourceDictionary["paymentStatus"] as? String) ?? "") 
                instance.paymentTransactionId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["paymentTransactionId"])
                instance.yearMonth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["yearMonth"])
                
                return instance
            }
			

            // Decoder for [OrderItemModel]
            Decoders.addDecoder(clazz: [OrderItemModel].self) { (source: AnyObject) -> [OrderItemModel] in
                return Decoders.decode(clazz: [OrderItemModel].self, source: source)
            }
            // Decoder for OrderItemModel
            Decoders.addDecoder(clazz: OrderItemModel.self) { (source: AnyObject) -> OrderItemModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = OrderItemModel()
                instance.productCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productCode"])
                instance.quantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["quantity"])
                
                return instance
            }
			

            // Decoder for [OrderedSubscriber]
            Decoders.addDecoder(clazz: [OrderedSubscriber].self) { (source: AnyObject) -> [OrderedSubscriber] in
                return Decoders.decode(clazz: [OrderedSubscriber].self, source: source)
            }
            // Decoder for OrderedSubscriber
            Decoders.addDecoder(clazz: OrderedSubscriber.self) { (source: AnyObject) -> OrderedSubscriber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = OrderedSubscriber()
                instance.imsi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imsi"])
                instance.msisdn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msisdn"])
                instance.serialNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serialNumber"])
                
                return instance
            }
			

            // Decoder for [PaymentAmount]
            Decoders.addDecoder(clazz: [PaymentAmount].self) { (source: AnyObject) -> [PaymentAmount] in
                return Decoders.decode(clazz: [PaymentAmount].self, source: source)
            }
            // Decoder for PaymentAmount
            Decoders.addDecoder(clazz: PaymentAmount.self) { (source: AnyObject) -> PaymentAmount in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = PaymentAmount()
                instance.taxAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["taxAmount"])
                instance.totalAmount = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalAmount"])
                
                return instance
            }
			

            // Decoder for [PaymentDescription]
            Decoders.addDecoder(clazz: [PaymentDescription].self) { (source: AnyObject) -> [PaymentDescription] in
                return Decoders.decode(clazz: [PaymentDescription].self, source: source)
            }
            // Decoder for PaymentDescription
            Decoders.addDecoder(clazz: PaymentDescription.self) { (source: AnyObject) -> PaymentDescription in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = PaymentDescription()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.itemList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["itemList"])
                
                return instance
            }
			

            // Decoder for [ProductModel]
            Decoders.addDecoder(clazz: [ProductModel].self) { (source: AnyObject) -> [ProductModel] in
                return Decoders.decode(clazz: [ProductModel].self, source: source)
            }
            // Decoder for ProductModel
            Decoders.addDecoder(clazz: ProductModel.self) { (source: AnyObject) -> ProductModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ProductModel()
                instance.count = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["count"])
                instance.maxQuantity = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["maxQuantity"])
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.productCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productCode"])
                instance.productInfoURL = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productInfoURL"])
                instance.productName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["productName"])
                instance.productType = ProductModel.ProductType(rawValue: (sourceDictionary["productType"] as? String) ?? "") 
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                
                return instance
            }
			

            // Decoder for [PutIpAddressMapEntryRequest]
            Decoders.addDecoder(clazz: [PutIpAddressMapEntryRequest].self) { (source: AnyObject) -> [PutIpAddressMapEntryRequest] in
                return Decoders.decode(clazz: [PutIpAddressMapEntryRequest].self, source: source)
            }
            // Decoder for PutIpAddressMapEntryRequest
            Decoders.addDecoder(clazz: PutIpAddressMapEntryRequest.self) { (source: AnyObject) -> PutIpAddressMapEntryRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = PutIpAddressMapEntryRequest()
                instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"])
                instance.ipAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ipAddress"])
                
                return instance
            }
			

            // Decoder for [RegisterGatePeerRequest]
            Decoders.addDecoder(clazz: [RegisterGatePeerRequest].self) { (source: AnyObject) -> [RegisterGatePeerRequest] in
                return Decoders.decode(clazz: [RegisterGatePeerRequest].self, source: source)
            }
            // Decoder for RegisterGatePeerRequest
            Decoders.addDecoder(clazz: RegisterGatePeerRequest.self) { (source: AnyObject) -> RegisterGatePeerRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = RegisterGatePeerRequest()
                instance.outerIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outerIpAddress"])
                instance.innerIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["innerIpAddress"])
                
                return instance
            }
			

            // Decoder for [RegisterOperatorsRequest]
            Decoders.addDecoder(clazz: [RegisterOperatorsRequest].self) { (source: AnyObject) -> [RegisterOperatorsRequest] in
                return Decoders.decode(clazz: [RegisterOperatorsRequest].self, source: source)
            }
            // Decoder for RegisterOperatorsRequest
            Decoders.addDecoder(clazz: RegisterOperatorsRequest.self) { (source: AnyObject) -> RegisterOperatorsRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = RegisterOperatorsRequest()
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                
                return instance
            }
			

            // Decoder for [RegisterSubscribersRequest]
            Decoders.addDecoder(clazz: [RegisterSubscribersRequest].self) { (source: AnyObject) -> [RegisterSubscribersRequest] in
                return Decoders.decode(clazz: [RegisterSubscribersRequest].self, source: source)
            }
            // Decoder for RegisterSubscribersRequest
            Decoders.addDecoder(clazz: RegisterSubscribersRequest.self) { (source: AnyObject) -> RegisterSubscribersRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = RegisterSubscribersRequest()
                instance.registrationSecret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["registrationSecret"])
                instance.groupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["groupId"])
                instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"])
                
                return instance
            }
			

            // Decoder for [RoleResponse]
            Decoders.addDecoder(clazz: [RoleResponse].self) { (source: AnyObject) -> [RoleResponse] in
                return Decoders.decode(clazz: [RoleResponse].self, source: source)
            }
            // Decoder for RoleResponse
            Decoders.addDecoder(clazz: RoleResponse.self) { (source: AnyObject) -> RoleResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = RoleResponse()
                instance.createDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createDateTime"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"])
                instance.roleId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["roleId"])
                instance.updateDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updateDateTime"])
                
                return instance
            }
			

            // Decoder for [RuleConfig]
            Decoders.addDecoder(clazz: [RuleConfig].self) { (source: AnyObject) -> [RuleConfig] in
                return Decoders.decode(clazz: [RuleConfig].self, source: source)
            }
            // Decoder for RuleConfig
            Decoders.addDecoder(clazz: RuleConfig.self) { (source: AnyObject) -> RuleConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = RuleConfig()
                instance.properties = Decoders.decodeOptional(clazz: RuleConfigProperty.self, source: sourceDictionary["properties"])
                instance._type = RuleConfig._type(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [RuleConfigProperty]
            Decoders.addDecoder(clazz: [RuleConfigProperty].self) { (source: AnyObject) -> [RuleConfigProperty] in
                return Decoders.decode(clazz: [RuleConfigProperty].self, source: source)
            }
            // Decoder for RuleConfigProperty
            Decoders.addDecoder(clazz: RuleConfigProperty.self) { (source: AnyObject) -> RuleConfigProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = RuleConfigProperty()
                instance.limitTotalTrafficMegaByte = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["limitTotalTrafficMegaByte"])
                instance.inactiveTimeoutDateConst = RuleConfigProperty.InactiveTimeoutDateConst(rawValue: (sourceDictionary["inactiveTimeoutDateConst"] as? String) ?? "") 
                instance.targetStatus = RuleConfigProperty.TargetStatus(rawValue: (sourceDictionary["targetStatus"] as? String) ?? "") 
                instance.targetSpeedClass = RuleConfigProperty.TargetSpeedClass(rawValue: (sourceDictionary["targetSpeedClass"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [SessionEvent]
            Decoders.addDecoder(clazz: [SessionEvent].self) { (source: AnyObject) -> [SessionEvent] in
                return Decoders.decode(clazz: [SessionEvent].self, source: source)
            }
            // Decoder for SessionEvent
            Decoders.addDecoder(clazz: SessionEvent.self) { (source: AnyObject) -> SessionEvent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = SessionEvent()
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                instance.imsi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imsi"])
                instance.time = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["time"])
                instance.event = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["event"])
                instance.imei = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imei"])
                instance.ueIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ueIpAddress"])
                instance.apn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apn"])
                instance.dns0 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dns0"])
                instance.dns1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dns1"])
                instance.vpgId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vpgId"])
                instance.gatewayPrivateIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gatewayPrivateIpAddress"])
                instance.gatewayPublicIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gatewayPublicIpAddress"])
                
                return instance
            }
			

            // Decoder for [SessionStatus]
            Decoders.addDecoder(clazz: [SessionStatus].self) { (source: AnyObject) -> [SessionStatus] in
                return Decoders.decode(clazz: [SessionStatus].self, source: source)
            }
            // Decoder for SessionStatus
            Decoders.addDecoder(clazz: SessionStatus.self) { (source: AnyObject) -> SessionStatus in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = SessionStatus()
                instance.isOnline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isOnline"])
                instance.lastUpdatedAt = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastUpdatedAt"])
                instance.imei = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imei"])
                instance.ueIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ueIpAddress"])
                instance.dnsServers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dnsServers"])
                instance.vpgId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["vpgId"])
                instance.gatewayPrivateIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gatewayPrivateIpAddress"])
                instance.gatewayPublicIpAddress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gatewayPublicIpAddress"])
                
                return instance
            }
			

            // Decoder for [SetUserPermissionRequest]
            Decoders.addDecoder(clazz: [SetUserPermissionRequest].self) { (source: AnyObject) -> [SetUserPermissionRequest] in
                return Decoders.decode(clazz: [SetUserPermissionRequest].self, source: source)
            }
            // Decoder for SetUserPermissionRequest
            Decoders.addDecoder(clazz: SetUserPermissionRequest.self) { (source: AnyObject) -> SetUserPermissionRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = SetUserPermissionRequest()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"])
                
                return instance
            }
			

            // Decoder for [ShippingAddressModel]
            Decoders.addDecoder(clazz: [ShippingAddressModel].self) { (source: AnyObject) -> [ShippingAddressModel] in
                return Decoders.decode(clazz: [ShippingAddressModel].self, source: source)
            }
            // Decoder for ShippingAddressModel
            Decoders.addDecoder(clazz: ShippingAddressModel.self) { (source: AnyObject) -> ShippingAddressModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ShippingAddressModel()
                instance.addressLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressLine1"])
                instance.addressLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addressLine2"])
                instance.building = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["building"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.companyName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["companyName"])
                instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phoneNumber"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zipCode"])
                
                return instance
            }
			

            // Decoder for [ShippingCostModel]
            Decoders.addDecoder(clazz: [ShippingCostModel].self) { (source: AnyObject) -> [ShippingCostModel] in
                return Decoders.decode(clazz: [ShippingCostModel].self, source: source)
            }
            // Decoder for ShippingCostModel
            Decoders.addDecoder(clazz: ShippingCostModel.self) { (source: AnyObject) -> ShippingCostModel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = ShippingCostModel()
                instance.shippingArea = ShippingCostModel.ShippingArea(rawValue: (sourceDictionary["shippingArea"] as? String) ?? "") 
                instance.shippingAreaName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shippingAreaName"])
                instance.shippingCost = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["shippingCost"])
                instance.size = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["size"])
                
                return instance
            }
			

            // Decoder for [SoracomBeamStats]
            Decoders.addDecoder(clazz: [SoracomBeamStats].self) { (source: AnyObject) -> [SoracomBeamStats] in
                return Decoders.decode(clazz: [SoracomBeamStats].self, source: source)
            }
            // Decoder for SoracomBeamStats
            Decoders.addDecoder(clazz: SoracomBeamStats.self) { (source: AnyObject) -> SoracomBeamStats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = SoracomBeamStats()
                instance.count = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["count"])
                
                return instance
            }
			

            // Decoder for [Subscriber]
            Decoders.addDecoder(clazz: [Subscriber].self) { (source: AnyObject) -> [Subscriber] in
                return Decoders.decode(clazz: [Subscriber].self, source: source)
            }
            // Decoder for Subscriber
            Decoders.addDecoder(clazz: Subscriber.self) { (source: AnyObject) -> Subscriber in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = Subscriber()
                instance.imsi = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imsi"])
                instance.msisdn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["msisdn"])
                instance.serialNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["serialNumber"])
                instance.iccid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iccid"])
                instance.apn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["apn"])
                instance.speedClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["speedClass"])
                instance.createdAt = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createdAt"])
                instance.lastModifiedAt = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastModifiedAt"])
                instance.expiryTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["expiryTime"])
                instance.expiryAction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expiryAction"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.sessionStatus = Decoders.decodeOptional(clazz: SessionStatus.self, source: sourceDictionary["sessionStatus"])
                instance.tags = Decoders.decodeOptional(clazz: Map.self, source: sourceDictionary["tags"])
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                
                return instance
            }
			

            // Decoder for [SupportTokenResponse]
            Decoders.addDecoder(clazz: [SupportTokenResponse].self) { (source: AnyObject) -> [SupportTokenResponse] in
                return Decoders.decode(clazz: [SupportTokenResponse].self, source: source)
            }
            // Decoder for SupportTokenResponse
            Decoders.addDecoder(clazz: SupportTokenResponse.self) { (source: AnyObject) -> SupportTokenResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = SupportTokenResponse()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                
                return instance
            }
			

            // Decoder for [Tag]
            Decoders.addDecoder(clazz: [Tag].self) { (source: AnyObject) -> [Tag] in
                return Decoders.decode(clazz: [Tag].self, source: source)
            }
            // Decoder for Tag
            Decoders.addDecoder(clazz: Tag.self) { (source: AnyObject) -> Tag in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = Tag()
                
                return instance
            }
			

            // Decoder for [TagUpdateRequest]
            Decoders.addDecoder(clazz: [TagUpdateRequest].self) { (source: AnyObject) -> [TagUpdateRequest] in
                return Decoders.decode(clazz: [TagUpdateRequest].self, source: source)
            }
            // Decoder for TagUpdateRequest
            Decoders.addDecoder(clazz: TagUpdateRequest.self) { (source: AnyObject) -> TagUpdateRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = TagUpdateRequest()
                instance.tagName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tagName"])
                instance.tagValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tagValue"])
                
                return instance
            }
			

            // Decoder for [UpdateEventHandlerRequest]
            Decoders.addDecoder(clazz: [UpdateEventHandlerRequest].self) { (source: AnyObject) -> [UpdateEventHandlerRequest] in
                return Decoders.decode(clazz: [UpdateEventHandlerRequest].self, source: source)
            }
            // Decoder for UpdateEventHandlerRequest
            Decoders.addDecoder(clazz: UpdateEventHandlerRequest.self) { (source: AnyObject) -> UpdateEventHandlerRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = UpdateEventHandlerRequest()
                
                return instance
            }
			

            // Decoder for [UpdatePasswordRequest]
            Decoders.addDecoder(clazz: [UpdatePasswordRequest].self) { (source: AnyObject) -> [UpdatePasswordRequest] in
                return Decoders.decode(clazz: [UpdatePasswordRequest].self, source: source)
            }
            // Decoder for UpdatePasswordRequest
            Decoders.addDecoder(clazz: UpdatePasswordRequest.self) { (source: AnyObject) -> UpdatePasswordRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = UpdatePasswordRequest()
                instance.currentPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currentPassword"])
                instance.newPassword = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["newPassword"])
                
                return instance
            }
			

            // Decoder for [UpdateSpeedClassRequest]
            Decoders.addDecoder(clazz: [UpdateSpeedClassRequest].self) { (source: AnyObject) -> [UpdateSpeedClassRequest] in
                return Decoders.decode(clazz: [UpdateSpeedClassRequest].self, source: source)
            }
            // Decoder for UpdateSpeedClassRequest
            Decoders.addDecoder(clazz: UpdateSpeedClassRequest.self) { (source: AnyObject) -> UpdateSpeedClassRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = UpdateSpeedClassRequest()
                instance.speedClass = UpdateSpeedClassRequest.SpeedClass(rawValue: (sourceDictionary["speedClass"] as? String) ?? "") 
                
                return instance
            }
			

            // Decoder for [UpdateUserRequest]
            Decoders.addDecoder(clazz: [UpdateUserRequest].self) { (source: AnyObject) -> [UpdateUserRequest] in
                return Decoders.decode(clazz: [UpdateUserRequest].self, source: source)
            }
            // Decoder for UpdateUserRequest
            Decoders.addDecoder(clazz: UpdateUserRequest.self) { (source: AnyObject) -> UpdateUserRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = UpdateUserRequest()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                
                return instance
            }
			

            // Decoder for [UserDetailResponse]
            Decoders.addDecoder(clazz: [UserDetailResponse].self) { (source: AnyObject) -> [UserDetailResponse] in
                return Decoders.decode(clazz: [UserDetailResponse].self, source: source)
            }
            // Decoder for UserDetailResponse
            Decoders.addDecoder(clazz: UserDetailResponse.self) { (source: AnyObject) -> UserDetailResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = UserDetailResponse()
                instance.authKeyList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["authKeyList"])
                instance.createDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createDateTime"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.hasPassword = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["hasPassword"])
                instance.permission = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["permission"])
                instance.roleList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["roleList"])
                instance.updateDateTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["updateDateTime"])
                instance.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"])
                
                return instance
            }
			

            // Decoder for [VerifyEmailChangeTokenRequest]
            Decoders.addDecoder(clazz: [VerifyEmailChangeTokenRequest].self) { (source: AnyObject) -> [VerifyEmailChangeTokenRequest] in
                return Decoders.decode(clazz: [VerifyEmailChangeTokenRequest].self, source: source)
            }
            // Decoder for VerifyEmailChangeTokenRequest
            Decoders.addDecoder(clazz: VerifyEmailChangeTokenRequest.self) { (source: AnyObject) -> VerifyEmailChangeTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = VerifyEmailChangeTokenRequest()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                
                return instance
            }
			

            // Decoder for [VerifyOperatorsRequest]
            Decoders.addDecoder(clazz: [VerifyOperatorsRequest].self) { (source: AnyObject) -> [VerifyOperatorsRequest] in
                return Decoders.decode(clazz: [VerifyOperatorsRequest].self, source: source)
            }
            // Decoder for VerifyOperatorsRequest
            Decoders.addDecoder(clazz: VerifyOperatorsRequest.self) { (source: AnyObject) -> VerifyOperatorsRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = VerifyOperatorsRequest()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                
                return instance
            }
			

            // Decoder for [VerifyPasswordResetTokenRequest]
            Decoders.addDecoder(clazz: [VerifyPasswordResetTokenRequest].self) { (source: AnyObject) -> [VerifyPasswordResetTokenRequest] in
                return Decoders.decode(clazz: [VerifyPasswordResetTokenRequest].self, source: source)
            }
            // Decoder for VerifyPasswordResetTokenRequest
            Decoders.addDecoder(clazz: VerifyPasswordResetTokenRequest.self) { (source: AnyObject) -> VerifyPasswordResetTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = VerifyPasswordResetTokenRequest()
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                
                return instance
            }
			

            // Decoder for [VerifySubscriberTransferTokenRequest]
            Decoders.addDecoder(clazz: [VerifySubscriberTransferTokenRequest].self) { (source: AnyObject) -> [VerifySubscriberTransferTokenRequest] in
                return Decoders.decode(clazz: [VerifySubscriberTransferTokenRequest].self, source: source)
            }
            // Decoder for VerifySubscriberTransferTokenRequest
            Decoders.addDecoder(clazz: VerifySubscriberTransferTokenRequest.self) { (source: AnyObject) -> VerifySubscriberTransferTokenRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = VerifySubscriberTransferTokenRequest()
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                
                return instance
            }
			

            // Decoder for [VerifySubscriberTransferTokenResponse]
            Decoders.addDecoder(clazz: [VerifySubscriberTransferTokenResponse].self) { (source: AnyObject) -> [VerifySubscriberTransferTokenResponse] in
                return Decoders.decode(clazz: [VerifySubscriberTransferTokenResponse].self, source: source)
            }
            // Decoder for VerifySubscriberTransferTokenResponse
            Decoders.addDecoder(clazz: VerifySubscriberTransferTokenResponse.self) { (source: AnyObject) -> VerifySubscriberTransferTokenResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = VerifySubscriberTransferTokenResponse()
                instance.transferredImsi = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["transferredImsi"])
                
                return instance
            }
			

            // Decoder for [VirtualPrivateGateway]
            Decoders.addDecoder(clazz: [VirtualPrivateGateway].self) { (source: AnyObject) -> [VirtualPrivateGateway] in
                return Decoders.decode(clazz: [VirtualPrivateGateway].self, source: source)
            }
            // Decoder for VirtualPrivateGateway
            Decoders.addDecoder(clazz: VirtualPrivateGateway.self) { (source: AnyObject) -> VirtualPrivateGateway in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = VirtualPrivateGateway()
                instance.operatorId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["operatorId"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.primaryServiceName = VirtualPrivateGateway.PrimaryServiceName(rawValue: (sourceDictionary["primaryServiceName"] as? String) ?? "") 
                instance._type = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["type"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                instance.useInternetGateway = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useInternetGateway"])
                instance.vpcPeeringConnections = Decoders.decodeOptional(clazz: Map.self, source: sourceDictionary["vpcPeeringConnections"])
                instance.virtualInterfaces = Decoders.decodeOptional(clazz: Map.self, source: sourceDictionary["virtualInterfaces"])
                instance.createdTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["createdTime"])
                instance.lastModifiedTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["lastModifiedTime"])
                instance.tags = Decoders.decodeOptional(clazz: Tag.self, source: sourceDictionary["tags"])
                
                return instance
            }
			

            // Decoder for [VpcPeeringConnection]
            Decoders.addDecoder(clazz: [VpcPeeringConnection].self) { (source: AnyObject) -> [VpcPeeringConnection] in
                return Decoders.decode(clazz: [VpcPeeringConnection].self, source: source)
            }
            // Decoder for VpcPeeringConnection
            Decoders.addDecoder(clazz: VpcPeeringConnection.self) { (source: AnyObject) -> VpcPeeringConnection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                
                
                let instance = VpcPeeringConnection()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.peerOwnerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["peerOwnerId"])
                instance.peerVpcId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["peerVpcId"])
                instance.destinationCidrBlock = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["destinationCidrBlock"])
                
                return instance
            }
			
        }
    }
}
