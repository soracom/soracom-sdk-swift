formatter: swift
options:
  name: API # the name of the API
  fixedWidthIntegers: false # whether to use types like Int32 and Int64
  mutableModels: true # whether model properties are mutable
  safeOptionalDecoding: true # set invalid optionals to nil instead of throwing
  safeArrayDecoding: true # filter out invalid items in array instead of throwing
  modelPrefix: _ # applied to model classes and enums
  modelSuffix: null # applied to model classes
  modelType: class # can be struct or class
  modelInheritance: true # must be false for struct modelType
  modelNames: {} # override model type names
  enumNames: {
    Protocol: "`Protocol`"
  } # override enum type names
  dependencies: []
templateFiles:
  - path: README.md
  - path: Sources/API.swift
  - path: Sources/Coding.swift
  - path: Sources/APIRequest.swift
  - path: Sources/APIClient.swift
  - path: Sources/APIService.swift
  - path: Sources/APIError.swift
  - path: Sources/APIResponse.swift
  - path: Sources/Authorization.swift
  - path: Sources/APIResult.swift
  - path: Sources/RequestBehaviour.swift
  - path: Sources/AnyCodable.swift
  - path: Sources/enum.swift
    context: enums
    destination: "Sources/Enums/{{ enumName }}.swift"
  - path: Sources/Model.swift
    context: definitions
    destination: "Sources/Models/_{{ type }}.swift"
  - path: Sources/Request.swift
    context: operations
    destination: "Sources/Requests{% if tag %}/{{ tag|upperCamelCase }}{% endif %}/{{ type }}.swift"
