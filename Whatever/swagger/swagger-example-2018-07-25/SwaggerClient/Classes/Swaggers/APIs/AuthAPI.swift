//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthAPI {
    /**
     Performs authentication to access to the SORACOM API.
     
     - parameter auth: (body) Authentication request. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func auth(auth: AuthRequest, completion: @escaping ((_ data: AuthResponse?,_ error: Error?) -> Void)) {
        authWithRequestBuilder(auth: auth).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Performs authentication to access to the SORACOM API.
     - POST /auth
     - Performs authentication to access to the SORACOM API. To perform authentication by a root account, specify `email` and `password`. To perform authentication by an AuthKey, specify `authKeyId` and `authKey`. To perform authentication by a SAM user, specify `operatorId`, `userName` and `password`. An API Key and an API Token will be included in the response if successful. Specify the API Key and the API Token to requests afterwards
     - examples: [{contentType=application/json, example={
  "apiKey" : "apiKey",
  "userName" : "userName",
  "operatorId" : "operatorId",
  "token" : "token"
}}]
     
     - parameter auth: (body) Authentication request. 

     - returns: RequestBuilder<AuthResponse> 
     */
    open class func authWithRequestBuilder(auth: AuthRequest) -> RequestBuilder<AuthResponse> {
        let path = "/auth"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: auth)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AuthResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Issues a password reset token for the operator.
     
     - parameter email: (body) email address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issuePasswordResetToken(email: IssuePasswordResetTokenRequest, completion: @escaping ((_ error: Error?) -> Void)) {
        issuePasswordResetTokenWithRequestBuilder(email: email).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Issues a password reset token for the operator.
     - POST /auth/password_reset_token/issue
     - Generates a password reset token and send it to the operator's mail address. After receiving the password reset token, call /v1/auth/password_reset_token/verify API with the token to update operator's password.
     
     - parameter email: (body) email address 

     - returns: RequestBuilder<Void> 
     */
    open class func issuePasswordResetTokenWithRequestBuilder(email: IssuePasswordResetTokenRequest) -> RequestBuilder<Void> {
        let path = "/auth/password_reset_token/issue"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: email)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Verifies the password reset token and updates password.
     
     - parameter request: (body) token, password 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyPasswordResetToken(request: VerifyPasswordResetTokenRequest, completion: @escaping ((_ error: Error?) -> Void)) {
        verifyPasswordResetTokenWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Verifies the password reset token and updates password.
     - POST /auth/password_reset_token/verify
     - Updates the operator's password if the password reset token is verified.
     
     - parameter request: (body) token, password 

     - returns: RequestBuilder<Void> 
     */
    open class func verifyPasswordResetTokenWithRequestBuilder(request: VerifyPasswordResetTokenRequest) -> RequestBuilder<Void> {
        let path = "/auth/password_reset_token/verify"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
