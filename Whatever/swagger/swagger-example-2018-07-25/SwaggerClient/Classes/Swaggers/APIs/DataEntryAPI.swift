//
// DataEntryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DataEntryAPI {
    /**
     * enum for parameter resourceType
     */
    public enum ResourceType_deleteDataEntry: String { 
        case subscriber = "Subscriber"
        case loraDevice = "LoraDevice"
        case subscriberIdentityModule = "SubscriberIdentityModule"
        case sigfoxDevice = "SigfoxDevice"
        case device = "Device"
    }

    /**
     Deletes a data entry
     
     - parameter resourceType: (path) Type of data source resource 
     - parameter resourceId: (path) ID of data source resource 
     - parameter time: (query) Timestamp of the target data entry to delete (unixtime in milliseconds). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDataEntry(resourceType: ResourceType_deleteDataEntry, resourceId: String, time: Int, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteDataEntryWithRequestBuilder(resourceType: resourceType, resourceId: resourceId, time: time).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Deletes a data entry
     - DELETE /data/{resource_type}/{resource_id}/{time}
     - Deletes a data entry identified with resource ID and timestamp
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter resourceType: (path) Type of data source resource 
     - parameter resourceId: (path) ID of data source resource 
     - parameter time: (query) Timestamp of the target data entry to delete (unixtime in milliseconds). 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDataEntryWithRequestBuilder(resourceType: ResourceType_deleteDataEntry, resourceId: String, time: Int) -> RequestBuilder<Void> {
        var path = "/data/{resource_type}/{resource_id}/{time}"
        path = path.replacingOccurrences(of: "{resource_type}", with: "\(resourceType.rawValue)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource_id}", with: "\(resourceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "time": time.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter resourceType
     */
    public enum ResourceType_getDataEntries: String { 
        case subscriber = "Subscriber"
        case loraDevice = "LoraDevice"
        case subscriberIdentityModule = "SubscriberIdentityModule"
        case sigfoxDevice = "SigfoxDevice"
        case device = "Device"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getDataEntries: String { 
        case desc = "desc"
        case asc = "asc"
    }

    /**
     Get data sent from a resource.
     
     - parameter resourceType: (path) Type of data source resource 
     - parameter resourceId: (path) ID of data source resource 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataEntries(resourceType: ResourceType_getDataEntries, resourceId: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataEntries? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [DataEntry]?,_ error: Error?) -> Void)) {
        getDataEntriesWithRequestBuilder(resourceType: resourceType, resourceId: resourceId, from: from, to: to, sort: sort, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get data sent from a resource.
     - GET /data/{resource_type}/{resource_id}
     - Returns a list of data entries sent from a resource that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
}, {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
} ]}]
     
     - parameter resourceType: (path) Type of data source resource 
     - parameter resourceId: (path) ID of data source resource 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)

     - returns: RequestBuilder<[DataEntry]> 
     */
    open class func getDataEntriesWithRequestBuilder(resourceType: ResourceType_getDataEntries, resourceId: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataEntries? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[DataEntry]> {
        var path = "/data/{resource_type}/{resource_id}"
        path = path.replacingOccurrences(of: "{resource_type}", with: "\(resourceType.rawValue)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource_id}", with: "\(resourceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "sort": sort?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[DataEntry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter resourceType
     */
    public enum ResourceType_getDataEntry: String { 
        case subscriber = "Subscriber"
        case loraDevice = "LoraDevice"
        case subscriberIdentityModule = "SubscriberIdentityModule"
        case sigfoxDevice = "SigfoxDevice"
        case device = "Device"
    }

    /**
     Gets a data entry
     
     - parameter resourceType: (path) Type of data source resource 
     - parameter resourceId: (path) ID of data source resource 
     - parameter time: (query) Timestamp of the target data entry to get (unixtime in milliseconds). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataEntry(resourceType: ResourceType_getDataEntry, resourceId: String, time: Int, completion: @escaping ((_ error: Error?) -> Void)) {
        getDataEntryWithRequestBuilder(resourceType: resourceType, resourceId: resourceId, time: time).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Gets a data entry
     - GET /data/{resource_type}/{resource_id}/{time}
     - Gets a data entry identified with resource ID and timestamp
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter resourceType: (path) Type of data source resource 
     - parameter resourceId: (path) ID of data source resource 
     - parameter time: (query) Timestamp of the target data entry to get (unixtime in milliseconds). 

     - returns: RequestBuilder<Void> 
     */
    open class func getDataEntryWithRequestBuilder(resourceType: ResourceType_getDataEntry, resourceId: String, time: Int) -> RequestBuilder<Void> {
        var path = "/data/{resource_type}/{resource_id}/{time}"
        path = path.replacingOccurrences(of: "{resource_type}", with: "\(resourceType.rawValue)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource_id}", with: "\(resourceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "time": time.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter resourceType
     */
    public enum ResourceType_listDataSourceResources: String { 
        case subscriber = "Subscriber"
        case loraDevice = "LoraDevice"
        case subscriberIdentityModule = "SubscriberIdentityModule"
        case sigfoxDevice = "SigfoxDevice"
        case device = "Device"
    }

    /**
     Get the list of data source resources
     
     - parameter resourceType: (query) Type of data source resource (optional)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;resourceId&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDataSourceResources(resourceType: ResourceType_listDataSourceResources? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [DataSourceResourceMetadata]?,_ error: Error?) -> Void)) {
        listDataSourceResourcesWithRequestBuilder(resourceType: resourceType, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the list of data source resources
     - GET /data/resources
     - Returns a list of data source resources that have sent data from resources that belong to the operator. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "resourceId" : "resourceId",
  "lastModifiedTime" : 0,
  "attributeNames" : [ "attributeNames", "attributeNames" ],
  "resourceType" : "resourceType"
}, {
  "resourceId" : "resourceId",
  "lastModifiedTime" : 0,
  "attributeNames" : [ "attributeNames", "attributeNames" ],
  "resourceType" : "resourceType"
} ]}]
     
     - parameter resourceType: (query) Type of data source resource (optional)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;resourceId&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)

     - returns: RequestBuilder<[DataSourceResourceMetadata]> 
     */
    open class func listDataSourceResourcesWithRequestBuilder(resourceType: ResourceType_listDataSourceResources? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[DataSourceResourceMetadata]> {
        let path = "/data/resources"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "resource_type": resourceType?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[DataSourceResourceMetadata]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
