//
// DeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DeviceAPI {
    /**
     Creates a new Device
     
     - parameter device: (body) Device to create 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDevice(device: Device, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        createDeviceWithRequestBuilder(device: device).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Creates a new Device
     - POST /devices
     - Creates a new Device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "serialNumber" : "serialNumber",
  "device_id" : "device_id",
  "groupId" : "groupId",
  "objects" : "{}",
  "ipAddress" : "ipAddress",
  "tags" : {
    "key" : "tags"
  },
  "manufacturer" : "manufacturer",
  "endpoint" : "endpoint",
  "registrationId" : "registrationId",
  "online" : false,
  "modelNumber" : "modelNumber",
  "firmwareVersion" : "firmwareVersion",
  "operatorId" : "operatorId",
  "lastRegistrationUpdate" : "2000-01-23T04:56:07.000+00:00",
  "registrationLifeTime" : 0
}}]
     
     - parameter device: (body) Device to create 

     - returns: RequestBuilder<Device> 
     */
    open class func createDeviceWithRequestBuilder(device: Device) -> RequestBuilder<Device> {
        let path = "/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: device)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete Device
     
     - parameter deviceId: (path) Device to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDevice(deviceId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete Device
     - DELETE /devices/{device_id}
     - Delete Device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Device to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete device tag
     
     - parameter deviceId: (path) Device to update 
     - parameter tagName: (path) Name of tag to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDeviceTag(deviceId: String, tagName: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteDeviceTagWithRequestBuilder(deviceId: deviceId, tagName: tagName).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete device tag
     - DELETE /devices/{device_id}/tags/{tag_name}
     - Delete device tag
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Device to update 
     - parameter tagName: (path) Name of tag to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteDeviceTagWithRequestBuilder(deviceId: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}/tags/{tag_name}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag_name}", with: "\(tagName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Executes a resource of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter arg: (body) Argument string when executing the resource (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func executeDeviceResource(deviceId: String, object: String, instance: String, resource: String, arg: Arg? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        executeDeviceResourceWithRequestBuilder(deviceId: deviceId, object: object, instance: instance, resource: resource, arg: arg).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Executes a resource of a device
     - POST /devices/{device_id}/{object}/{instance}/{resource}/execute
     - Executes a resource of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter arg: (body) Argument string when executing the resource (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func executeDeviceResourceWithRequestBuilder(deviceId: String, object: String, instance: String, resource: String, arg: Arg? = nil) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}/{object}/{instance}/{resource}/execute"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource}", with: "\(resource)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: arg)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Returns a Device identified by device ID
     
     - parameter deviceId: (path) Device ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDevice(deviceId: String, model: Bool? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        getDeviceWithRequestBuilder(deviceId: deviceId, model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Returns a Device identified by device ID
     - GET /devices/{device_id}
     - Returns a Device identified by device ID
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "serialNumber" : "serialNumber",
  "device_id" : "device_id",
  "groupId" : "groupId",
  "objects" : "{}",
  "ipAddress" : "ipAddress",
  "tags" : {
    "key" : "tags"
  },
  "manufacturer" : "manufacturer",
  "endpoint" : "endpoint",
  "registrationId" : "registrationId",
  "online" : false,
  "modelNumber" : "modelNumber",
  "firmwareVersion" : "firmwareVersion",
  "operatorId" : "operatorId",
  "lastRegistrationUpdate" : "2000-01-23T04:56:07.000+00:00",
  "registrationLifeTime" : 0
}}]
     
     - parameter deviceId: (path) Device ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)

     - returns: RequestBuilder<Device> 
     */
    open class func getDeviceWithRequestBuilder(deviceId: String, model: Bool? = nil) -> RequestBuilder<Device> {
        var path = "/devices/{device_id}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "model": model
        ])
        

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns a list of Devices
     
     - parameter tagName: (query) Tag name (optional, default to null)
     - parameter tagValue: (query) Tag value (optional, default to null)
     - parameter tagValueMatchMode: (query) Tag value match mode (exact | prefix) (optional, default to null)
     - parameter lastEvaluatedKey: (query) ID of the last Device in the previous page (optional, default to null)
     - parameter limit: (query) Max number of Devices in a response (optional, default to -1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDevices(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: String? = nil, lastEvaluatedKey: String? = nil, limit: Int? = nil, completion: @escaping ((_ data: [Device]?,_ error: Error?) -> Void)) {
        listDevicesWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, lastEvaluatedKey: lastEvaluatedKey, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Returns a list of Devices
     - GET /devices
     - Returns a list of Devices
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "serialNumber" : "serialNumber",
  "device_id" : "device_id",
  "groupId" : "groupId",
  "objects" : "{}",
  "ipAddress" : "ipAddress",
  "tags" : {
    "key" : "tags"
  },
  "manufacturer" : "manufacturer",
  "endpoint" : "endpoint",
  "registrationId" : "registrationId",
  "online" : false,
  "modelNumber" : "modelNumber",
  "firmwareVersion" : "firmwareVersion",
  "operatorId" : "operatorId",
  "lastRegistrationUpdate" : "2000-01-23T04:56:07.000+00:00",
  "registrationLifeTime" : 0
}, {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "serialNumber" : "serialNumber",
  "device_id" : "device_id",
  "groupId" : "groupId",
  "objects" : "{}",
  "ipAddress" : "ipAddress",
  "tags" : {
    "key" : "tags"
  },
  "manufacturer" : "manufacturer",
  "endpoint" : "endpoint",
  "registrationId" : "registrationId",
  "online" : false,
  "modelNumber" : "modelNumber",
  "firmwareVersion" : "firmwareVersion",
  "operatorId" : "operatorId",
  "lastRegistrationUpdate" : "2000-01-23T04:56:07.000+00:00",
  "registrationLifeTime" : 0
} ]}]
     
     - parameter tagName: (query) Tag name (optional, default to null)
     - parameter tagValue: (query) Tag value (optional, default to null)
     - parameter tagValueMatchMode: (query) Tag value match mode (exact | prefix) (optional, default to null)
     - parameter lastEvaluatedKey: (query) ID of the last Device in the previous page (optional, default to null)
     - parameter limit: (query) Max number of Devices in a response (optional, default to -1)

     - returns: RequestBuilder<[Device]> 
     */
    open class func listDevicesWithRequestBuilder(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: String? = nil, lastEvaluatedKey: String? = nil, limit: Int? = nil) -> RequestBuilder<[Device]> {
        let path = "/devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag_name": tagName, 
            "tag_value": tagValue, 
            "tag_value_match_mode": tagValueMatchMode, 
            "last_evaluated_key": lastEvaluatedKey, 
            "limit": limit?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[Device]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Triggers observation of the specified resource of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func observeDeviceResource(deviceId: String, object: String, instance: String, resource: String, model: Bool? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        observeDeviceResourceWithRequestBuilder(deviceId: deviceId, object: object, instance: instance, resource: resource, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Triggers observation of the specified resource of a device
     - POST /devices/{device_id}/{object}/{instance}/{resource}/observe
     - Triggers observation of the specified resource of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func observeDeviceResourceWithRequestBuilder(deviceId: String, object: String, instance: String, resource: String, model: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}/{object}/{instance}/{resource}/observe"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource}", with: "\(resource)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "model": model
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Triggers observation of resources under an object instance of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func observeDeviceResources(deviceId: String, object: String, instance: String, model: Bool? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        observeDeviceResourcesWithRequestBuilder(deviceId: deviceId, object: object, instance: instance, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Triggers observation of resources under an object instance of a device
     - POST /devices/{device_id}/{object}/{instance}/observe
     - Triggers observation of resources under an object instance of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)

     - returns: RequestBuilder<Void> 
     */
    open class func observeDeviceResourcesWithRequestBuilder(deviceId: String, object: String, instance: String, model: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}/{object}/{instance}/observe"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "model": model
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates device tags
     
     - parameter deviceId: (path) Device to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putDeviceTags(deviceId: String, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        putDeviceTagsWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Updates device tags
     - PUT /devices/{device_id}/tags
     - Updates device tags
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "serialNumber" : "serialNumber",
  "device_id" : "device_id",
  "groupId" : "groupId",
  "objects" : "{}",
  "ipAddress" : "ipAddress",
  "tags" : {
    "key" : "tags"
  },
  "manufacturer" : "manufacturer",
  "endpoint" : "endpoint",
  "registrationId" : "registrationId",
  "online" : false,
  "modelNumber" : "modelNumber",
  "firmwareVersion" : "firmwareVersion",
  "operatorId" : "operatorId",
  "lastRegistrationUpdate" : "2000-01-23T04:56:07.000+00:00",
  "registrationLifeTime" : 0
}}]
     
     - parameter deviceId: (path) Device to update 

     - returns: RequestBuilder<Device> 
     */
    open class func putDeviceTagsWithRequestBuilder(deviceId: String) -> RequestBuilder<Device> {
        var path = "/devices/{device_id}/tags"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the specified resource of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readDeviceResource(deviceId: String, object: String, instance: String, resource: String, model: Bool? = nil, completion: @escaping ((_ data: ResourceInstance?,_ error: Error?) -> Void)) {
        readDeviceResourceWithRequestBuilder(deviceId: deviceId, object: object, instance: instance, resource: resource, model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get the specified resource of a device
     - GET /devices/{device_id}/{object}/{instance}/{resource}
     - Get the specified resource of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "operations" : "NONE",
  "values" : "{}",
  "name" : "name",
  "multiple" : false,
  "description" : "description",
  "id" : 6,
  "units" : "units",
  "type" : "STRING",
  "mandatory" : false,
  "rangeEnumeration" : "rangeEnumeration",
  "value" : "{}",
  "observed" : false
}}]
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)

     - returns: RequestBuilder<ResourceInstance> 
     */
    open class func readDeviceResourceWithRequestBuilder(deviceId: String, object: String, instance: String, resource: String, model: Bool? = nil) -> RequestBuilder<ResourceInstance> {
        var path = "/devices/{device_id}/{object}/{instance}/{resource}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource}", with: "\(resource)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "model": model
        ])
        

        let requestBuilder: RequestBuilder<ResourceInstance>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get resources under an object instance of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readDeviceResources(deviceId: String, object: String, instance: String, model: Bool? = nil, completion: @escaping ((_ data: ObjectInstance?,_ error: Error?) -> Void)) {
        readDeviceResourcesWithRequestBuilder(deviceId: deviceId, object: object, instance: instance, model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get resources under an object instance of a device
     - GET /devices/{device_id}/{object}/{instance}
     - Get resources under an object instance of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "resources" : {
    "key" : {
      "operations" : "NONE",
      "values" : "{}",
      "name" : "name",
      "multiple" : false,
      "description" : "description",
      "id" : 6,
      "units" : "units",
      "type" : "STRING",
      "mandatory" : false,
      "rangeEnumeration" : "rangeEnumeration",
      "value" : "{}",
      "observed" : false
    }
  },
  "id" : 0,
  "observed" : false
}}]
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter model: (query) Whether or not to add model information (optional, default to false)

     - returns: RequestBuilder<ObjectInstance> 
     */
    open class func readDeviceResourcesWithRequestBuilder(deviceId: String, object: String, instance: String, model: Bool? = nil) -> RequestBuilder<ObjectInstance> {
        var path = "/devices/{device_id}/{object}/{instance}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "model": model
        ])
        

        let requestBuilder: RequestBuilder<ObjectInstance>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lets a device device join a group
     
     - parameter deviceId: (path) Device to update 
     - parameter groupId: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setDeviceGroup(deviceId: String, groupId: GroupId? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        setDeviceGroupWithRequestBuilder(deviceId: deviceId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Lets a device device join a group
     - POST /devices/{device_id}/set_group
     - Lets a device device join a group
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "serialNumber" : "serialNumber",
  "device_id" : "device_id",
  "groupId" : "groupId",
  "objects" : "{}",
  "ipAddress" : "ipAddress",
  "tags" : {
    "key" : "tags"
  },
  "manufacturer" : "manufacturer",
  "endpoint" : "endpoint",
  "registrationId" : "registrationId",
  "online" : false,
  "modelNumber" : "modelNumber",
  "firmwareVersion" : "firmwareVersion",
  "operatorId" : "operatorId",
  "lastRegistrationUpdate" : "2000-01-23T04:56:07.000+00:00",
  "registrationLifeTime" : 0
}}]
     
     - parameter deviceId: (path) Device to update 
     - parameter groupId: (body)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func setDeviceGroupWithRequestBuilder(deviceId: String, groupId: GroupId? = nil) -> RequestBuilder<Device> {
        var path = "/devices/{device_id}/set_group"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: groupId)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Stops observation of a resource of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unobserveDeviceResource(deviceId: String, object: String, instance: String, resource: String, completion: @escaping ((_ error: Error?) -> Void)) {
        unobserveDeviceResourceWithRequestBuilder(deviceId: deviceId, object: object, instance: instance, resource: resource).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Stops observation of a resource of a device
     - POST /devices/{device_id}/{object}/{instance}/{resource}/unobserve
     - Stops observation of a resource of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 

     - returns: RequestBuilder<Void> 
     */
    open class func unobserveDeviceResourceWithRequestBuilder(deviceId: String, object: String, instance: String, resource: String) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}/{object}/{instance}/{resource}/unobserve"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource}", with: "\(resource)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stops observation of resources under an object instance of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unobserveDeviceResources(deviceId: String, object: String, instance: String, completion: @escaping ((_ error: Error?) -> Void)) {
        unobserveDeviceResourcesWithRequestBuilder(deviceId: deviceId, object: object, instance: instance).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Stops observation of resources under an object instance of a device
     - POST /devices/{device_id}/{object}/{instance}/unobserve
     - Stops observation of resources under an object instance of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 

     - returns: RequestBuilder<Void> 
     */
    open class func unobserveDeviceResourcesWithRequestBuilder(deviceId: String, object: String, instance: String) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}/{object}/{instance}/unobserve"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Lets a device leave from a group
     
     - parameter deviceId: (path) Device to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetDeviceGroup(deviceId: String, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        unsetDeviceGroupWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Lets a device leave from a group
     - POST /devices/{device_id}/unset_group
     - Lets a device leave from a group
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "serialNumber" : "serialNumber",
  "device_id" : "device_id",
  "groupId" : "groupId",
  "objects" : "{}",
  "ipAddress" : "ipAddress",
  "tags" : {
    "key" : "tags"
  },
  "manufacturer" : "manufacturer",
  "endpoint" : "endpoint",
  "registrationId" : "registrationId",
  "online" : false,
  "modelNumber" : "modelNumber",
  "firmwareVersion" : "firmwareVersion",
  "operatorId" : "operatorId",
  "lastRegistrationUpdate" : "2000-01-23T04:56:07.000+00:00",
  "registrationLifeTime" : 0
}}]
     
     - parameter deviceId: (path) Device to update 

     - returns: RequestBuilder<Device> 
     */
    open class func unsetDeviceGroupWithRequestBuilder(deviceId: String) -> RequestBuilder<Device> {
        var path = "/devices/{device_id}/unset_group"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Write value to a resource of a device
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter value: (body) Value(s) to write to the resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func writeDeviceResource(deviceId: String, object: String, instance: String, resource: String, value: Value, completion: @escaping ((_ error: Error?) -> Void)) {
        writeDeviceResourceWithRequestBuilder(deviceId: deviceId, object: object, instance: instance, resource: resource, value: value).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Write value to a resource of a device
     - PUT /devices/{device_id}/{object}/{instance}/{resource}
     - Write value to a resource of a device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) Target device 
     - parameter object: (path) Object ID 
     - parameter instance: (path) Instance ID 
     - parameter resource: (path) Resource ID 
     - parameter value: (body) Value(s) to write to the resource 

     - returns: RequestBuilder<Void> 
     */
    open class func writeDeviceResourceWithRequestBuilder(deviceId: String, object: String, instance: String, resource: String, value: Value) -> RequestBuilder<Void> {
        var path = "/devices/{device_id}/{object}/{instance}/{resource}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{object}", with: "\(object)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{instance}", with: "\(instance)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{resource}", with: "\(resource)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: value)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
