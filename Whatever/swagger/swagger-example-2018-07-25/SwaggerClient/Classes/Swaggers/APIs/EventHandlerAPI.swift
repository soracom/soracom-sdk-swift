//
// EventHandlerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EventHandlerAPI {
    /**
     Create Event Handler.
     
     - parameter req: (body) event handler settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEventHandler(req: CreateEventHandlerRequest, completion: @escaping ((_ data: EventHandlerModel?,_ error: Error?) -> Void)) {
        createEventHandlerWithRequestBuilder(req: req).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create Event Handler.
     - POST /event_handlers
     - Creates a new event handler. Please see also https://dev.soracom.io/en/docs/event_handler/
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "targetOperatorId" : "targetOperatorId",
  "actionConfigList" : [ {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  }, {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  } ],
  "handlerId" : "handlerId",
  "targetImsi" : "targetImsi",
  "name" : "name",
  "description" : "description",
  "targetGroupId" : "targetGroupId",
  "targetTag" : {
    "location" : "tokyo"
  },
  "ruleConfig" : {
    "type" : "DailyTrafficRule",
    "properties" : {
      "inactiveTimeoutDateConst" : "IMMEDIATELY",
      "targetSpeedClass" : "s1.minimum",
      "limitTotalTrafficMegaByte" : 0,
      "targetStatus" : "ready"
    }
  },
  "status" : "inactive"
}}]
     
     - parameter req: (body) event handler settings 

     - returns: RequestBuilder<EventHandlerModel> 
     */
    open class func createEventHandlerWithRequestBuilder(req: CreateEventHandlerRequest) -> RequestBuilder<EventHandlerModel> {
        let path = "/event_handlers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: req)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<EventHandlerModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete Event Handler.
     
     - parameter handlerId: (path) handler ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEventHandler(handlerId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteEventHandlerWithRequestBuilder(handlerId: handlerId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete Event Handler.
     - DELETE /event_handlers/{handler_id}
     - Deletes the specified event handler.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter handlerId: (path) handler ID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteEventHandlerWithRequestBuilder(handlerId: String) -> RequestBuilder<Void> {
        var path = "/event_handlers/{handler_id}"
        path = path.replacingOccurrences(of: "{handler_id}", with: "\(handlerId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Ignore Event Handler.
     
     - parameter imsi: (path) imsi 
     - parameter handlerId: (path) handler_id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIgnoreEventHandler(imsi: String, handlerId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteIgnoreEventHandlerWithRequestBuilder(imsi: imsi, handlerId: handlerId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete Ignore Event Handler.
     - DELETE /event_handlers/{handler_id}/subscribers/{imsi}/ignore
     - Deletes the setting for ignoring the specified event handler of the specified IMSI.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter imsi: (path) imsi 
     - parameter handlerId: (path) handler_id 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteIgnoreEventHandlerWithRequestBuilder(imsi: String, handlerId: String) -> RequestBuilder<Void> {
        var path = "/event_handlers/{handler_id}/subscribers/{imsi}/ignore"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{handler_id}", with: "\(handlerId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Event Handler.
     
     - parameter handlerId: (path) handler ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEventHandler(handlerId: String, completion: @escaping ((_ data: EventHandlerModel?,_ error: Error?) -> Void)) {
        getEventHandlerWithRequestBuilder(handlerId: handlerId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Event Handler.
     - GET /event_handlers/{handler_id}
     - Returns information about the specified event handler.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json;charset=UTF-8, example={
  "targetOperatorId" : "targetOperatorId",
  "actionConfigList" : [ {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  }, {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  } ],
  "handlerId" : "handlerId",
  "targetImsi" : "targetImsi",
  "name" : "name",
  "description" : "description",
  "targetGroupId" : "targetGroupId",
  "targetTag" : {
    "location" : "tokyo"
  },
  "ruleConfig" : {
    "type" : "DailyTrafficRule",
    "properties" : {
      "inactiveTimeoutDateConst" : "IMMEDIATELY",
      "targetSpeedClass" : "s1.minimum",
      "limitTotalTrafficMegaByte" : 0,
      "targetStatus" : "ready"
    }
  },
  "status" : "inactive"
}}]
     
     - parameter handlerId: (path) handler ID 

     - returns: RequestBuilder<EventHandlerModel> 
     */
    open class func getEventHandlerWithRequestBuilder(handlerId: String) -> RequestBuilder<EventHandlerModel> {
        var path = "/event_handlers/{handler_id}"
        path = path.replacingOccurrences(of: "{handler_id}", with: "\(handlerId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<EventHandlerModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter target
     */
    public enum Target_listEventHandlers: String { 
        case _operator = "operator"
        case imsi = "imsi"
        case tag = "tag"
        case group = "group"
    }

    /**
     List Event Handlers.
     
     - parameter target: (query) target (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listEventHandlers(target: Target_listEventHandlers? = nil, completion: @escaping ((_ data: [EventHandlerModel]?,_ error: Error?) -> Void)) {
        listEventHandlersWithRequestBuilder(target: target).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List Event Handlers.
     - GET /event_handlers
     - Returns a list of event handlers.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json;charset=UTF-8, example=[ {
  "targetOperatorId" : "targetOperatorId",
  "actionConfigList" : [ {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  }, {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  } ],
  "handlerId" : "handlerId",
  "targetImsi" : "targetImsi",
  "name" : "name",
  "description" : "description",
  "targetGroupId" : "targetGroupId",
  "targetTag" : {
    "location" : "tokyo"
  },
  "ruleConfig" : {
    "type" : "DailyTrafficRule",
    "properties" : {
      "inactiveTimeoutDateConst" : "IMMEDIATELY",
      "targetSpeedClass" : "s1.minimum",
      "limitTotalTrafficMegaByte" : 0,
      "targetStatus" : "ready"
    }
  },
  "status" : "inactive"
}, {
  "targetOperatorId" : "targetOperatorId",
  "actionConfigList" : [ {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  }, {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  } ],
  "handlerId" : "handlerId",
  "targetImsi" : "targetImsi",
  "name" : "name",
  "description" : "description",
  "targetGroupId" : "targetGroupId",
  "targetTag" : {
    "location" : "tokyo"
  },
  "ruleConfig" : {
    "type" : "DailyTrafficRule",
    "properties" : {
      "inactiveTimeoutDateConst" : "IMMEDIATELY",
      "targetSpeedClass" : "s1.minimum",
      "limitTotalTrafficMegaByte" : 0,
      "targetStatus" : "ready"
    }
  },
  "status" : "inactive"
} ]}]
     
     - parameter target: (query) target (optional)

     - returns: RequestBuilder<[EventHandlerModel]> 
     */
    open class func listEventHandlersWithRequestBuilder(target: Target_listEventHandlers? = nil) -> RequestBuilder<[EventHandlerModel]> {
        let path = "/event_handlers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "target": target?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[EventHandlerModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List Event Handlers related to Subscriber.
     
     - parameter imsi: (path) imsi 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listEventHandlersBySubscriber(imsi: String, completion: @escaping ((_ data: [EventHandlerModel]?,_ error: Error?) -> Void)) {
        listEventHandlersBySubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List Event Handlers related to Subscriber.
     - GET /event_handlers/subscribers/{imsi}
     - Returns a list of event handlers related to the specified IMSI.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json;charset=UTF-8, example=[ {
  "targetOperatorId" : "targetOperatorId",
  "actionConfigList" : [ {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  }, {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  } ],
  "handlerId" : "handlerId",
  "targetImsi" : "targetImsi",
  "name" : "name",
  "description" : "description",
  "targetGroupId" : "targetGroupId",
  "targetTag" : {
    "location" : "tokyo"
  },
  "ruleConfig" : {
    "type" : "DailyTrafficRule",
    "properties" : {
      "inactiveTimeoutDateConst" : "IMMEDIATELY",
      "targetSpeedClass" : "s1.minimum",
      "limitTotalTrafficMegaByte" : 0,
      "targetStatus" : "ready"
    }
  },
  "status" : "inactive"
}, {
  "targetOperatorId" : "targetOperatorId",
  "actionConfigList" : [ {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  }, {
    "type" : "ChangeSpeedClassAction",
    "properties" : {
      "headers" : "{}",
      "functionName" : "functionName",
      "title" : "title",
      "message" : "message",
      "httpMethod" : "GET",
      "body" : "body",
      "url" : "url",
      "speedClass" : "s1.minimum",
      "secretAccessKey" : "secretAccessKey",
      "endpoint" : "endpoint",
      "accessKey" : "accessKey",
      "executionDateTimeConst" : "IMMEDIATELY",
      "to" : "to",
      "parameter5" : "parameter5",
      "parameter4" : "parameter4",
      "contentType" : "contentType",
      "parameter3" : "parameter3",
      "parameter2" : "parameter2",
      "parameter1" : "parameter1"
    }
  } ],
  "handlerId" : "handlerId",
  "targetImsi" : "targetImsi",
  "name" : "name",
  "description" : "description",
  "targetGroupId" : "targetGroupId",
  "targetTag" : {
    "location" : "tokyo"
  },
  "ruleConfig" : {
    "type" : "DailyTrafficRule",
    "properties" : {
      "inactiveTimeoutDateConst" : "IMMEDIATELY",
      "targetSpeedClass" : "s1.minimum",
      "limitTotalTrafficMegaByte" : 0,
      "targetStatus" : "ready"
    }
  },
  "status" : "inactive"
} ]}]
     
     - parameter imsi: (path) imsi 

     - returns: RequestBuilder<[EventHandlerModel]> 
     */
    open class func listEventHandlersBySubscriberWithRequestBuilder(imsi: String) -> RequestBuilder<[EventHandlerModel]> {
        var path = "/event_handlers/subscribers/{imsi}"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[EventHandlerModel]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Ignore Event Handler.
     
     - parameter imsi: (path) imsi 
     - parameter handlerId: (path) handler_id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setIgnoreEventHandler(imsi: String, handlerId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        setIgnoreEventHandlerWithRequestBuilder(imsi: imsi, handlerId: handlerId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Ignore Event Handler.
     - POST /event_handlers/{handler_id}/subscribers/{imsi}/ignore
     - Adds a setting for ignoring the specified event handler of the specified IMSI.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter imsi: (path) imsi 
     - parameter handlerId: (path) handler_id 

     - returns: RequestBuilder<Void> 
     */
    open class func setIgnoreEventHandlerWithRequestBuilder(imsi: String, handlerId: String) -> RequestBuilder<Void> {
        var path = "/event_handlers/{handler_id}/subscribers/{imsi}/ignore"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{handler_id}", with: "\(handlerId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Event Handler.
     
     - parameter handlerId: (path) handler ID 
     - parameter eventHandlerModel: (body) event handler settings 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateEventHandler(handlerId: String, eventHandlerModel: UpdateEventHandlerRequest, completion: @escaping ((_ error: Error?) -> Void)) {
        updateEventHandlerWithRequestBuilder(handlerId: handlerId, eventHandlerModel: eventHandlerModel).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update Event Handler.
     - PUT /event_handlers/{handler_id}
     - Updates the specified event handler. Please see also https://dev.soracom.io/en/docs/event_handler/
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter handlerId: (path) handler ID 
     - parameter eventHandlerModel: (body) event handler settings 

     - returns: RequestBuilder<Void> 
     */
    open class func updateEventHandlerWithRequestBuilder(handlerId: String, eventHandlerModel: UpdateEventHandlerRequest) -> RequestBuilder<Void> {
        var path = "/event_handlers/{handler_id}"
        path = path.replacingOccurrences(of: "{handler_id}", with: "\(handlerId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eventHandlerModel)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
