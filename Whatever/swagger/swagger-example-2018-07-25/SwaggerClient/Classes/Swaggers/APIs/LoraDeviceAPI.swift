//
// LoraDeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LoraDeviceAPI {
    /**
     Delete LoRa device Tag.
     
     - parameter deviceId: (path) device ID of the target LoRa device. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLoraDeviceTag(deviceId: String, tagName: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteLoraDeviceTagWithRequestBuilder(deviceId: deviceId, tagName: tagName).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete LoRa device Tag.
     - DELETE /lora_devices/{device_id}/tags/{tag_name}
     - Deletes a tag from the specified LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) device ID of the target LoRa device. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLoraDeviceTagWithRequestBuilder(deviceId: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/lora_devices/{device_id}/tags/{tag_name}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag_name}", with: "\(tagName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable Termination of LoRa device.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableTerminationOnLoraDevice(deviceId: String, completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        disableTerminationOnLoraDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Disable Termination of LoRa device.
     - POST /lora_devices/{device_id}/disable_termination
     - Disables termination of specified LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func disableTerminationOnLoraDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}/disable_termination"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable Termination of LoRa device.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableTerminationOnLoraDevice(deviceId: String, completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        enableTerminationOnLoraDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Enable Termination of LoRa device.
     - POST /lora_devices/{device_id}/enable_termination
     - Enables termination of specified LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func enableTerminationOnLoraDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}/enable_termination"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getDataFromLoraDevice: String { 
        case desc = "desc"
        case asc = "asc"
    }

    /**
     Get data sent from a LoRa device.
     
     - parameter deviceId: (path) Device ID of the target subscriber that generated data entries. 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataFromLoraDevice(deviceId: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataFromLoraDevice? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [DataEntry]?,_ error: Error?) -> Void)) {
        getDataFromLoraDeviceWithRequestBuilder(deviceId: deviceId, from: from, to: to, sort: sort, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get data sent from a LoRa device.
     - GET /lora_devices/{device_id}/data
     - Returns a list of data entries sent from a LoRa device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
}, {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
} ]}]
     
     - parameter deviceId: (path) Device ID of the target subscriber that generated data entries. 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)

     - returns: RequestBuilder<[DataEntry]> 
     */
    open class func getDataFromLoraDeviceWithRequestBuilder(deviceId: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataFromLoraDevice? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[DataEntry]> {
        var path = "/lora_devices/{device_id}/data"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "sort": sort?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[DataEntry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get LoRa device.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLoraDevice(deviceId: String, completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        getLoraDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get LoRa device.
     - GET /lora_devices/{device_id}
     - Returns information about the specified LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func getLoraDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listLoraDevices: String { 
        case exact = "exact"
        case _prefix = "prefix"
    }

    /**
     List LoRa devices.
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of LoRa devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listLoraDevices(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listLoraDevices? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [LoraDevice]?,_ error: Error?) -> Void)) {
        listLoraDevicesWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List LoRa devices.
     - GET /lora_devices
     - Returns a list of LoRa devices that match certain criteria. If the total number of LoRa devices does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}, {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
} ]}]
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of LoRa devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)

     - returns: RequestBuilder<[LoraDevice]> 
     */
    open class func listLoraDevicesWithRequestBuilder(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listLoraDevices? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[LoraDevice]> {
        let path = "/lora_devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag_name": tagName, 
            "tag_value": tagValue, 
            "tag_value_match_mode": tagValueMatchMode?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[LoraDevice]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Bulk Insert or Update LoRa device Tags.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter tags: (body) Array of tags to be inserted/updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLoraDeviceTags(deviceId: String, tags: [TagUpdateRequest], completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        putLoraDeviceTagsWithRequestBuilder(deviceId: deviceId, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Bulk Insert or Update LoRa device Tags.
     - PUT /lora_devices/{device_id}/tags
     - Inserts/updates tags for the specified LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter tags: (body) Array of tags to be inserted/updated. 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func putLoraDeviceTagsWithRequestBuilder(deviceId: String, tags: [TagUpdateRequest]) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}/tags"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tags)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register LoRa device.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter loraDevice: (body) LoRa device 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerLoraDevice(deviceId: String, loraDevice: RegisterLoraDeviceRequest, completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        registerLoraDeviceWithRequestBuilder(deviceId: deviceId, loraDevice: loraDevice).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Register LoRa device.
     - POST /lora_devices/{device_id}/register
     - Registers a LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter loraDevice: (body) LoRa device 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func registerLoraDeviceWithRequestBuilder(deviceId: String, loraDevice: RegisterLoraDeviceRequest) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}/register"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loraDevice)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Send data to a LoRa device.
     
     - parameter deviceId: (path) ID of the recipient device. 
     - parameter data: (body) Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string). The number of characters must be even. fPort MUST be equal to or greater than 0. 0 is used for the control plane and 1 or greater values should be used in general. It defaults to 2 to avoid the issues of some devices from some vendors and all invalid values that can not be parsed fallback to 2. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendDataToLoraDevice(deviceId: String, data: LoraData, completion: @escaping ((_ error: Error?) -> Void)) {
        sendDataToLoraDeviceWithRequestBuilder(deviceId: deviceId, data: data).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Send data to a LoRa device.
     - POST /lora_devices/{device_id}/data
     - Sends data to the specified LoRa device. The data is sent to the LoRa network server, to be sent out to the device using the next available slot. If another message destined for the same LoRa device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) ID of the recipient device. 
     - parameter data: (body) Binary data encoded as a hexadecimal string. Maximum length of original binary data is 11 octets (22 characters when encoded as a hexadecimal string). The number of characters must be even. fPort MUST be equal to or greater than 0. 0 is used for the control plane and 1 or greater values should be used in general. It defaults to 2 to avoid the issues of some devices from some vendors and all invalid values that can not be parsed fallback to 2. 

     - returns: RequestBuilder<Void> 
     */
    open class func sendDataToLoraDeviceWithRequestBuilder(deviceId: String, data: LoraData) -> RequestBuilder<Void> {
        var path = "/lora_devices/{device_id}/data"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set Group of LoRa device.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter group: (body) Group (may include ID only). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setLoraDeviceGroup(deviceId: String, group: Group, completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        setLoraDeviceGroupWithRequestBuilder(deviceId: deviceId, group: group).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Set Group of LoRa device.
     - POST /lora_devices/{device_id}/set_group
     - Sets or overwrites a group for the specified LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter group: (body) Group (may include ID only). 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func setLoraDeviceGroupWithRequestBuilder(deviceId: String, group: Group) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}/set_group"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: group)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Terminate LoRa device.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func terminateLoraDevice(deviceId: String, completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        terminateLoraDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Terminate LoRa device.
     - POST /lora_devices/{device_id}/terminate
     - Terminates the specified LoRa device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func terminateLoraDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}/terminate"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unset Group of LoRa device.
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetLoraDeviceGroup(deviceId: String, completion: @escaping ((_ data: LoraDevice?,_ error: Error?) -> Void)) {
        unsetLoraDeviceGroupWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Unset Group of LoRa device.
     - POST /lora_devices/{device_id}/unset_group
     - Removes the group configuration from the specified LoRa device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target LoRa device. 

     - returns: RequestBuilder<LoraDevice> 
     */
    open class func unsetLoraDeviceGroupWithRequestBuilder(deviceId: String) -> RequestBuilder<LoraDevice> {
        var path = "/lora_devices/{device_id}/unset_group"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
