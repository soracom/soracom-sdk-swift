//
// LoraGatewayAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LoraGatewayAPI {
    /**
     Delete LoRa gateway tag.
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter tagName: (path) Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLoraGatewayTag(gatewayId: String, tagName: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteLoraGatewayTagWithRequestBuilder(gatewayId: gatewayId, tagName: tagName).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete LoRa gateway tag.
     - DELETE /lora_gateways/{gateway_id}/tags/{tag_name}
     - Deletes a tag from the specified LoRa gateway.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter tagName: (path) Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLoraGatewayTagWithRequestBuilder(gatewayId: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/lora_gateways/{gateway_id}/tags/{tag_name}"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag_name}", with: "\(tagName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable Termination of LoRa gateway.
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableTerminationOnLoraGateway(gatewayId: String, completion: @escaping ((_ data: LoraGateway?,_ error: Error?) -> Void)) {
        disableTerminationOnLoraGatewayWithRequestBuilder(gatewayId: gatewayId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Disable Termination of LoRa gateway.
     - POST /lora_gateways/{gateway_id}/disable_termination
     - Disables termination of specified LoRa gateway.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 

     - returns: RequestBuilder<LoraGateway> 
     */
    open class func disableTerminationOnLoraGatewayWithRequestBuilder(gatewayId: String) -> RequestBuilder<LoraGateway> {
        var path = "/lora_gateways/{gateway_id}/disable_termination"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable Termination of LoRa gateway.
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableTerminationOnLoraGateway(gatewayId: String, completion: @escaping ((_ data: LoraGateway?,_ error: Error?) -> Void)) {
        enableTerminationOnLoraGatewayWithRequestBuilder(gatewayId: gatewayId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Enable Termination of LoRa gateway.
     - POST /lora_gateways/{gateway_id}/enable_termination
     - Enables termination of specified LoRa gateway.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 

     - returns: RequestBuilder<LoraGateway> 
     */
    open class func enableTerminationOnLoraGatewayWithRequestBuilder(gatewayId: String) -> RequestBuilder<LoraGateway> {
        var path = "/lora_gateways/{gateway_id}/enable_termination"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get LoRa gateway.
     
     - parameter gatewayId: (path) Gateway ID of the target LoRa gateway. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLoraGateway(gatewayId: String, completion: @escaping ((_ data: LoraGateway?,_ error: Error?) -> Void)) {
        getLoraGatewayWithRequestBuilder(gatewayId: gatewayId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get LoRa gateway.
     - GET /lora_gateways/{gateway_id}
     - Returns information about the specified LoRa gateway.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter gatewayId: (path) Gateway ID of the target LoRa gateway. 

     - returns: RequestBuilder<LoraGateway> 
     */
    open class func getLoraGatewayWithRequestBuilder(gatewayId: String) -> RequestBuilder<LoraGateway> {
        var path = "/lora_gateways/{gateway_id}"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listLoraGateways: String { 
        case exact = "exact"
        case _prefix = "prefix"
    }

    /**
     List LoRa Gateways.
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of LoRa devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listLoraGateways(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listLoraGateways? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [LoraGateway]?,_ error: Error?) -> Void)) {
        listLoraGatewaysWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List LoRa Gateways.
     - GET /lora_gateways
     - Returns a list of LoRa gateways that match certain criteria. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}, {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
} ]}]
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of LoRa devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)

     - returns: RequestBuilder<[LoraGateway]> 
     */
    open class func listLoraGatewaysWithRequestBuilder(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listLoraGateways? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[LoraGateway]> {
        let path = "/lora_gateways"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag_name": tagName, 
            "tag_value": tagValue, 
            "tag_value_match_mode": tagValueMatchMode?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[LoraGateway]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Bulk Insert or Update LoRa gateway Tags.
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter tags: (body) Array of tags to be inserted/updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLoraGatewayTags(gatewayId: String, tags: [TagUpdateRequest], completion: @escaping ((_ data: LoraGateway?,_ error: Error?) -> Void)) {
        putLoraGatewayTagsWithRequestBuilder(gatewayId: gatewayId, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Bulk Insert or Update LoRa gateway Tags.
     - PUT /lora_gateways/{gateway_id}/tags
     - Inserts/updates tags for the specified LoRa gateway.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter tags: (body) Array of tags to be inserted/updated. 

     - returns: RequestBuilder<LoraGateway> 
     */
    open class func putLoraGatewayTagsWithRequestBuilder(gatewayId: String, tags: [TagUpdateRequest]) -> RequestBuilder<LoraGateway> {
        var path = "/lora_gateways/{gateway_id}/tags"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tags)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set Network Set ID of LoRa gateway.
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter nsId: (body) LoRa Network Set ID. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setLoraNetworkSet(gatewayId: String, nsId: SetNetworkSetRequest? = nil, completion: @escaping ((_ data: LoraGateway?,_ error: Error?) -> Void)) {
        setLoraNetworkSetWithRequestBuilder(gatewayId: gatewayId, nsId: nsId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Set Network Set ID of LoRa gateway.
     - POST /lora_gateways/{gateway_id}/set_network_set
     - Sets or overwrites network set ID for the specified LoRa gateway.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter nsId: (body) LoRa Network Set ID. (optional)

     - returns: RequestBuilder<LoraGateway> 
     */
    open class func setLoraNetworkSetWithRequestBuilder(gatewayId: String, nsId: SetNetworkSetRequest? = nil) -> RequestBuilder<LoraGateway> {
        var path = "/lora_gateways/{gateway_id}/set_network_set"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: nsId)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Terminate LoRa gateway.
     
     - parameter gatewayId: (path) Device ID of the target LoRa gateway. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func terminateLoraGateway(gatewayId: String, completion: @escaping ((_ data: LoraGateway?,_ error: Error?) -> Void)) {
        terminateLoraGatewayWithRequestBuilder(gatewayId: gatewayId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Terminate LoRa gateway.
     - POST /lora_gateways/{gateway_id}/terminate
     - Terminates the specified LoRa gateway
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter gatewayId: (path) Device ID of the target LoRa gateway. 

     - returns: RequestBuilder<LoraGateway> 
     */
    open class func terminateLoraGatewayWithRequestBuilder(gatewayId: String) -> RequestBuilder<LoraGateway> {
        var path = "/lora_gateways/{gateway_id}/terminate"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unset Network Set ID of LoRa gateway.
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetLoraNetworkSet(gatewayId: String, completion: @escaping ((_ data: LoraGateway?,_ error: Error?) -> Void)) {
        unsetLoraNetworkSetWithRequestBuilder(gatewayId: gatewayId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Unset Network Set ID of LoRa gateway.
     - POST /lora_gateways/{gateway_id}/unset_network_set
     - Unset network set ID of the specified LoRa gateway.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter gatewayId: (path) ID of the target LoRa gateway. 

     - returns: RequestBuilder<LoraGateway> 
     */
    open class func unsetLoraNetworkSetWithRequestBuilder(gatewayId: String) -> RequestBuilder<LoraGateway> {
        var path = "/lora_gateways/{gateway_id}/unset_network_set"
        path = path.replacingOccurrences(of: "{gateway_id}", with: "\(gatewayId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
