//
// LoraNetworkSetAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LoraNetworkSetAPI {
    /**
     Adds permission to a LoRa network set.
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter operatorId: (body) ID of the operator to be added to the list of allowed operators. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addPermissionToLoraNetworkSet(nsId: String, operatorId: UpdatePermissionRequest, completion: @escaping ((_ data: LoraNetworkSet?,_ error: Error?) -> Void)) {
        addPermissionToLoraNetworkSetWithRequestBuilder(nsId: nsId, operatorId: operatorId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Adds permission to a LoRa network set.
     - POST /lora_network_sets/{ns_id}/add_permission
     - Adds permission to allow another operator to use the network set.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "allowedOperators" : [ "allowedOperators", "allowedOperators" ],
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "operatorId" : "operatorId",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter operatorId: (body) ID of the operator to be added to the list of allowed operators. 

     - returns: RequestBuilder<LoraNetworkSet> 
     */
    open class func addPermissionToLoraNetworkSetWithRequestBuilder(nsId: String, operatorId: UpdatePermissionRequest) -> RequestBuilder<LoraNetworkSet> {
        var path = "/lora_network_sets/{ns_id}/add_permission"
        path = path.replacingOccurrences(of: "{ns_id}", with: "\(nsId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: operatorId)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraNetworkSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a LoRa network set.
     
     - parameter loraNetworkSet: (body) Additional metadata such as tags for a LoRa network set to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createLoraNetworkSet(loraNetworkSet: LoraNetworkSet, completion: @escaping ((_ data: LoraNetworkSet?,_ error: Error?) -> Void)) {
        createLoraNetworkSetWithRequestBuilder(loraNetworkSet: loraNetworkSet).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a LoRa network set.
     - POST /lora_network_sets
     - Creates a specified LoRa network set
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "allowedOperators" : [ "allowedOperators", "allowedOperators" ],
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "operatorId" : "operatorId",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter loraNetworkSet: (body) Additional metadata such as tags for a LoRa network set to create. 

     - returns: RequestBuilder<LoraNetworkSet> 
     */
    open class func createLoraNetworkSetWithRequestBuilder(loraNetworkSet: LoraNetworkSet) -> RequestBuilder<LoraNetworkSet> {
        let path = "/lora_network_sets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loraNetworkSet)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraNetworkSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete LoRa network set.
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLoraNetworkSet(nsId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteLoraNetworkSetWithRequestBuilder(nsId: nsId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete LoRa network set.
     - DELETE /lora_network_sets/{ns_id}
     - Deletes the specified LoRa network set
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter nsId: (path) ID of the target LoRa network set. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLoraNetworkSetWithRequestBuilder(nsId: String) -> RequestBuilder<Void> {
        var path = "/lora_network_sets/{ns_id}"
        path = path.replacingOccurrences(of: "{ns_id}", with: "\(nsId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete LoRa network set tag.
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter tagName: (path) Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteLoraNetworkSetTag(nsId: String, tagName: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteLoraNetworkSetTagWithRequestBuilder(nsId: nsId, tagName: tagName).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete LoRa network set tag.
     - DELETE /lora_network_sets/{ns_id}/tags/{tag_name}
     - Deletes a tag from the specified LoRa network set.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter tagName: (path) Name of tag to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteLoraNetworkSetTagWithRequestBuilder(nsId: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/lora_network_sets/{ns_id}/tags/{tag_name}"
        path = path.replacingOccurrences(of: "{ns_id}", with: "\(nsId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag_name}", with: "\(tagName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get LoRa network set.
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLoraNetworkSet(nsId: String, completion: @escaping ((_ data: LoraNetworkSet?,_ error: Error?) -> Void)) {
        getLoraNetworkSetWithRequestBuilder(nsId: nsId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get LoRa network set.
     - GET /lora_network_sets/{ns_id}
     - Returns information about the specified LoRa network set.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "allowedOperators" : [ "allowedOperators", "allowedOperators" ],
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "operatorId" : "operatorId",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter nsId: (path) ID of the target LoRa network set. 

     - returns: RequestBuilder<LoraNetworkSet> 
     */
    open class func getLoraNetworkSetWithRequestBuilder(nsId: String) -> RequestBuilder<LoraNetworkSet> {
        var path = "/lora_network_sets/{ns_id}"
        path = path.replacingOccurrences(of: "{ns_id}", with: "\(nsId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraNetworkSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List LoRa Gateways in a Network Set.
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter limit: (query) Maximum number of LoRa gateways to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGatewaysInLoraNetworkSet(nsId: String, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [LoraGateway]?,_ error: Error?) -> Void)) {
        listGatewaysInLoraNetworkSetWithRequestBuilder(nsId: nsId, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List LoRa Gateways in a Network Set.
     - GET /lora_network_sets/{ns_id}/gateways
     - Returns a list of LoRa gateways that belong to the specified network set. If the total number of LoRa gateways does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}, {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "address" : "address",
  "owned" : false,
  "terminationEnabled" : false,
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "online" : false,
  "operatorId" : "operatorId",
  "gatewayId" : "gatewayId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
} ]}]
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter limit: (query) Maximum number of LoRa gateways to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The ID of the last gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)

     - returns: RequestBuilder<[LoraGateway]> 
     */
    open class func listGatewaysInLoraNetworkSetWithRequestBuilder(nsId: String, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[LoraGateway]> {
        var path = "/lora_network_sets/{ns_id}/gateways"
        path = path.replacingOccurrences(of: "{ns_id}", with: "\(nsId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[LoraGateway]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listLoraNetworkSets: String { 
        case exact = "exact"
        case _prefix = "prefix"
    }

    /**
     List LoRa Network Sets.
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of LoRa devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listLoraNetworkSets(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listLoraNetworkSets? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [LoraNetworkSet]?,_ error: Error?) -> Void)) {
        listLoraNetworkSetsWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List LoRa Network Sets.
     - GET /lora_network_sets
     - Returns a list of LoRa network sets that match certain criteria. If the total number of LoRa network sets does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "allowedOperators" : [ "allowedOperators", "allowedOperators" ],
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "operatorId" : "operatorId",
  "tags" : {
    "key" : "tags"
  }
}, {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "allowedOperators" : [ "allowedOperators", "allowedOperators" ],
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "operatorId" : "operatorId",
  "tags" : {
    "key" : "tags"
  }
} ]}]
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of LoRa devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The ID of the last network set retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)

     - returns: RequestBuilder<[LoraNetworkSet]> 
     */
    open class func listLoraNetworkSetsWithRequestBuilder(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listLoraNetworkSets? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[LoraNetworkSet]> {
        let path = "/lora_network_sets"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag_name": tagName, 
            "tag_value": tagValue, 
            "tag_value_match_mode": tagValueMatchMode?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[LoraNetworkSet]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Bulk Insert or Update LoRa network set tags.
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter tags: (body) Array of tags to be inserted/updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putLoraNetworkSetTags(nsId: String, tags: [TagUpdateRequest], completion: @escaping ((_ data: LoraNetworkSet?,_ error: Error?) -> Void)) {
        putLoraNetworkSetTagsWithRequestBuilder(nsId: nsId, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Bulk Insert or Update LoRa network set tags.
     - PUT /lora_network_sets/{ns_id}/tags
     - Inserts/updates tags for the specified LoRa network set.
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "allowedOperators" : [ "allowedOperators", "allowedOperators" ],
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "operatorId" : "operatorId",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter tags: (body) Array of tags to be inserted/updated. 

     - returns: RequestBuilder<LoraNetworkSet> 
     */
    open class func putLoraNetworkSetTagsWithRequestBuilder(nsId: String, tags: [TagUpdateRequest]) -> RequestBuilder<LoraNetworkSet> {
        var path = "/lora_network_sets/{ns_id}/tags"
        path = path.replacingOccurrences(of: "{ns_id}", with: "\(nsId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tags)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraNetworkSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Revokes a permission from a LoRa network set.
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter operatorId: (body) ID of the operator to be added to the list of allowed operators. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokePermissionFromLoraNetworkSet(nsId: String, operatorId: UpdatePermissionRequest, completion: @escaping ((_ data: LoraNetworkSet?,_ error: Error?) -> Void)) {
        revokePermissionFromLoraNetworkSetWithRequestBuilder(nsId: nsId, operatorId: operatorId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Revokes a permission from a LoRa network set.
     - POST /lora_network_sets/{ns_id}/revoke_permission
     - Revokes a permission and removes an operator from the list of allowed operators in the network set.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "allowedOperators" : [ "allowedOperators", "allowedOperators" ],
  "networkSetId" : "networkSetId",
  "createdTime" : "2000-01-23T04:56:07.000+00:00",
  "operatorId" : "operatorId",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter nsId: (path) ID of the target LoRa network set. 
     - parameter operatorId: (body) ID of the operator to be added to the list of allowed operators. 

     - returns: RequestBuilder<LoraNetworkSet> 
     */
    open class func revokePermissionFromLoraNetworkSetWithRequestBuilder(nsId: String, operatorId: UpdatePermissionRequest) -> RequestBuilder<LoraNetworkSet> {
        var path = "/lora_network_sets/{ns_id}/revoke_permission"
        path = path.replacingOccurrences(of: "{ns_id}", with: "\(nsId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: operatorId)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<LoraNetworkSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
