//
// QueryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class QueryAPI {
    /**
     * enum for parameter searchType
     */
    public enum SearchType_searchSubscribers: String { 
        case and = "and"
        case or = "or"
    }

    /**
     Search subscribers by query terms
     
     - parameter name: (query) Name to search (optional)
     - parameter group: (query) Group name to search (optional)
     - parameter imsi: (query) IMSI to search (optional)
     - parameter msisdn: (query) MSISDN to search (optional)
     - parameter iccid: (query) ICCID to search (optional)
     - parameter serialNumber: (query) Serial number to search (optional)
     - parameter tag: (query) String of tag values to search (optional)
     - parameter limit: (query) The maximum number of item to retrieve (optional, default to 10)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)
     - parameter searchType: (query) Type of the search (&#39;AND searching&#39; or &#39;OR searching&#39;) (optional, default to and)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchSubscribers(name: [String]? = nil, group: [String]? = nil, imsi: [String]? = nil, msisdn: [String]? = nil, iccid: [String]? = nil, serialNumber: [String]? = nil, tag: [String]? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, searchType: SearchType_searchSubscribers? = nil, completion: @escaping ((_ data: [Subscriber]?,_ error: Error?) -> Void)) {
        searchSubscribersWithRequestBuilder(name: name, group: group, imsi: imsi, msisdn: msisdn, iccid: iccid, serialNumber: serialNumber, tag: tag, limit: limit, lastEvaluatedKey: lastEvaluatedKey, searchType: searchType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Search subscribers by query terms
     - GET /query/subscribers
     - Search subscibers by query terms. It returns partial match results.  When this API permission is allowed, it grants the authority to search and retrieve all SIMs that includes group information.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json;charset=UTF-8, example=[ {
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}, {
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
} ]}]
     
     - parameter name: (query) Name to search (optional)
     - parameter group: (query) Group name to search (optional)
     - parameter imsi: (query) IMSI to search (optional)
     - parameter msisdn: (query) MSISDN to search (optional)
     - parameter iccid: (query) ICCID to search (optional)
     - parameter serialNumber: (query) Serial number to search (optional)
     - parameter tag: (query) String of tag values to search (optional)
     - parameter limit: (query) The maximum number of item to retrieve (optional, default to 10)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)
     - parameter searchType: (query) Type of the search (&#39;AND searching&#39; or &#39;OR searching&#39;) (optional, default to and)

     - returns: RequestBuilder<[Subscriber]> 
     */
    open class func searchSubscribersWithRequestBuilder(name: [String]? = nil, group: [String]? = nil, imsi: [String]? = nil, msisdn: [String]? = nil, iccid: [String]? = nil, serialNumber: [String]? = nil, tag: [String]? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, searchType: SearchType_searchSubscribers? = nil) -> RequestBuilder<[Subscriber]> {
        let path = "/query/subscribers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "name": name, 
            "group": group, 
            "imsi": imsi, 
            "msisdn": msisdn, 
            "iccid": iccid, 
            "serial_number": serialNumber, 
            "tag": tag, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey, 
            "search_type": searchType?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[Subscriber]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
