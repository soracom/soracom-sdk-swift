//
// SigfoxDeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SigfoxDeviceAPI {
    /**
     Delete Sigfox device Tag.
     
     - parameter deviceId: (path) device ID of the target Sigfox device. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSigfoxDeviceTag(deviceId: String, tagName: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSigfoxDeviceTagWithRequestBuilder(deviceId: deviceId, tagName: tagName).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete Sigfox device Tag.
     - DELETE /sigfox_devices/{device_id}/tags/{tag_name}
     - Deletes a tag from the specified Sigfox device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) device ID of the target Sigfox device. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSigfoxDeviceTagWithRequestBuilder(deviceId: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/sigfox_devices/{device_id}/tags/{tag_name}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag_name}", with: "\(tagName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable Termination of Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableTerminationOnSigfoxDevice(deviceId: String, completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        disableTerminationOnSigfoxDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Disable Termination of Sigfox device.
     - POST /sigfox_devices/{device_id}/disable_termination
     - Disables termination of specified Sigfox device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func disableTerminationOnSigfoxDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}/disable_termination"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable Termination of Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableTerminationOnSigfoxDevice(deviceId: String, completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        enableTerminationOnSigfoxDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Enable Termination of Sigfox device.
     - POST /sigfox_devices/{device_id}/enable_termination
     - Enables termination of specified Sigfox device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func enableTerminationOnSigfoxDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}/enable_termination"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getDataFromSigfoxDevice: String { 
        case desc = "desc"
        case asc = "asc"
    }

    /**
     Get data sent from a Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target subscriber that generated data entries. 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataFromSigfoxDevice(deviceId: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataFromSigfoxDevice? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [DataEntry]?,_ error: Error?) -> Void)) {
        getDataFromSigfoxDeviceWithRequestBuilder(deviceId: deviceId, from: from, to: to, sort: sort, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get data sent from a Sigfox device.
     - GET /sigfox_devices/{device_id}/data
     - Returns a list of data entries sent from a Sigfox device that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
}, {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
} ]}]
     
     - parameter deviceId: (path) Device ID of the target subscriber that generated data entries. 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)

     - returns: RequestBuilder<[DataEntry]> 
     */
    open class func getDataFromSigfoxDeviceWithRequestBuilder(deviceId: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataFromSigfoxDevice? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[DataEntry]> {
        var path = "/sigfox_devices/{device_id}/data"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "sort": sort?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[DataEntry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSigfoxDevice(deviceId: String, completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        getSigfoxDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Sigfox device.
     - GET /sigfox_devices/{device_id}
     - Returns information about the specified Sigfox device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func getSigfoxDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listSigfoxDevices: String { 
        case exact = "exact"
        case _prefix = "prefix"
    }

    /**
     List Sigfox devices.
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of Sigfox devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSigfoxDevices(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listSigfoxDevices? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [SigfoxDevice]?,_ error: Error?) -> Void)) {
        listSigfoxDevicesWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List Sigfox devices.
     - GET /sigfox_devices
     - Returns a list of Sigfox devices that match certain criteria. If the total number of Sigfox devices does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}, {
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
} ]}]
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of Sigfox devices to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The device ID of the last device retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward. (optional)

     - returns: RequestBuilder<[SigfoxDevice]> 
     */
    open class func listSigfoxDevicesWithRequestBuilder(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listSigfoxDevices? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[SigfoxDevice]> {
        let path = "/sigfox_devices"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag_name": tagName, 
            "tag_value": tagValue, 
            "tag_value_match_mode": tagValueMatchMode?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[SigfoxDevice]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Bulk Insert or Update Sigfox device Tags.
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter tags: (body) Array of tags to be inserted/updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSigfoxDeviceTags(deviceId: String, tags: [TagUpdateRequest], completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        putSigfoxDeviceTagsWithRequestBuilder(deviceId: deviceId, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Bulk Insert or Update Sigfox device Tags.
     - PUT /sigfox_devices/{device_id}/tags
     - Inserts/updates tags for the specified Sigfox device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter tags: (body) Array of tags to be inserted/updated. 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func putSigfoxDeviceTagsWithRequestBuilder(deviceId: String, tags: [TagUpdateRequest]) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}/tags"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tags)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register a Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target sigfox device to register 
     - parameter registrationRequest: (body) Sigfox device registration request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerSigfoxDevice(deviceId: String, registrationRequest: SigfoxRegistrationRequest, completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        registerSigfoxDeviceWithRequestBuilder(deviceId: deviceId, registrationRequest: registrationRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Register a Sigfox device.
     - POST /sigfox_devices/{device_id}/register
     - Registers a Sigfox device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target sigfox device to register 
     - parameter registrationRequest: (body) Sigfox device registration request 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func registerSigfoxDeviceWithRequestBuilder(deviceId: String, registrationRequest: SigfoxRegistrationRequest) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}/register"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registrationRequest)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Send data to a Sigfox device.
     
     - parameter deviceId: (path) ID of the recipient device. 
     - parameter data: (body) Binary data encoded as a hexadecimal string. Length of original binary data must be 8 octets (16 characters when encoded as a hexadecimal string). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendDataToSigfoxDevice(deviceId: String, data: SigfoxData, completion: @escaping ((_ error: Error?) -> Void)) {
        sendDataToSigfoxDeviceWithRequestBuilder(deviceId: deviceId, data: data).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Send data to a Sigfox device.
     - POST /sigfox_devices/{device_id}/data
     - Sends data to the specified Sigfox device. The data will be stored until the device sends a next uplink message. If another message destined for the same Sigfox device ID is already waiting to be sent, the existing message will be discarded, and the new message will be sent instead.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter deviceId: (path) ID of the recipient device. 
     - parameter data: (body) Binary data encoded as a hexadecimal string. Length of original binary data must be 8 octets (16 characters when encoded as a hexadecimal string). 

     - returns: RequestBuilder<Void> 
     */
    open class func sendDataToSigfoxDeviceWithRequestBuilder(deviceId: String, data: SigfoxData) -> RequestBuilder<Void> {
        var path = "/sigfox_devices/{device_id}/data"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: data)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set Group of Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter group: (body) Group (may include ID only). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSigfoxDeviceGroup(deviceId: String, group: Group, completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        setSigfoxDeviceGroupWithRequestBuilder(deviceId: deviceId, group: group).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Set Group of Sigfox device.
     - POST /sigfox_devices/{device_id}/set_group
     - Sets or overwrites a group for the specified Sigfox device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter group: (body) Group (may include ID only). 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func setSigfoxDeviceGroupWithRequestBuilder(deviceId: String, group: Group) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}/set_group"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: group)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Terminate Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func terminateSigfoxDevice(deviceId: String, completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        terminateSigfoxDeviceWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Terminate Sigfox device.
     - POST /sigfox_devices/{device_id}/terminate
     - Terminates the specified Sigfox device
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func terminateSigfoxDeviceWithRequestBuilder(deviceId: String) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}/terminate"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unset Group of Sigfox device.
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetSigfoxDeviceGroup(deviceId: String, completion: @escaping ((_ data: SigfoxDevice?,_ error: Error?) -> Void)) {
        unsetSigfoxDeviceGroupWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Unset Group of Sigfox device.
     - POST /sigfox_devices/{device_id}/unset_group
     - Removes the group configuration from the specified Sigfox device.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : "2000-01-23T04:56:07.000+00:00",
  "lastSeen" : {
    "rssi" : 6,
    "snr" : 0,
    "time" : "2000-01-23T04:56:07.000+00:00"
  },
  "device_id" : "device_id",
  "groupId" : "groupId",
  "terminationEnabled" : false,
  "operatorId" : "operatorId",
  "status" : "active",
  "tags" : {
    "key" : "tags"
  }
}}]
     
     - parameter deviceId: (path) Device ID of the target Sigfox device. 

     - returns: RequestBuilder<SigfoxDevice> 
     */
    open class func unsetSigfoxDeviceGroupWithRequestBuilder(deviceId: String) -> RequestBuilder<SigfoxDevice> {
        var path = "/sigfox_devices/{device_id}/unset_group"
        path = path.replacingOccurrences(of: "{device_id}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigfoxDevice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
