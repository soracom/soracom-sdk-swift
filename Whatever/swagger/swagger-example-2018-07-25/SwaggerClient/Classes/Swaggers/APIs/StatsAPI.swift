//
// StatsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class StatsAPI {
    /**
     * enum for parameter exportMode
     */
    public enum ExportMode_exportAirStats: String { 
        case async = "async"
        case sync = "sync"
    }

    /**
     Export Air Usage Report of All Subscribers.
     
     - parameter operatorId: (path) operator_id 
     - parameter request: (body) export time period 
     - parameter exportMode: (query) export_mode (async, sync) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportAirStats(operatorId: String, request: ExportRequest, exportMode: ExportMode_exportAirStats? = nil, completion: @escaping ((_ data: FileExportResponse?,_ error: Error?) -> Void)) {
        exportAirStatsWithRequestBuilder(operatorId: operatorId, request: request, exportMode: exportMode).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Export Air Usage Report of All Subscribers.
     - POST /stats/air/operators/{operator_id}/export
     - Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "exportedFilePath" : "exportedFilePath",
  "exportedFileId" : "exportedFileId",
  "url" : "url"
}}]
     
     - parameter operatorId: (path) operator_id 
     - parameter request: (body) export time period 
     - parameter exportMode: (query) export_mode (async, sync) (optional)

     - returns: RequestBuilder<FileExportResponse> 
     */
    open class func exportAirStatsWithRequestBuilder(operatorId: String, request: ExportRequest, exportMode: ExportMode_exportAirStats? = nil) -> RequestBuilder<FileExportResponse> {
        var path = "/stats/air/operators/{operator_id}/export"
        path = path.replacingOccurrences(of: "{operator_id}", with: "\(operatorId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "export_mode": exportMode?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<FileExportResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter exportMode
     */
    public enum ExportMode_exportBeamStats: String { 
        case async = "async"
        case sync = "sync"
    }

    /**
     Export Beam Usage Report of All Subscribers.
     
     - parameter operatorId: (path) operator ID 
     - parameter request: (body) export time period 
     - parameter exportMode: (query) export_mode (async, sync) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportBeamStats(operatorId: String, request: ExportRequest, exportMode: ExportMode_exportBeamStats? = nil, completion: @escaping ((_ data: FileExportResponse?,_ error: Error?) -> Void)) {
        exportBeamStatsWithRequestBuilder(operatorId: operatorId, request: request, exportMode: exportMode).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Export Beam Usage Report of All Subscribers.
     - POST /stats/beam/operators/{operator_id}/export
     - Retrieves a file containing the usage report of all subscribers for the specified operator. The report data range is specified with from, to in unixtime. The report contains monthly data. The file output destination is AWS S3. The file output format is CSV.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "exportedFilePath" : "exportedFilePath",
  "exportedFileId" : "exportedFileId",
  "url" : "url"
}}]
     
     - parameter operatorId: (path) operator ID 
     - parameter request: (body) export time period 
     - parameter exportMode: (query) export_mode (async, sync) (optional)

     - returns: RequestBuilder<FileExportResponse> 
     */
    open class func exportBeamStatsWithRequestBuilder(operatorId: String, request: ExportRequest, exportMode: ExportMode_exportBeamStats? = nil) -> RequestBuilder<FileExportResponse> {
        var path = "/stats/beam/operators/{operator_id}/export"
        path = path.replacingOccurrences(of: "{operator_id}", with: "\(operatorId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "export_mode": exportMode?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<FileExportResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     * enum for parameter period
     */
    public enum Period_getAirStats: String { 
        case month = "month"
        case day = "day"
        case minutes = "minutes"
    }

    /**
     Get Air Usage Report of Subscriber.
     
     - parameter imsi: (path) imsi 
     - parameter from: (query) Start time in unixtime for the aggregate data. 
     - parameter to: (query) End time in unixtime for the aggregate data. 
     - parameter period: (query) Units of aggregate data. For minutes, the interval is around 5 minutes. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAirStats(imsi: String, from: Int, to: Int, period: Period_getAirStats, completion: @escaping ((_ data: [AirStatsResponse]?,_ error: Error?) -> Void)) {
        getAirStatsWithRequestBuilder(imsi: imsi, from: from, to: to, period: period).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Air Usage Report of Subscriber.
     - GET /stats/air/subscribers/{imsi}
     - Retrieves the usage report for the subscriber specified by the IMSI.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "date" : "date",
  "unixtime" : 5,
  "dataTrafficStatsMap" : {
    "key" : {
      "downloadPacketSizeTotal" : 6,
      "uploadByteSizeTotal" : 1,
      "uploadPacketSizeTotal" : 5,
      "downloadByteSizeTotal" : 0
    }
  }
}, {
  "date" : "date",
  "unixtime" : 5,
  "dataTrafficStatsMap" : {
    "key" : {
      "downloadPacketSizeTotal" : 6,
      "uploadByteSizeTotal" : 1,
      "uploadPacketSizeTotal" : 5,
      "downloadByteSizeTotal" : 0
    }
  }
} ]}]
     
     - parameter imsi: (path) imsi 
     - parameter from: (query) Start time in unixtime for the aggregate data. 
     - parameter to: (query) End time in unixtime for the aggregate data. 
     - parameter period: (query) Units of aggregate data. For minutes, the interval is around 5 minutes. 

     - returns: RequestBuilder<[AirStatsResponse]> 
     */
    open class func getAirStatsWithRequestBuilder(imsi: String, from: Int, to: Int, period: Period_getAirStats) -> RequestBuilder<[AirStatsResponse]> {
        var path = "/stats/air/subscribers/{imsi}"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON(), 
            "period": period.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[AirStatsResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter period
     */
    public enum Period_getBeamStats: String { 
        case month = "month"
        case day = "day"
        case minutes = "minutes"
    }

    /**
     Get Beam Usage Report of Subscriber.
     
     - parameter imsi: (path) imsi 
     - parameter from: (query) Start time in unixtime for the aggregate data. 
     - parameter to: (query) End time in unixtime for the aggregate data. 
     - parameter period: (query) Units of aggregate data. For minutes, the interval is around 5 minutes. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBeamStats(imsi: String, from: Int, to: Int, period: Period_getBeamStats, completion: @escaping ((_ data: [BeamStatsResponse]?,_ error: Error?) -> Void)) {
        getBeamStatsWithRequestBuilder(imsi: imsi, from: from, to: to, period: period).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Beam Usage Report of Subscriber.
     - GET /stats/beam/subscribers/{imsi}
     - Retrieves the Soracom Beam usage report for the subscriber specified by the IMSI.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "date" : "date",
  "unixtime" : 6,
  "beamStatsMap" : {
    "key" : {
      "count" : 0
    }
  }
}, {
  "date" : "date",
  "unixtime" : 6,
  "beamStatsMap" : {
    "key" : {
      "count" : 0
    }
  }
} ]}]
     
     - parameter imsi: (path) imsi 
     - parameter from: (query) Start time in unixtime for the aggregate data. 
     - parameter to: (query) End time in unixtime for the aggregate data. 
     - parameter period: (query) Units of aggregate data. For minutes, the interval is around 5 minutes. 

     - returns: RequestBuilder<[BeamStatsResponse]> 
     */
    open class func getBeamStatsWithRequestBuilder(imsi: String, from: Int, to: Int, period: Period_getBeamStats) -> RequestBuilder<[BeamStatsResponse]> {
        var path = "/stats/beam/subscribers/{imsi}"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "from": from.encodeToJSON(), 
            "to": to.encodeToJSON(), 
            "period": period.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[BeamStatsResponse]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
