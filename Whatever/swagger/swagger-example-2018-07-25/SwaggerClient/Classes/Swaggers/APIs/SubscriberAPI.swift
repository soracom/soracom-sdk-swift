//
// SubscriberAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SubscriberAPI {
    /**
     Activate Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activateSubscriber(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        activateSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Activate Subscriber.
     - POST /subscribers/{imsi}/activate
     - Activates status of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func activateSubscriberWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/activate"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deactivate Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateSubscriber(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        deactivateSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Deactivate Subscriber.
     - POST /subscribers/{imsi}/deactivate
     - Deactivates specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func deactivateSubscriberWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/deactivate"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Session
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSubscriberSession(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        deleteSubscriberSessionWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete Session
     - POST /subscribers/{imsi}/delete_session
     - Deletes session for the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func deleteSubscriberSessionWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/delete_session"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Subscriber Tag.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSubscriberTag(imsi: String, tagName: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSubscriberTagWithRequestBuilder(imsi: imsi, tagName: tagName).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete Subscriber Tag.
     - DELETE /subscribers/{imsi}/tags/{tag_name}
     - Deletes a tag from the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tagName: (path) Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().) 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSubscriberTagWithRequestBuilder(imsi: String, tagName: String) -> RequestBuilder<Void> {
        var path = "/subscribers/{imsi}/tags/{tag_name}"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{tag_name}", with: "\(tagName)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Subscribers Transfer Token.
     
     - parameter token: (path) token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSubscriberTransferToken(token: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSubscriberTransferTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete Subscribers Transfer Token.
     - DELETE /subscribers/transfer_token/{token}
     - Deletes the subscriber's inter-operator control transfer token, and cancels the control transfer.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter token: (path) token 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSubscriberTransferTokenWithRequestBuilder(token: String) -> RequestBuilder<Void> {
        var path = "/subscribers/transfer_token/{token}"
        path = path.replacingOccurrences(of: "{token}", with: "\(token)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Disable Termination of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableTermination(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        disableTerminationWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Disable Termination of Subscriber.
     - POST /subscribers/{imsi}/disable_termination
     - Disables termination of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func disableTerminationWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/disable_termination"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Enable Termination of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableTermination(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        enableTerminationWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Enable Termination of Subscriber.
     - POST /subscribers/{imsi}/enable_termination
     - Enables termination of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func enableTerminationWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/enable_termination"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getDataFromSubscriber: String { 
        case desc = "desc"
        case asc = "asc"
    }

    /**
     Get data sent from a subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber that generated data entries. 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataFromSubscriber(imsi: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataFromSubscriber? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [DataEntry]?,_ error: Error?) -> Void)) {
        getDataFromSubscriberWithRequestBuilder(imsi: imsi, from: from, to: to, sort: sort, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get data sent from a subscriber.
     - GET /subscribers/{imsi}/data
     - Returns a list of data entries sent from a subscriber that match certain criteria. If the total number of entries does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
}, {
  "time" : 0,
  "contentType" : "contentType",
  "content" : "content"
} ]}]
     
     - parameter imsi: (path) IMSI of the target subscriber that generated data entries. 
     - parameter from: (query) Start time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter to: (query) End time for the data entries search range (unixtime in milliseconds). (optional)
     - parameter sort: (query) Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first). (optional, default to desc)
     - parameter limit: (query) Maximum number of data entries to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The value of &#x60;time&#x60; in the last log entry retrieved in the previous page. By specifying this parameter, you can continue to retrieve the list from the next page onward. (optional)

     - returns: RequestBuilder<[DataEntry]> 
     */
    open class func getDataFromSubscriberWithRequestBuilder(imsi: String, from: Int? = nil, to: Int? = nil, sort: Sort_getDataFromSubscriber? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[DataEntry]> {
        var path = "/subscribers/{imsi}/data"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "sort": sort?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[DataEntry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubscriber(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        getSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get Subscriber.
     - GET /subscribers/{imsi}
     - Returns information about the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func getSubscriberWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Issue Subscribers Transfer Token.
     
     - parameter request: (body) Destination operator&#39;s email address, Operator ID, transferring IMSI 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueSubscriberTransferToken(request: IssueSubscriberTransferTokenRequest, completion: @escaping ((_ data: IssueSubscriberTransferTokenResponse?,_ error: Error?) -> Void)) {
        issueSubscriberTransferTokenWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Issue Subscribers Transfer Token.
     - POST /subscribers/transfer_token/issue
     - Sends the subscriber's inter-operator control transfer token to the control destination operator.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "token" : "token"
}}]
     
     - parameter request: (body) Destination operator&#39;s email address, Operator ID, transferring IMSI 

     - returns: RequestBuilder<IssueSubscriberTransferTokenResponse> 
     */
    open class func issueSubscriberTransferTokenWithRequestBuilder(request: IssueSubscriberTransferTokenRequest) -> RequestBuilder<IssueSubscriberTransferTokenResponse> {
        let path = "/subscribers/transfer_token/issue"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<IssueSubscriberTransferTokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     List Session Events.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter from: (query) Start time for the events search range (unixtime). (optional)
     - parameter to: (query) End time for the events search range (unixtime). (optional)
     - parameter limit: (query) Maximum number of events to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSessionEvents(imsi: String, from: Int? = nil, to: Int? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [SessionEvent]?,_ error: Error?) -> Void)) {
        listSessionEventsWithRequestBuilder(imsi: imsi, from: from, to: to, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List Session Events.
     - GET /subscribers/{imsi}/events/sessions
     - Returns the event history for the specified subscriber, including session creation, change, and deletion. If the total number of events does not fit in one page, a URL for accessing the next page is returned in the `Link` header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
  "dns1" : "dns1",
  "dns0" : "dns0",
  "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
  "imei" : "imei",
  "imsi" : "imsi",
  "time" : 0,
  "ueIpAddress" : "ueIpAddress",
  "vpgId" : "vpgId",
  "event" : "event",
  "operatorId" : "operatorId",
  "apn" : "apn"
}, {
  "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
  "dns1" : "dns1",
  "dns0" : "dns0",
  "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
  "imei" : "imei",
  "imsi" : "imsi",
  "time" : 0,
  "ueIpAddress" : "ueIpAddress",
  "vpgId" : "vpgId",
  "event" : "event",
  "operatorId" : "operatorId",
  "apn" : "apn"
} ]}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter from: (query) Start time for the events search range (unixtime). (optional)
     - parameter to: (query) End time for the events search range (unixtime). (optional)
     - parameter limit: (query) Maximum number of events to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The time stamp of the last event retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next event onward. (optional)

     - returns: RequestBuilder<[SessionEvent]> 
     */
    open class func listSessionEventsWithRequestBuilder(imsi: String, from: Int? = nil, to: Int? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[SessionEvent]> {
        var path = "/subscribers/{imsi}/events/sessions"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "from": from?.encodeToJSON(), 
            "to": to?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[SessionEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listSubscribers: String { 
        case exact = "exact"
        case _prefix = "prefix"
    }

    /**
     List Subscribers.
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter statusFilter: (query) Status for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;active&#x60;, &#x60;inactive&#x60;, &#x60;ready&#x60;, &#x60;instock&#x60;, &#x60;shipped&#x60;, &#x60;suspended&#x60;, and &#x60;terminated&#x60;. (optional)
     - parameter speedClassFilter: (query) Speed class for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;s1.minimum&#x60;, &#x60;s1.slow&#x60;, &#x60;s1.standard&#x60;, &#x60;s1.fast&#x60; (optional)
     - parameter serialNumberFilter: (query) Serial number for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Returns subscribers with serial number starting with the specified value(s). (optional)
     - parameter limit: (query) Maximum number of subscribers to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listSubscribers(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listSubscribers? = nil, statusFilter: String? = nil, speedClassFilter: String? = nil, serialNumberFilter: String? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [Subscriber]?,_ error: Error?) -> Void)) {
        listSubscribersWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, statusFilter: statusFilter, speedClassFilter: speedClassFilter, serialNumberFilter: serialNumberFilter, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List Subscribers.
     - GET /subscribers
     - Returns a list of subscribers that match certain criteria. If the total number of subscribers does not fit in one page, a URL for accessing the next page is returned in the 'Link' header of the response.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}, {
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
} ]}]
     
     - parameter tagName: (query) Tag name for filtering the search (exact match). (optional)
     - parameter tagValue: (query) Tag search string for filtering the search. Required when &#x60;tag_name&#x60; has been specified. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter statusFilter: (query) Status for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;active&#x60;, &#x60;inactive&#x60;, &#x60;ready&#x60;, &#x60;instock&#x60;, &#x60;shipped&#x60;, &#x60;suspended&#x60;, and &#x60;terminated&#x60;. (optional)
     - parameter speedClassFilter: (query) Speed class for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Valid values include: &#x60;s1.minimum&#x60;, &#x60;s1.slow&#x60;, &#x60;s1.standard&#x60;, &#x60;s1.fast&#x60; (optional)
     - parameter serialNumberFilter: (query) Serial number for filtering the search. Can specify multiple values delimited by &#x60;|&#x60;. Returns subscribers with serial number starting with the specified value(s). (optional)
     - parameter limit: (query) Maximum number of subscribers to retrieve. (optional)
     - parameter lastEvaluatedKey: (query) The IMSI of the last subscriber retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next subscriber onward. (optional)

     - returns: RequestBuilder<[Subscriber]> 
     */
    open class func listSubscribersWithRequestBuilder(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listSubscribers? = nil, statusFilter: String? = nil, speedClassFilter: String? = nil, serialNumberFilter: String? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[Subscriber]> {
        let path = "/subscribers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag_name": tagName, 
            "tag_value": tagValue, 
            "tag_value_match_mode": tagValueMatchMode?.rawValue, 
            "status_filter": statusFilter, 
            "speed_class_filter": speedClassFilter, 
            "serial_number_filter": serialNumberFilter, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[Subscriber]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Bulk Insert or Update Subscriber Tags.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tags: (body) Array of tags to be inserted/updated. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSubscriberTags(imsi: String, tags: [TagUpdateRequest], completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        putSubscriberTagsWithRequestBuilder(imsi: imsi, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Bulk Insert or Update Subscriber Tags.
     - PUT /subscribers/{imsi}/tags
     - Inserts/updates tags for the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter tags: (body) Array of tags to be inserted/updated. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func putSubscriberTagsWithRequestBuilder(imsi: String, tags: [TagUpdateRequest]) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/tags"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tags)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter subscriber: (body) subscriber 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerSubscriber(imsi: String, subscriber: RegisterSubscribersRequest, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        registerSubscriberWithRequestBuilder(imsi: imsi, subscriber: subscriber).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Register Subscriber.
     - POST /subscribers/{imsi}/register
     - Registers a subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter subscriber: (body) subscriber 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func registerSubscriberWithRequestBuilder(imsi: String, subscriber: RegisterSubscribersRequest) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/register"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscriber)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Triggers Subscriber to report SIM local info.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportLocalInfo(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        reportLocalInfoWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Triggers Subscriber to report SIM local info.
     - POST /subscribers/{imsi}/report_local_info
     - Triggers Subscriber to report SIM local info.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func reportLocalInfoWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/report_local_info"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send SMS to Subscriber
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter smsForwardingRequest: (body) SMS forwarding request that contains message body and its encoding type. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendSms(imsi: String, smsForwardingRequest: SmsForwardingRequest, completion: @escaping ((_ data: SmsForwardingReport?,_ error: Error?) -> Void)) {
        sendSmsWithRequestBuilder(imsi: imsi, smsForwardingRequest: smsForwardingRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Send SMS to Subscriber
     - POST /subscribers/{imsi}/send_sms
     - Send SMS to the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "messageId" : "messageId"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter smsForwardingRequest: (body) SMS forwarding request that contains message body and its encoding type. 

     - returns: RequestBuilder<SmsForwardingReport> 
     */
    open class func sendSmsWithRequestBuilder(imsi: String, smsForwardingRequest: SmsForwardingRequest) -> RequestBuilder<SmsForwardingReport> {
        var path = "/subscribers/{imsi}/send_sms"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: smsForwardingRequest)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SmsForwardingReport>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update Expiry Time of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter request: (body) Expiry time after the update (unixtime: in milliseconds). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setExpiryTime(imsi: String, request: ExpiryTime, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        setExpiryTimeWithRequestBuilder(imsi: imsi, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update Expiry Time of Subscriber.
     - POST /subscribers/{imsi}/set_expiry_time
     - Updates expiry time of specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter request: (body) Expiry time after the update (unixtime: in milliseconds). 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func setExpiryTimeWithRequestBuilder(imsi: String, request: ExpiryTime) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/set_expiry_time"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set Group to Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter group: (body) Group (may include ID only). 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setGroup(imsi: String, group: SetGroupRequest, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        setGroupWithRequestBuilder(imsi: imsi, group: group).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Set Group to Subscriber.
     - POST /subscribers/{imsi}/set_group
     - Sets or overwrites a group for the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter group: (body) Group (may include ID only). 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func setGroupWithRequestBuilder(imsi: String, group: SetGroupRequest) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/set_group"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: group)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set IMEI lock configuration for Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter imeiLock: (body) IMEI lock configuration for the subscriber. (IMEI can be left blank for locking to the current IMEI of an online subscriber.) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setImeiLock(imsi: String, imeiLock: SetImeiLockRequest? = nil, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        setImeiLockWithRequestBuilder(imsi: imsi, imeiLock: imeiLock).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Set IMEI lock configuration for Subscriber.
     - POST /subscribers/{imsi}/set_imei_lock
     - Set IMEI that the subscriber should be locked to.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter imeiLock: (body) IMEI lock configuration for the subscriber. (IMEI can be left blank for locking to the current IMEI of an online subscriber.) (optional)

     - returns: RequestBuilder<Subscriber> 
     */
    open class func setImeiLockWithRequestBuilder(imsi: String, imeiLock: SetImeiLockRequest? = nil) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/set_imei_lock"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: imeiLock)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set Subscriber to standby mode.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setSubscriberToStandby(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        setSubscriberToStandbyWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Set Subscriber to standby mode.
     - POST /subscribers/{imsi}/set_to_standby
     - Set the specified subscriber to standby mode.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func setSubscriberToStandbyWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/set_to_standby"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Suspend Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func suspendSubscriber(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        suspendSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Suspend Subscriber.
     - POST /subscribers/{imsi}/suspend
     - Suspends the specified subscriber
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func suspendSubscriberWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/suspend"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Terminate Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func terminateSubscriber(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        terminateSubscriberWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Terminate Subscriber.
     - POST /subscribers/{imsi}/terminate
     - Terminates the specified subscriber
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func terminateSubscriberWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/terminate"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Expiry Time of Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetExpiryTime(imsi: String, completion: @escaping ((_ error: Error?) -> Void)) {
        unsetExpiryTimeWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete Expiry Time of Subscriber.
     - POST /subscribers/{imsi}/unset_expiry_time
     - Deletes expiry time of specified subscriber and changes it to indefinite.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Void> 
     */
    open class func unsetExpiryTimeWithRequestBuilder(imsi: String) -> RequestBuilder<Void> {
        var path = "/subscribers/{imsi}/unset_expiry_time"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unset Group to Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetGroup(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        unsetGroupWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Unset Group to Subscriber.
     - POST /subscribers/{imsi}/unset_group
     - Removes the group configuration from the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func unsetGroupWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/unset_group"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unset IMEI lock configuration for Subscriber.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetImeiLock(imsi: String, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        unsetImeiLockWithRequestBuilder(imsi: imsi).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Unset IMEI lock configuration for Subscriber.
     - POST /subscribers/{imsi}/unset_imei_lock
     - Remove any existing IMEI lock configuration for the subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func unsetImeiLockWithRequestBuilder(imsi: String) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/unset_imei_lock"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Subscriber speed class.
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter speedClass: (body) speed_class 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSpeedClass(imsi: String, speedClass: UpdateSpeedClassRequest, completion: @escaping ((_ data: Subscriber?,_ error: Error?) -> Void)) {
        updateSpeedClassWithRequestBuilder(imsi: imsi, speedClass: speedClass).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update Subscriber speed class.
     - POST /subscribers/{imsi}/update_speed_class
     - Changes the speed class of the specified subscriber.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "expiryAction" : "expiryAction",
  "lastModifiedAt" : 1,
  "serialNumber" : "serialNumber",
  "moduleType" : "moduleType",
  "groupId" : "groupId",
  "ipAddress" : "ipAddress",
  "sessionStatus" : {
    "gatewayPublicIpAddress" : "gatewayPublicIpAddress",
    "lastUpdatedAt" : 5,
    "gatewayPrivateIpAddress" : "gatewayPrivateIpAddress",
    "imei" : "imei",
    "online" : true,
    "ueIpAddress" : "ueIpAddress",
    "vpgId" : "vpgId",
    "dnsServers" : [ "dnsServers", "dnsServers" ]
  },
  "imsi" : "imsi",
  "tags" : { },
  "speedClass" : "speedClass",
  "createdAt" : 0,
  "expiredAt" : 6,
  "iccid" : "iccid",
  "imeiLock" : {
    "imei" : "imei"
  },
  "terminationEnabled" : true,
  "msisdn" : "msisdn",
  "operatorId" : "operatorId",
  "plan" : 5,
  "apn" : "apn",
  "status" : "status"
}}]
     
     - parameter imsi: (path) IMSI of the target subscriber. 
     - parameter speedClass: (body) speed_class 

     - returns: RequestBuilder<Subscriber> 
     */
    open class func updateSpeedClassWithRequestBuilder(imsi: String, speedClass: UpdateSpeedClassRequest) -> RequestBuilder<Subscriber> {
        var path = "/subscribers/{imsi}/update_speed_class"
        path = path.replacingOccurrences(of: "{imsi}", with: "\(imsi)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: speedClass)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Subscriber>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Verify Subscriber Transfer Token.
     
     - parameter token: (body) Subscriber transfer token that noficed via email. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifySubscriberTransferToken(token: VerifySubscriberTransferTokenRequest, completion: @escaping ((_ data: VerifySubscriberTransferTokenResponse?,_ error: Error?) -> Void)) {
        verifySubscriberTransferTokenWithRequestBuilder(token: token).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Verify Subscriber Transfer Token.
     - POST /subscribers/transfer_token/verify
     - Verifies the subscriber's control transfer token, and executes the transfer. This API is called from the operator of the control destination.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "transferredImsi" : [ "transferredImsi", "transferredImsi" ]
}}]
     
     - parameter token: (body) Subscriber transfer token that noficed via email. 

     - returns: RequestBuilder<VerifySubscriberTransferTokenResponse> 
     */
    open class func verifySubscriberTransferTokenWithRequestBuilder(token: VerifySubscriberTransferTokenRequest) -> RequestBuilder<VerifySubscriberTransferTokenResponse> {
        let path = "/subscribers/transfer_token/verify"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: token)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<VerifySubscriberTransferTokenResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
