//
// VirtualPrivateGatewayAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VirtualPrivateGatewayAPI {
    /**
     Close SORACOM Gate.
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func closeGate(vpgId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        closeGateWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close SORACOM Gate.
     - POST /virtual_private_gateways/{vpg_id}/gate/close
     - Close SORACOM Gate on the specified VPG.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) Target VPG ID. 

     - returns: RequestBuilder<Void> 
     */
    open class func closeGateWithRequestBuilder(vpgId: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/gate/close"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add node in the list of Junction mirroring peers
     
     - parameter vpgId: (path) VPG ID 
     - parameter mirroringPeer: (body) Mirroring peer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMirroringPeer(vpgId: String, mirroringPeer: JunctionMirroringPeer, completion: @escaping ((_ error: Error?) -> Void)) {
        createMirroringPeerWithRequestBuilder(vpgId: vpgId, mirroringPeer: mirroringPeer).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Add node in the list of Junction mirroring peers
     - POST /virtual_private_gateways/{vpg_id}/junction/mirroring/peers
     - Add node in the list of Junction mirroring peers
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) VPG ID 
     - parameter mirroringPeer: (body) Mirroring peer 

     - returns: RequestBuilder<Void> 
     */
    open class func createMirroringPeerWithRequestBuilder(vpgId: String, mirroringPeer: JunctionMirroringPeer) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/junction/mirroring/peers"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mirroringPeer)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create Virtual Private Gateway.
     
     - parameter createVirtualPrivateGatewayRequest: (body) Request containing information for the new VPG to be created. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createVirtualPrivateGateway(createVirtualPrivateGatewayRequest: CreateVirtualPrivateGatewayRequest, completion: @escaping ((_ data: VirtualPrivateGateway?,_ error: Error?) -> Void)) {
        createVirtualPrivateGatewayWithRequestBuilder(createVirtualPrivateGatewayRequest: createVirtualPrivateGatewayRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create Virtual Private Gateway.
     - POST /virtual_private_gateways
     - Create new VPG.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "lastModifiedTime" : 1,
  "useInternetGateway" : true,
  "primaryServiceName" : "Canal",
  "virtualInterfaces" : null,
  "createdTime" : 6,
  "id" : "id",
  "type" : 0,
  "vpcPeeringConnections" : { },
  "operatorId" : "operatorId",
  "status" : "status",
  "tags" : {
    "location" : "tokyo"
  }
}}]
     
     - parameter createVirtualPrivateGatewayRequest: (body) Request containing information for the new VPG to be created. 

     - returns: RequestBuilder<VirtualPrivateGateway> 
     */
    open class func createVirtualPrivateGatewayWithRequestBuilder(createVirtualPrivateGatewayRequest: CreateVirtualPrivateGatewayRequest) -> RequestBuilder<VirtualPrivateGateway> {
        let path = "/virtual_private_gateways"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createVirtualPrivateGatewayRequest)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<VirtualPrivateGateway>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create VPC Peering Connection
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter vpcPeeringConnection: (body) VPC peering connection to be created. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createVpcPeeringConnection(vpgId: String, vpcPeeringConnection: CreateVpcPeeringConnectionRequest, completion: @escaping ((_ data: CreateVpcPeeringConnectionRequest?,_ error: Error?) -> Void)) {
        createVpcPeeringConnectionWithRequestBuilder(vpgId: vpgId, vpcPeeringConnection: vpcPeeringConnection).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create VPC Peering Connection
     - POST /virtual_private_gateways/{vpg_id}/vpc_peering_connections
     - Creates a VPC peering connection for the specified VPG.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "destinationCidrBlock" : "destinationCidrBlock",
  "peerOwnerId" : "peerOwnerId",
  "peerVpcId" : "peerVpcId",
  "peerRegion" : "peerRegion"
}}]
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter vpcPeeringConnection: (body) VPC peering connection to be created. 

     - returns: RequestBuilder<CreateVpcPeeringConnectionRequest> 
     */
    open class func createVpcPeeringConnectionWithRequestBuilder(vpgId: String, vpcPeeringConnection: CreateVpcPeeringConnectionRequest) -> RequestBuilder<CreateVpcPeeringConnectionRequest> {
        var path = "/virtual_private_gateways/{vpg_id}/vpc_peering_connections"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: vpcPeeringConnection)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CreateVpcPeeringConnectionRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove peer from the list of Junction mirroring peers
     
     - parameter vpgId: (path) VPG ID 
     - parameter ipaddr: (path) IP address of mirroring peer 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMirroringPeer(vpgId: String, ipaddr: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteMirroringPeerWithRequestBuilder(vpgId: vpgId, ipaddr: ipaddr).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Remove peer from the list of Junction mirroring peers
     - DELETE /virtual_private_gateways/{vpg_id}/junction/mirroring/peers/{ipaddr}
     - Remove peer from the list of Junction mirroring peers
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) VPG ID 
     - parameter ipaddr: (path) IP address of mirroring peer 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteMirroringPeerWithRequestBuilder(vpgId: String, ipaddr: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/junction/mirroring/peers/{ipaddr}"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{ipaddr}", with: "\(ipaddr)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete VPG IP address map entry
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter key: (path) Target key to remove. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteVirtualPrivateGatewayIpAddressMapEntry(vpgId: String, key: String, completion: @escaping ((_ data: IpAddressMapEntry?,_ error: Error?) -> Void)) {
        deleteVirtualPrivateGatewayIpAddressMapEntryWithRequestBuilder(vpgId: vpgId, key: key).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete VPG IP address map entry
     - DELETE /virtual_private_gateways/{vpg_id}/ip_address_map/{key}
     - Deletes an entry in VPG IP address map.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{output=none}]
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter key: (path) Target key to remove. 

     - returns: RequestBuilder<IpAddressMapEntry> 
     */
    open class func deleteVirtualPrivateGatewayIpAddressMapEntryWithRequestBuilder(vpgId: String, key: String) -> RequestBuilder<IpAddressMapEntry> {
        var path = "/virtual_private_gateways/{vpg_id}/ip_address_map/{key}"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{key}", with: "\(key)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<IpAddressMapEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete VPC Peering Connection.
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter pcxId: (path) VPC peering connection ID to be deleted. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteVpcPeeringConnection(vpgId: String, pcxId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteVpcPeeringConnectionWithRequestBuilder(vpgId: vpgId, pcxId: pcxId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete VPC Peering Connection.
     - DELETE /virtual_private_gateways/{vpg_id}/vpc_peering_connections/{pcx_id}
     - Deletes the specified VPC peering connection.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter pcxId: (path) VPC peering connection ID to be deleted. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteVpcPeeringConnectionWithRequestBuilder(vpgId: String, pcxId: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/vpc_peering_connections/{pcx_id}"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{pcx_id}", with: "\(pcxId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Virtual Private Gateway.
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVirtualPrivateGateway(vpgId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        getVirtualPrivateGatewayWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Get Virtual Private Gateway.
     - GET /virtual_private_gateways/{vpg_id}
     - Retrieves information about the specified VPG.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) Target VPG ID. 

     - returns: RequestBuilder<Void> 
     */
    open class func getVirtualPrivateGatewayWithRequestBuilder(vpgId: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List VPG Gate peers
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listGatePeers(vpgId: String, completion: @escaping ((_ data: [GatePeer]?,_ error: Error?) -> Void)) {
        listGatePeersWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List VPG Gate peers
     - GET /virtual_private_gateways/{vpg_id}/gate/peers
     - List Gate peers registered in the Virtual Private Gateway
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "ownedByCustomer" : true,
  "outerIpAddress" : "outerIpAddress",
  "innerIpAddress" : "innerIpAddress"
}, {
  "ownedByCustomer" : true,
  "outerIpAddress" : "outerIpAddress",
  "innerIpAddress" : "innerIpAddress"
} ]}]
     
     - parameter vpgId: (path) Target VPG ID. 

     - returns: RequestBuilder<[GatePeer]> 
     */
    open class func listGatePeersWithRequestBuilder(vpgId: String) -> RequestBuilder<[GatePeer]> {
        var path = "/virtual_private_gateways/{vpg_id}/gate/peers"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[GatePeer]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List VPG IP address map entries
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listVirtualPrivateGatewayIpAddressMapEntries(vpgId: String, completion: @escaping ((_ data: [IpAddressMapEntry]?,_ error: Error?) -> Void)) {
        listVirtualPrivateGatewayIpAddressMapEntriesWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List VPG IP address map entries
     - GET /virtual_private_gateways/{vpg_id}/ip_address_map
     - Describes the list of IP addresse map entries in the Virtual Private Gateway
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "ipAddress" : "ipAddress",
  "type" : "static",
  "key" : "key"
}, {
  "ipAddress" : "ipAddress",
  "type" : "static",
  "key" : "key"
} ]}]
     
     - parameter vpgId: (path) Target VPG ID. 

     - returns: RequestBuilder<[IpAddressMapEntry]> 
     */
    open class func listVirtualPrivateGatewayIpAddressMapEntriesWithRequestBuilder(vpgId: String) -> RequestBuilder<[IpAddressMapEntry]> {
        var path = "/virtual_private_gateways/{vpg_id}/ip_address_map"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[IpAddressMapEntry]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tagValueMatchMode
     */
    public enum TagValueMatchMode_listVirtualPrivateGateways: String { 
        case exact = "exact"
        case _prefix = "prefix"
    }

    /**
     List Virtual Private Gateways.
     
     - parameter tagName: (query) Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required. (optional)
     - parameter tagValue: (query) Tag value of the VPGs. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of results per response page. (optional)
     - parameter lastEvaluatedKey: (query) The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listVirtualPrivateGateways(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listVirtualPrivateGateways? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil, completion: @escaping ((_ data: [VirtualPrivateGateway]?,_ error: Error?) -> Void)) {
        listVirtualPrivateGatewaysWithRequestBuilder(tagName: tagName, tagValue: tagValue, tagValueMatchMode: tagValueMatchMode, limit: limit, lastEvaluatedKey: lastEvaluatedKey).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     List Virtual Private Gateways.
     - GET /virtual_private_gateways
     - Returns a list of VPGs.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example=[ {
  "lastModifiedTime" : 1,
  "useInternetGateway" : true,
  "primaryServiceName" : "Canal",
  "virtualInterfaces" : null,
  "createdTime" : 6,
  "id" : "id",
  "type" : 0,
  "vpcPeeringConnections" : { },
  "operatorId" : "operatorId",
  "status" : "status",
  "tags" : {
    "location" : "tokyo"
  }
}, {
  "lastModifiedTime" : 1,
  "useInternetGateway" : true,
  "primaryServiceName" : "Canal",
  "virtualInterfaces" : null,
  "createdTime" : 6,
  "id" : "id",
  "type" : 0,
  "vpcPeeringConnections" : { },
  "operatorId" : "operatorId",
  "status" : "status",
  "tags" : {
    "location" : "tokyo"
  }
} ]}]
     
     - parameter tagName: (query) Tag name of the VPG. Filters through all VPGs that exactly match the tag name. When tag_name is specified, tag_value is required. (optional)
     - parameter tagValue: (query) Tag value of the VPGs. (optional)
     - parameter tagValueMatchMode: (query) Tag match mode. (optional, default to exact)
     - parameter limit: (query) Maximum number of results per response page. (optional)
     - parameter lastEvaluatedKey: (query) The last group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next VPG onward. (optional)

     - returns: RequestBuilder<[VirtualPrivateGateway]> 
     */
    open class func listVirtualPrivateGatewaysWithRequestBuilder(tagName: String? = nil, tagValue: String? = nil, tagValueMatchMode: TagValueMatchMode_listVirtualPrivateGateways? = nil, limit: Int? = nil, lastEvaluatedKey: String? = nil) -> RequestBuilder<[VirtualPrivateGateway]> {
        let path = "/virtual_private_gateways"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag_name": tagName, 
            "tag_value": tagValue, 
            "tag_value_match_mode": tagValueMatchMode?.rawValue, 
            "limit": limit?.encodeToJSON(), 
            "last_evaluated_key": lastEvaluatedKey
        ])
        

        let requestBuilder: RequestBuilder<[VirtualPrivateGateway]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Open SORACOM Gate.
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func openGate(vpgId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        openGateWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Open SORACOM Gate.
     - POST /virtual_private_gateways/{vpg_id}/gate/open
     - Open SORACOM Gate on the specified VPG.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) Target VPG ID. 

     - returns: RequestBuilder<Void> 
     */
    open class func openGateWithRequestBuilder(vpgId: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/gate/open"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Put an entry in VPG IP address map
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter putIpAddressMapEntryRequest: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putVirtualPrivateGatewayIpAddressMapEntry(vpgId: String, putIpAddressMapEntryRequest: PutIpAddressMapEntryRequest, completion: @escaping ((_ data: IpAddressMapEntry?,_ error: Error?) -> Void)) {
        putVirtualPrivateGatewayIpAddressMapEntryWithRequestBuilder(vpgId: vpgId, putIpAddressMapEntryRequest: putIpAddressMapEntryRequest).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Put an entry in VPG IP address map
     - POST /virtual_private_gateways/{vpg_id}/ip_address_map
     - Puts an entry in VPG IP address map.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "ipAddress" : "ipAddress",
  "type" : "static",
  "key" : "key"
}}]
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter putIpAddressMapEntryRequest: (body)  

     - returns: RequestBuilder<IpAddressMapEntry> 
     */
    open class func putVirtualPrivateGatewayIpAddressMapEntryWithRequestBuilder(vpgId: String, putIpAddressMapEntryRequest: PutIpAddressMapEntryRequest) -> RequestBuilder<IpAddressMapEntry> {
        var path = "/virtual_private_gateways/{vpg_id}/ip_address_map"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: putIpAddressMapEntryRequest)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<IpAddressMapEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register VPG Gate peer
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter gatePeer: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerGatePeer(vpgId: String, gatePeer: RegisterGatePeerRequest, completion: @escaping ((_ data: GatePeer?,_ error: Error?) -> Void)) {
        registerGatePeerWithRequestBuilder(vpgId: vpgId, gatePeer: gatePeer).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Register VPG Gate peer
     - POST /virtual_private_gateways/{vpg_id}/gate/peers
     - Register a host as a gate peer in the Virtual Private Gateway
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     - examples: [{contentType=application/json, example={
  "ownedByCustomer" : true,
  "outerIpAddress" : "outerIpAddress",
  "innerIpAddress" : "innerIpAddress"
}}]
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter gatePeer: (body)  

     - returns: RequestBuilder<GatePeer> 
     */
    open class func registerGatePeerWithRequestBuilder(vpgId: String, gatePeer: RegisterGatePeerRequest) -> RequestBuilder<GatePeer> {
        var path = "/virtual_private_gateways/{vpg_id}/gate/peers"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gatePeer)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GatePeer>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set configuration for Junction inspection feature
     
     - parameter vpgId: (path) VPG ID 
     - parameter inspectionConfiguration: (body) Inspection configuration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setInspectionConfiguration(vpgId: String, inspectionConfiguration: JunctionInspectionConfiguration, completion: @escaping ((_ error: Error?) -> Void)) {
        setInspectionConfigurationWithRequestBuilder(vpgId: vpgId, inspectionConfiguration: inspectionConfiguration).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set configuration for Junction inspection feature
     - POST /virtual_private_gateways/{vpg_id}/junction/set_inspection
     - Set configuration for Junction inspection feature
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) VPG ID 
     - parameter inspectionConfiguration: (body) Inspection configuration 

     - returns: RequestBuilder<Void> 
     */
    open class func setInspectionConfigurationWithRequestBuilder(vpgId: String, inspectionConfiguration: JunctionInspectionConfiguration) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/junction/set_inspection"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inspectionConfiguration)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set configuration for Junction redirection feature
     
     - parameter vpgId: (path) VPG ID 
     - parameter redirectionConfiguration: (body) Redirection configuration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setRedirectionConfiguration(vpgId: String, redirectionConfiguration: JunctionRedirectionConfiguration, completion: @escaping ((_ error: Error?) -> Void)) {
        setRedirectionConfigurationWithRequestBuilder(vpgId: vpgId, redirectionConfiguration: redirectionConfiguration).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set configuration for Junction redirection feature
     - POST /virtual_private_gateways/{vpg_id}/junction/set_redirection
     - Set configuration for Junction redirection feature
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) VPG ID 
     - parameter redirectionConfiguration: (body) Redirection configuration 

     - returns: RequestBuilder<Void> 
     */
    open class func setRedirectionConfigurationWithRequestBuilder(vpgId: String, redirectionConfiguration: JunctionRedirectionConfiguration) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/junction/set_redirection"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: redirectionConfiguration)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Terminate Virtual Private Gateway.
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func terminateVirtualPrivateGateway(vpgId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        terminateVirtualPrivateGatewayWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Terminate Virtual Private Gateway.
     - POST /virtual_private_gateways/{vpg_id}/terminate
     - Terminates the specified VPG.
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) Target VPG ID. 

     - returns: RequestBuilder<Void> 
     */
    open class func terminateVirtualPrivateGatewayWithRequestBuilder(vpgId: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/terminate"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unregister VPG gate peer
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter outerIpAddress: (path) ID of the target node. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unregisterGatePeer(vpgId: String, outerIpAddress: String, completion: @escaping ((_ error: Error?) -> Void)) {
        unregisterGatePeerWithRequestBuilder(vpgId: vpgId, outerIpAddress: outerIpAddress).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Unregister VPG gate peer
     - DELETE /virtual_private_gateways/{vpg_id}/gate/peers/{outer_ip_address}
     - Unregister a gate peer from the Virtual Private Gateway
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) Target VPG ID. 
     - parameter outerIpAddress: (path) ID of the target node. 

     - returns: RequestBuilder<Void> 
     */
    open class func unregisterGatePeerWithRequestBuilder(vpgId: String, outerIpAddress: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/gate/peers/{outer_ip_address}"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{outer_ip_address}", with: "\(outerIpAddress)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unset configuration for Junction inspection feature
     
     - parameter vpgId: (path) VPG ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetInspectionConfiguration(vpgId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        unsetInspectionConfigurationWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Unset configuration for Junction inspection feature
     - POST /virtual_private_gateways/{vpg_id}/junction/unset_inspection
     - Unset configuration for Junction inspection feature
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) VPG ID 

     - returns: RequestBuilder<Void> 
     */
    open class func unsetInspectionConfigurationWithRequestBuilder(vpgId: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/junction/unset_inspection"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unset configuration for Junction redirection feature
     
     - parameter vpgId: (path) VPG ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsetRedirectionConfiguration(vpgId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        unsetRedirectionConfigurationWithRequestBuilder(vpgId: vpgId).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Unset configuration for Junction redirection feature
     - POST /virtual_private_gateways/{vpg_id}/junction/unset_redirection
     - Unset configuration for Junction redirection feature
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) VPG ID 

     - returns: RequestBuilder<Void> 
     */
    open class func unsetRedirectionConfigurationWithRequestBuilder(vpgId: String) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/junction/unset_redirection"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a Junction mirroring peer
     
     - parameter vpgId: (path) VPG ID 
     - parameter ipaddr: (path) Mirroring peer IP address 
     - parameter updates: (body) List of attributes to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMirroringPeer(vpgId: String, ipaddr: String, updates: [AttributeUpdate], completion: @escaping ((_ error: Error?) -> Void)) {
        updateMirroringPeerWithRequestBuilder(vpgId: vpgId, ipaddr: ipaddr, updates: updates).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update a Junction mirroring peer
     - PUT /virtual_private_gateways/{vpg_id}/junction/mirroring/peers/{ipaddr}
     - Update a Junction mirroring peer
     - API Key:
       - type: apiKey X-Soracom-API-Key 
       - name: api_key
     - API Key:
       - type: apiKey X-Soracom-Token 
       - name: api_token
     
     - parameter vpgId: (path) VPG ID 
     - parameter ipaddr: (path) Mirroring peer IP address 
     - parameter updates: (body) List of attributes to update 

     - returns: RequestBuilder<Void> 
     */
    open class func updateMirroringPeerWithRequestBuilder(vpgId: String, ipaddr: String, updates: [AttributeUpdate]) -> RequestBuilder<Void> {
        var path = "/virtual_private_gateways/{vpg_id}/junction/mirroring/peers/{ipaddr}"
        path = path.replacingOccurrences(of: "{vpg_id}", with: "\(vpgId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{ipaddr}", with: "\(ipaddr)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updates)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
