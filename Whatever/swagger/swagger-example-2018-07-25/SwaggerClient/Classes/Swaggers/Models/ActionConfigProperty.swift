//
// ActionConfigProperty.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ActionConfigProperty: Codable {

    public enum ExecutionDateTimeConst: String, Codable { 
        case immediately = "IMMEDIATELY"
        case beginningOfNextMonth = "BEGINNING_OF_NEXT_MONTH"
        case beginningOfNextDay = "BEGINNING_OF_NEXT_DAY"
        case afterOneDay = "AFTER_ONE_DAY"
        case never = "NEVER"
    }
    public enum SpeedClass: String, Codable { 
        case minimum = "s1.minimum"
        case slow = "s1.slow"
        case standard = "s1.standard"
        case fast = "s1.fast"
    }
    public enum HttpMethod: String, Codable { 
        case _get = "GET"
        case post = "POST"
        case put = "PUT"
        case delete = "DELETE"
    }
    public var executionDateTimeConst: ExecutionDateTimeConst
    /** SendMailAction の時のみ有効 */
    public var to: String?
    /** SendMailAction, SendMailToOperatorAction の時のみ有効 */
    public var title: String?
    /** SendMailAction, SendMailToOperatorAction の時のみ有効 */
    public var message: String?
    /** ChangeSpeedClassAction の時のみ有効 */
    public var speedClass: SpeedClass?
    /** 接続先URLとパラメーター ExecuteWebRequestAction の時のみ有効 */
    public var url: String?
    /** ExecuteWebRequestAction の時のみ有効 */
    public var httpMethod: HttpMethod?
    /** ExecuteWebRequestAction の時のみ有効 */
    public var contentType: String?
    /** ExecuteWebRequestAction の時のみ有効(任意) */
    public var headers: Any?
    /** ExecuteWebRequestAction の時のみ有効(任意) */
    public var body: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var endpoint: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var functionName: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var accessKey: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var secretAccessKey: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var parameter1: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var parameter2: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var parameter3: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var parameter4: String?
    /** InvokeAWSLambdaAction の時のみ有効 */
    public var parameter5: String?


    
    public init(executionDateTimeConst: ExecutionDateTimeConst, to: String?, title: String?, message: String?, speedClass: SpeedClass?, url: String?, httpMethod: HttpMethod?, contentType: String?, headers: Any?, body: String?, endpoint: String?, functionName: String?, accessKey: String?, secretAccessKey: String?, parameter1: String?, parameter2: String?, parameter3: String?, parameter4: String?, parameter5: String?) {
        self.executionDateTimeConst = executionDateTimeConst
        self.to = to
        self.title = title
        self.message = message
        self.speedClass = speedClass
        self.url = url
        self.httpMethod = httpMethod
        self.contentType = contentType
        self.headers = headers
        self.body = body
        self.endpoint = endpoint
        self.functionName = functionName
        self.accessKey = accessKey
        self.secretAccessKey = secretAccessKey
        self.parameter1 = parameter1
        self.parameter2 = parameter2
        self.parameter3 = parameter3
        self.parameter4 = parameter4
        self.parameter5 = parameter5
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(executionDateTimeConst, forKey: "executionDateTimeConst")
        try container.encodeIfPresent(to, forKey: "to")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(speedClass, forKey: "speedClass")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(httpMethod, forKey: "httpMethod")
        try container.encodeIfPresent(contentType, forKey: "contentType")
        try container.encodeIfPresent(headers, forKey: "headers")
        try container.encodeIfPresent(body, forKey: "body")
        try container.encodeIfPresent(endpoint, forKey: "endpoint")
        try container.encodeIfPresent(functionName, forKey: "functionName")
        try container.encodeIfPresent(accessKey, forKey: "accessKey")
        try container.encodeIfPresent(secretAccessKey, forKey: "secretAccessKey")
        try container.encodeIfPresent(parameter1, forKey: "parameter1")
        try container.encodeIfPresent(parameter2, forKey: "parameter2")
        try container.encodeIfPresent(parameter3, forKey: "parameter3")
        try container.encodeIfPresent(parameter4, forKey: "parameter4")
        try container.encodeIfPresent(parameter5, forKey: "parameter5")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        executionDateTimeConst = try container.decode(ExecutionDateTimeConst.self, forKey: "executionDateTimeConst")
        to = try container.decodeIfPresent(String.self, forKey: "to")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        message = try container.decodeIfPresent(String.self, forKey: "message")
        speedClass = try container.decodeIfPresent(SpeedClass.self, forKey: "speedClass")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        httpMethod = try container.decodeIfPresent(HttpMethod.self, forKey: "httpMethod")
        contentType = try container.decodeIfPresent(String.self, forKey: "contentType")
        headers = try container.decodeIfPresent(Any.self, forKey: "headers")
        body = try container.decodeIfPresent(String.self, forKey: "body")
        endpoint = try container.decodeIfPresent(String.self, forKey: "endpoint")
        functionName = try container.decodeIfPresent(String.self, forKey: "functionName")
        accessKey = try container.decodeIfPresent(String.self, forKey: "accessKey")
        secretAccessKey = try container.decodeIfPresent(String.self, forKey: "secretAccessKey")
        parameter1 = try container.decodeIfPresent(String.self, forKey: "parameter1")
        parameter2 = try container.decodeIfPresent(String.self, forKey: "parameter2")
        parameter3 = try container.decodeIfPresent(String.self, forKey: "parameter3")
        parameter4 = try container.decodeIfPresent(String.self, forKey: "parameter4")
        parameter5 = try container.decodeIfPresent(String.self, forKey: "parameter5")
    }
}

