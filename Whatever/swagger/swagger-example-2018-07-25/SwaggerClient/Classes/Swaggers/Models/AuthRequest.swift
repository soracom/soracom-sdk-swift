//
// AuthRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AuthRequest: Codable {

    public var authKey: String?
    public var authKeyId: String?
    public var email: String?
    public var operatorId: String?
    public var password: String?
    public var tokenTimeoutSeconds: Int64?
    public var userName: String?
    public var mfaOTPCode: String?


    
    public init(authKey: String?, authKeyId: String?, email: String?, operatorId: String?, password: String?, tokenTimeoutSeconds: Int64?, userName: String?, mfaOTPCode: String?) {
        self.authKey = authKey
        self.authKeyId = authKeyId
        self.email = email
        self.operatorId = operatorId
        self.password = password
        self.tokenTimeoutSeconds = tokenTimeoutSeconds
        self.userName = userName
        self.mfaOTPCode = mfaOTPCode
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(authKey, forKey: "authKey")
        try container.encodeIfPresent(authKeyId, forKey: "authKeyId")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(password, forKey: "password")
        try container.encodeIfPresent(tokenTimeoutSeconds, forKey: "tokenTimeoutSeconds")
        try container.encodeIfPresent(userName, forKey: "userName")
        try container.encodeIfPresent(mfaOTPCode, forKey: "mfaOTPCode")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        authKey = try container.decodeIfPresent(String.self, forKey: "authKey")
        authKeyId = try container.decodeIfPresent(String.self, forKey: "authKeyId")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        password = try container.decodeIfPresent(String.self, forKey: "password")
        tokenTimeoutSeconds = try container.decodeIfPresent(Int64.self, forKey: "tokenTimeoutSeconds")
        userName = try container.decodeIfPresent(String.self, forKey: "userName")
        mfaOTPCode = try container.decodeIfPresent(String.self, forKey: "mfaOTPCode")
    }
}

