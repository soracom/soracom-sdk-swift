//
// CredentialsModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CredentialsModel: Codable {

    public enum ModelType: String, Codable { 
        case awsCredentials = "aws-credentials"
        case azureCredentials = "azure-credentials"
        case psk = "psk"
        case x509 = "x509"
    }
    public var createDateTime: Int64?
    public var credentials: Any?
    public var credentialsId: String?
    public var description: String?
    public var lastUsedDateTime: Int64?
    public var type: ModelType?
    public var updateDateTime: Int64?


    
    public init(createDateTime: Int64?, credentials: Any?, credentialsId: String?, description: String?, lastUsedDateTime: Int64?, type: ModelType?, updateDateTime: Int64?) {
        self.createDateTime = createDateTime
        self.credentials = credentials
        self.credentialsId = credentialsId
        self.description = description
        self.lastUsedDateTime = lastUsedDateTime
        self.type = type
        self.updateDateTime = updateDateTime
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(createDateTime, forKey: "createDateTime")
        try container.encodeIfPresent(credentials, forKey: "credentials")
        try container.encodeIfPresent(credentialsId, forKey: "credentialsId")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(lastUsedDateTime, forKey: "lastUsedDateTime")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(updateDateTime, forKey: "updateDateTime")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        createDateTime = try container.decodeIfPresent(Int64.self, forKey: "createDateTime")
        credentials = try container.decodeIfPresent(Any.self, forKey: "credentials")
        credentialsId = try container.decodeIfPresent(String.self, forKey: "credentialsId")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        lastUsedDateTime = try container.decodeIfPresent(Int64.self, forKey: "lastUsedDateTime")
        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        updateDateTime = try container.decodeIfPresent(Int64.self, forKey: "updateDateTime")
    }
}

