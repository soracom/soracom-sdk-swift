//
// DataTrafficStats.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DataTrafficStats: Codable {

    public var downloadByteSizeTotal: Int64?
    public var downloadPacketSizeTotal: Int64?
    public var uploadByteSizeTotal: Int64?
    public var uploadPacketSizeTotal: Int64?


    
    public init(downloadByteSizeTotal: Int64?, downloadPacketSizeTotal: Int64?, uploadByteSizeTotal: Int64?, uploadPacketSizeTotal: Int64?) {
        self.downloadByteSizeTotal = downloadByteSizeTotal
        self.downloadPacketSizeTotal = downloadPacketSizeTotal
        self.uploadByteSizeTotal = uploadByteSizeTotal
        self.uploadPacketSizeTotal = uploadPacketSizeTotal
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(downloadByteSizeTotal, forKey: "downloadByteSizeTotal")
        try container.encodeIfPresent(downloadPacketSizeTotal, forKey: "downloadPacketSizeTotal")
        try container.encodeIfPresent(uploadByteSizeTotal, forKey: "uploadByteSizeTotal")
        try container.encodeIfPresent(uploadPacketSizeTotal, forKey: "uploadPacketSizeTotal")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        downloadByteSizeTotal = try container.decodeIfPresent(Int64.self, forKey: "downloadByteSizeTotal")
        downloadPacketSizeTotal = try container.decodeIfPresent(Int64.self, forKey: "downloadPacketSizeTotal")
        uploadByteSizeTotal = try container.decodeIfPresent(Int64.self, forKey: "uploadByteSizeTotal")
        uploadPacketSizeTotal = try container.decodeIfPresent(Int64.self, forKey: "uploadPacketSizeTotal")
    }
}

