//
// DeviceObjectModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class DeviceObjectModel: Codable {

    public enum Format: String, Codable { 
        case xml = "xml"
        case json = "json"
    }
    public var operatorId: String?
    public var createdTime: Date?
    public var lastModifiedTime: Date?
    public var objectName: String?
    public var objectId: String?
    public var format: Format?
    public var scope: String?


    
    public init(operatorId: String?, createdTime: Date?, lastModifiedTime: Date?, objectName: String?, objectId: String?, format: Format?, scope: String?) {
        self.operatorId = operatorId
        self.createdTime = createdTime
        self.lastModifiedTime = lastModifiedTime
        self.objectName = objectName
        self.objectId = objectId
        self.format = format
        self.scope = scope
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(createdTime, forKey: "createdTime")
        try container.encodeIfPresent(lastModifiedTime, forKey: "lastModifiedTime")
        try container.encodeIfPresent(objectName, forKey: "objectName")
        try container.encodeIfPresent(objectId, forKey: "objectId")
        try container.encodeIfPresent(format, forKey: "format")
        try container.encodeIfPresent(scope, forKey: "scope")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        createdTime = try container.decodeIfPresent(Date.self, forKey: "createdTime")
        lastModifiedTime = try container.decodeIfPresent(Date.self, forKey: "lastModifiedTime")
        objectName = try container.decodeIfPresent(String.self, forKey: "objectName")
        objectId = try container.decodeIfPresent(String.self, forKey: "objectId")
        format = try container.decodeIfPresent(Format.self, forKey: "format")
        scope = try container.decodeIfPresent(String.self, forKey: "scope")
    }
}

