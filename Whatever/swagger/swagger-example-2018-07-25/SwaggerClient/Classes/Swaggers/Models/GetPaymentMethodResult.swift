//
// GetPaymentMethodResult.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class GetPaymentMethodResult: Codable {

    public enum ErrorCode: String, Codable { 
        case success = "success"
        case processing = "processing"
        case invalidRequest = "invalid_request"
        case invalidNumber = "invalid_number"
        case incorrectNumber = "incorrect_number"
        case invalidName = "invalid_name"
        case invalidExpiryMonth = "invalid_expiry_month"
        case invalidExpiryYear = "invalid_expiry_year"
        case invalidExpiry = "invalid_expiry"
        case incorrectExpiry = "incorrect_expiry"
        case invalidCvc = "invalid_cvc"
        case incorrectCvc = "incorrect_cvc"
        case cardDeclined = "card_declined"
        case missing = "missing"
        case processingError = "processing_error"
    }
    public enum ProviderType: String, Codable { 
        case webPay = "WebPay"
    }
    /** エラーコード（支払い情報が無効な場合のみ） */
    public var errorCode: ErrorCode?
    /** エラーメッセージ（支払い情報が無効な場合のみ */
    public var errorMessage: String?
    /** 支払い情報 */
    public var properties: String?
    /** 課金プロバイダ種別 */
    public var providerType: ProviderType?
    /** 登録日 */
    public var updateDate: String?


    
    public init(errorCode: ErrorCode?, errorMessage: String?, properties: String?, providerType: ProviderType?, updateDate: String?) {
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.properties = properties
        self.providerType = providerType
        self.updateDate = updateDate
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(errorCode, forKey: "errorCode")
        try container.encodeIfPresent(errorMessage, forKey: "errorMessage")
        try container.encodeIfPresent(properties, forKey: "properties")
        try container.encodeIfPresent(providerType, forKey: "providerType")
        try container.encodeIfPresent(updateDate, forKey: "updateDate")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        errorCode = try container.decodeIfPresent(ErrorCode.self, forKey: "errorCode")
        errorMessage = try container.decodeIfPresent(String.self, forKey: "errorMessage")
        properties = try container.decodeIfPresent(String.self, forKey: "properties")
        providerType = try container.decodeIfPresent(ProviderType.self, forKey: "providerType")
        updateDate = try container.decodeIfPresent(String.self, forKey: "updateDate")
    }
}

