//
// GetPaymentTransactionResult.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class GetPaymentTransactionResult: Codable {

    public enum MessageCode: String, Codable { 
        case success = "success"
        case processing = "processing"
        case invalidRequest = "invalid_request"
        case invalidNumber = "invalid_number"
        case incorrectNumber = "incorrect_number"
        case invalidName = "invalid_name"
        case invalidExpiryMonth = "invalid_expiry_month"
        case invalidExpiryYear = "invalid_expiry_year"
        case invalidExpiry = "invalid_expiry"
        case incorrectExpiry = "incorrect_expiry"
        case invalidCvc = "invalid_cvc"
        case incorrectCvc = "incorrect_cvc"
        case cardDeclined = "card_declined"
        case missing = "missing"
        case processingError = "processing_error"
    }
    public enum Status: String, Codable { 
        case success = "success"
        case error = "error"
    }
    /** 課金額 */
    public var amount: PaymentAmount?
    /** 課金内容詳細 */
    public var description: PaymentDescription?
    /** メッセージ */
    public var message: String?
    /** メッセージコード */
    public var messageCode: MessageCode?
    /** ステータス */
    public var status: Status?


    
    public init(amount: PaymentAmount?, description: PaymentDescription?, message: String?, messageCode: MessageCode?, status: Status?) {
        self.amount = amount
        self.description = description
        self.message = message
        self.messageCode = messageCode
        self.status = status
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(messageCode, forKey: "messageCode")
        try container.encodeIfPresent(status, forKey: "status")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        amount = try container.decodeIfPresent(PaymentAmount.self, forKey: "amount")
        description = try container.decodeIfPresent(PaymentDescription.self, forKey: "description")
        message = try container.decodeIfPresent(String.self, forKey: "message")
        messageCode = try container.decodeIfPresent(MessageCode.self, forKey: "messageCode")
        status = try container.decodeIfPresent(Status.self, forKey: "status")
    }
}

