//
// Group.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Group: Codable {

    public var configuration: Map?
    public var createdTime: Int64?
    public var groupId: String?
    public var lastModifiedTime: Int64?
    public var operatorId: String?
    public var tags: Tag?


    
    public init(configuration: Map?, createdTime: Int64?, groupId: String?, lastModifiedTime: Int64?, operatorId: String?, tags: Tag?) {
        self.configuration = configuration
        self.createdTime = createdTime
        self.groupId = groupId
        self.lastModifiedTime = lastModifiedTime
        self.operatorId = operatorId
        self.tags = tags
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(configuration, forKey: "configuration")
        try container.encodeIfPresent(createdTime, forKey: "createdTime")
        try container.encodeIfPresent(groupId, forKey: "groupId")
        try container.encodeIfPresent(lastModifiedTime, forKey: "lastModifiedTime")
        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(tags, forKey: "tags")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        configuration = try container.decodeIfPresent(Map.self, forKey: "configuration")
        createdTime = try container.decodeIfPresent(Int64.self, forKey: "createdTime")
        groupId = try container.decodeIfPresent(String.self, forKey: "groupId")
        lastModifiedTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifiedTime")
        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        tags = try container.decodeIfPresent(Tag.self, forKey: "tags")
    }
}

