//
// JunctionMirroringPeer.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class JunctionMirroringPeer: Codable {

    public enum ModelProtocol: String, Codable { 
        case gre = "gre"
    }
    public var ipAddress: String?
    public var enabled: Bool?
    public var _protocol: ModelProtocol?
    public var description: String?


    
    public init(ipAddress: String?, enabled: Bool?, _protocol: ModelProtocol?, description: String?) {
        self.ipAddress = ipAddress
        self.enabled = enabled
        self._protocol = _protocol
        self.description = description
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(ipAddress, forKey: "ipAddress")
        try container.encodeIfPresent(enabled, forKey: "enabled")
        try container.encodeIfPresent(_protocol, forKey: "protocol")
        try container.encodeIfPresent(description, forKey: "description")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        ipAddress = try container.decodeIfPresent(String.self, forKey: "ipAddress")
        enabled = try container.decodeIfPresent(Bool.self, forKey: "enabled")
        _protocol = try container.decodeIfPresent(ModelProtocol.self, forKey: "protocol")
        description = try container.decodeIfPresent(String.self, forKey: "description")
    }
}

