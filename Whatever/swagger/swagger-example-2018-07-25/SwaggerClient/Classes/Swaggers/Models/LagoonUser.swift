//
// LagoonUser.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LagoonUser: Codable {

    public enum Role: String, Codable { 
        case viewer = "Viewer"
        case editor = "Editor"
    }
    public var id: Double?
    /** This value used on login. */
    public var email: String?
    /** A role that represents the permission. */
    public var role: Role?
    /** The last login datetime. */
    public var lastSeenAt: String?


    
    public init(id: Double?, email: String?, role: Role?, lastSeenAt: String?) {
        self.id = id
        self.email = email
        self.role = role
        self.lastSeenAt = lastSeenAt
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(role, forKey: "role")
        try container.encodeIfPresent(lastSeenAt, forKey: "lastSeenAt")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Double.self, forKey: "id")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        role = try container.decodeIfPresent(Role.self, forKey: "role")
        lastSeenAt = try container.decodeIfPresent(String.self, forKey: "lastSeenAt")
    }
}

