//
// LogEntry.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LogEntry: Codable {

    public enum Service: String, Codable { 
        case air = "Air"
        case beam = "Beam"
        case canal = "Canal"
        case direct = "Direct"
        case door = "Door"
        case endorse = "Endorse"
        case funnel = "Funnel"
        case gate = "Gate"
    }
    public enum ResourceType: String, Codable { 
        case subscriber = "Subscriber"
        case eventHandler = "EventHandler"
        case virtualPrivateGateway = "VirtualPrivateGateway"
    }
    public var service: Service?
    public var resourceType: ResourceType?
    public var resourceId: String?
    public var time: Int64?
    public var body: Any?


    
    public init(service: Service?, resourceType: ResourceType?, resourceId: String?, time: Int64?, body: Any?) {
        self.service = service
        self.resourceType = resourceType
        self.resourceId = resourceId
        self.time = time
        self.body = body
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(service, forKey: "service")
        try container.encodeIfPresent(resourceType, forKey: "resourceType")
        try container.encodeIfPresent(resourceId, forKey: "resourceId")
        try container.encodeIfPresent(time, forKey: "time")
        try container.encodeIfPresent(body, forKey: "body")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        service = try container.decodeIfPresent(Service.self, forKey: "service")
        resourceType = try container.decodeIfPresent(ResourceType.self, forKey: "resourceType")
        resourceId = try container.decodeIfPresent(String.self, forKey: "resourceId")
        time = try container.decodeIfPresent(Int64.self, forKey: "time")
        body = try container.decodeIfPresent(Any.self, forKey: "body")
    }
}

