//
// LoraGateway.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LoraGateway: Codable {

    public enum Status: String, Codable { 
        case active = "active"
        case terminated = "terminated"
        case ready = "ready"
        case instock = "instock"
    }
    public var operatorId: String?
    public var gatewayId: String?
    public var status: Status?
    public var tags: [String:String]?
    public var createdTime: Date?
    public var lastModifiedTime: Date?
    public var networkSetId: String?
    public var terminationEnabled: Bool?
    public var owned: Bool?
    public var address: String?
    public var online: Bool?


    
    public init(operatorId: String?, gatewayId: String?, status: Status?, tags: [String:String]?, createdTime: Date?, lastModifiedTime: Date?, networkSetId: String?, terminationEnabled: Bool?, owned: Bool?, address: String?, online: Bool?) {
        self.operatorId = operatorId
        self.gatewayId = gatewayId
        self.status = status
        self.tags = tags
        self.createdTime = createdTime
        self.lastModifiedTime = lastModifiedTime
        self.networkSetId = networkSetId
        self.terminationEnabled = terminationEnabled
        self.owned = owned
        self.address = address
        self.online = online
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(gatewayId, forKey: "gatewayId")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(createdTime, forKey: "createdTime")
        try container.encodeIfPresent(lastModifiedTime, forKey: "lastModifiedTime")
        try container.encodeIfPresent(networkSetId, forKey: "networkSetId")
        try container.encodeIfPresent(terminationEnabled, forKey: "terminationEnabled")
        try container.encodeIfPresent(owned, forKey: "owned")
        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(online, forKey: "online")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        gatewayId = try container.decodeIfPresent(String.self, forKey: "gatewayId")
        status = try container.decodeIfPresent(Status.self, forKey: "status")
        tags = try container.decodeIfPresent([String:String].self, forKey: "tags")
        createdTime = try container.decodeIfPresent(Date.self, forKey: "createdTime")
        lastModifiedTime = try container.decodeIfPresent(Date.self, forKey: "lastModifiedTime")
        networkSetId = try container.decodeIfPresent(String.self, forKey: "networkSetId")
        terminationEnabled = try container.decodeIfPresent(Bool.self, forKey: "terminationEnabled")
        owned = try container.decodeIfPresent(Bool.self, forKey: "owned")
        address = try container.decodeIfPresent(String.self, forKey: "address")
        online = try container.decodeIfPresent(Bool.self, forKey: "online")
    }
}

