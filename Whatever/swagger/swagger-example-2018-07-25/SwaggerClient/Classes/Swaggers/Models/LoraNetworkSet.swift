//
// LoraNetworkSet.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class LoraNetworkSet: Codable {

    public var operatorId: String?
    public var networkSetId: String?
    public var allowedOperators: [String]?
    public var tags: [String:String]?
    public var createdTime: Date?
    public var lastModifiedTime: Date?


    
    public init(operatorId: String?, networkSetId: String?, allowedOperators: [String]?, tags: [String:String]?, createdTime: Date?, lastModifiedTime: Date?) {
        self.operatorId = operatorId
        self.networkSetId = networkSetId
        self.allowedOperators = allowedOperators
        self.tags = tags
        self.createdTime = createdTime
        self.lastModifiedTime = lastModifiedTime
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(networkSetId, forKey: "networkSetId")
        try container.encodeIfPresent(allowedOperators, forKey: "allowedOperators")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(createdTime, forKey: "createdTime")
        try container.encodeIfPresent(lastModifiedTime, forKey: "lastModifiedTime")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        networkSetId = try container.decodeIfPresent(String.self, forKey: "networkSetId")
        allowedOperators = try container.decodeIfPresent([String].self, forKey: "allowedOperators")
        tags = try container.decodeIfPresent([String:String].self, forKey: "tags")
        createdTime = try container.decodeIfPresent(Date.self, forKey: "createdTime")
        lastModifiedTime = try container.decodeIfPresent(Date.self, forKey: "lastModifiedTime")
    }
}

