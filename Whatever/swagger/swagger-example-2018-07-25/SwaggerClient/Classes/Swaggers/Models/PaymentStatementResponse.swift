//
// PaymentStatementResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PaymentStatementResponse: Codable {

    /** 金額 */
    public var amount: Double?
    /** 課金日時 */
    public var paymentDateTime: Int64?
    /** 支払情報 */
    public var paymentInstrument: String?
    /** 支払方法 */
    public var paymentMethod: String?
    /** 課金明細ID */
    public var paymentStatementId: String?
    /** 支払内容 */
    public var paymentStatementInfo: String?


    
    public init(amount: Double?, paymentDateTime: Int64?, paymentInstrument: String?, paymentMethod: String?, paymentStatementId: String?, paymentStatementInfo: String?) {
        self.amount = amount
        self.paymentDateTime = paymentDateTime
        self.paymentInstrument = paymentInstrument
        self.paymentMethod = paymentMethod
        self.paymentStatementId = paymentStatementId
        self.paymentStatementInfo = paymentStatementInfo
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(paymentDateTime, forKey: "paymentDateTime")
        try container.encodeIfPresent(paymentInstrument, forKey: "paymentInstrument")
        try container.encodeIfPresent(paymentMethod, forKey: "paymentMethod")
        try container.encodeIfPresent(paymentStatementId, forKey: "paymentStatementId")
        try container.encodeIfPresent(paymentStatementInfo, forKey: "paymentStatementInfo")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        amount = try container.decodeIfPresent(Double.self, forKey: "amount")
        paymentDateTime = try container.decodeIfPresent(Int64.self, forKey: "paymentDateTime")
        paymentInstrument = try container.decodeIfPresent(String.self, forKey: "paymentInstrument")
        paymentMethod = try container.decodeIfPresent(String.self, forKey: "paymentMethod")
        paymentStatementId = try container.decodeIfPresent(String.self, forKey: "paymentStatementId")
        paymentStatementInfo = try container.decodeIfPresent(String.self, forKey: "paymentStatementInfo")
    }
}

