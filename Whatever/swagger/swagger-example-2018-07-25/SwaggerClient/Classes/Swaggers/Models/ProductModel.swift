//
// ProductModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProductModel: Codable {

    public enum ProductType: String, Codable { 
        case sim = "sim"
        case networkModule = "network_module"
    }
    /** 商品販売個数 */
    public var count: Double?
    /** 最大購入数量 */
    public var maxQuantity: Int?
    /** 商品販売個数ごとの価格 */
    public var price: Double?
    /** 商品コード */
    public var productCode: String?
    /** 商品説明ページURL */
    public var productInfoURL: String?
    /** 商品名 */
    public var productName: String?
    /** 商品種別 */
    public var productType: ProductType?
    /** 商品プロパティ */
    public var properties: [String:String]?


    
    public init(count: Double?, maxQuantity: Int?, price: Double?, productCode: String?, productInfoURL: String?, productName: String?, productType: ProductType?, properties: [String:String]?) {
        self.count = count
        self.maxQuantity = maxQuantity
        self.price = price
        self.productCode = productCode
        self.productInfoURL = productInfoURL
        self.productName = productName
        self.productType = productType
        self.properties = properties
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(count, forKey: "count")
        try container.encodeIfPresent(maxQuantity, forKey: "maxQuantity")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(productCode, forKey: "productCode")
        try container.encodeIfPresent(productInfoURL, forKey: "productInfoURL")
        try container.encodeIfPresent(productName, forKey: "productName")
        try container.encodeIfPresent(productType, forKey: "productType")
        try container.encodeIfPresent(properties, forKey: "properties")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        count = try container.decodeIfPresent(Double.self, forKey: "count")
        maxQuantity = try container.decodeIfPresent(Int.self, forKey: "maxQuantity")
        price = try container.decodeIfPresent(Double.self, forKey: "price")
        productCode = try container.decodeIfPresent(String.self, forKey: "productCode")
        productInfoURL = try container.decodeIfPresent(String.self, forKey: "productInfoURL")
        productName = try container.decodeIfPresent(String.self, forKey: "productName")
        productType = try container.decodeIfPresent(ProductType.self, forKey: "productType")
        properties = try container.decodeIfPresent([String:String].self, forKey: "properties")
    }
}

