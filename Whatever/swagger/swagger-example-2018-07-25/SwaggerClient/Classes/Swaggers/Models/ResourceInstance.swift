//
// ResourceInstance.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ResourceInstance: Codable {

    public enum Operations: String, Codable { 
        case _none = "NONE"
        case r = "R"
        case w = "W"
        case rw = "RW"
        case e = "E"
        case re = "RE"
        case we = "WE"
        case rwe = "RWE"
    }
    public enum ModelType: String, Codable { 
        case string = "STRING"
        case integer = "INTEGER"
        case float = "FLOAT"
        case boolean = "BOOLEAN"
        case opaque = "OPAQUE"
        case time = "TIME"
        case objlnk = "OBJLNK"
    }
    public var id: Int?
    public var name: String?
    public var operations: Operations?
    public var multiple: Bool?
    public var mandatory: Bool?
    public var type: ModelType?
    public var rangeEnumeration: String?
    public var units: String?
    public var description: String?
    public var value: Any?
    public var values: Any?
    public var observed: Bool?


    
    public init(id: Int?, name: String?, operations: Operations?, multiple: Bool?, mandatory: Bool?, type: ModelType?, rangeEnumeration: String?, units: String?, description: String?, value: Any?, values: Any?, observed: Bool?) {
        self.id = id
        self.name = name
        self.operations = operations
        self.multiple = multiple
        self.mandatory = mandatory
        self.type = type
        self.rangeEnumeration = rangeEnumeration
        self.units = units
        self.description = description
        self.value = value
        self.values = values
        self.observed = observed
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(operations, forKey: "operations")
        try container.encodeIfPresent(multiple, forKey: "multiple")
        try container.encodeIfPresent(mandatory, forKey: "mandatory")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(rangeEnumeration, forKey: "rangeEnumeration")
        try container.encodeIfPresent(units, forKey: "units")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(value, forKey: "value")
        try container.encodeIfPresent(values, forKey: "values")
        try container.encodeIfPresent(observed, forKey: "observed")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Int.self, forKey: "id")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        operations = try container.decodeIfPresent(Operations.self, forKey: "operations")
        multiple = try container.decodeIfPresent(Bool.self, forKey: "multiple")
        mandatory = try container.decodeIfPresent(Bool.self, forKey: "mandatory")
        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        rangeEnumeration = try container.decodeIfPresent(String.self, forKey: "rangeEnumeration")
        units = try container.decodeIfPresent(String.self, forKey: "units")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        value = try container.decodeIfPresent(Any.self, forKey: "value")
        values = try container.decodeIfPresent(Any.self, forKey: "values")
        observed = try container.decodeIfPresent(Bool.self, forKey: "observed")
    }
}

