//
// SessionEvent.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SessionEvent: Codable {

    public var operatorId: String?
    public var imsi: String?
    public var time: Int64?
    public var event: String?
    public var imei: String?
    public var ueIpAddress: String?
    public var apn: String?
    public var dns0: String?
    public var dns1: String?
    public var vpgId: String?
    public var gatewayPrivateIpAddress: String?
    public var gatewayPublicIpAddress: String?


    
    public init(operatorId: String?, imsi: String?, time: Int64?, event: String?, imei: String?, ueIpAddress: String?, apn: String?, dns0: String?, dns1: String?, vpgId: String?, gatewayPrivateIpAddress: String?, gatewayPublicIpAddress: String?) {
        self.operatorId = operatorId
        self.imsi = imsi
        self.time = time
        self.event = event
        self.imei = imei
        self.ueIpAddress = ueIpAddress
        self.apn = apn
        self.dns0 = dns0
        self.dns1 = dns1
        self.vpgId = vpgId
        self.gatewayPrivateIpAddress = gatewayPrivateIpAddress
        self.gatewayPublicIpAddress = gatewayPublicIpAddress
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(imsi, forKey: "imsi")
        try container.encodeIfPresent(time, forKey: "time")
        try container.encodeIfPresent(event, forKey: "event")
        try container.encodeIfPresent(imei, forKey: "imei")
        try container.encodeIfPresent(ueIpAddress, forKey: "ueIpAddress")
        try container.encodeIfPresent(apn, forKey: "apn")
        try container.encodeIfPresent(dns0, forKey: "dns0")
        try container.encodeIfPresent(dns1, forKey: "dns1")
        try container.encodeIfPresent(vpgId, forKey: "vpgId")
        try container.encodeIfPresent(gatewayPrivateIpAddress, forKey: "gatewayPrivateIpAddress")
        try container.encodeIfPresent(gatewayPublicIpAddress, forKey: "gatewayPublicIpAddress")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        imsi = try container.decodeIfPresent(String.self, forKey: "imsi")
        time = try container.decodeIfPresent(Int64.self, forKey: "time")
        event = try container.decodeIfPresent(String.self, forKey: "event")
        imei = try container.decodeIfPresent(String.self, forKey: "imei")
        ueIpAddress = try container.decodeIfPresent(String.self, forKey: "ueIpAddress")
        apn = try container.decodeIfPresent(String.self, forKey: "apn")
        dns0 = try container.decodeIfPresent(String.self, forKey: "dns0")
        dns1 = try container.decodeIfPresent(String.self, forKey: "dns1")
        vpgId = try container.decodeIfPresent(String.self, forKey: "vpgId")
        gatewayPrivateIpAddress = try container.decodeIfPresent(String.self, forKey: "gatewayPrivateIpAddress")
        gatewayPublicIpAddress = try container.decodeIfPresent(String.self, forKey: "gatewayPublicIpAddress")
    }
}

