//
// ShippingCostModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** 発送料 */

open class ShippingCostModel: Codable {

    public enum ShippingArea: String, Codable { 
        case hokkaido = "hokkaido"
        case kitaTohoku = "kita_tohoku"
        case minamiTohoku = "minami_tohoku"
        case kanto = "kanto"
        case shinetsu = "shinetsu"
        case chubu = "chubu"
        case hokuriku = "hokuriku"
        case kansai = "kansai"
        case chugoku = "chugoku"
        case shikoku = "shikoku"
        case kyushu = "kyushu"
        case okinawa = "okinawa"
    }
    /** 発送先エリア */
    public var shippingArea: ShippingArea?
    /** 発送先エリア名称 */
    public var shippingAreaName: String?
    /** 送料 */
    public var shippingCost: Double?
    /** 発送サイズ */
    public var size: Int?


    
    public init(shippingArea: ShippingArea?, shippingAreaName: String?, shippingCost: Double?, size: Int?) {
        self.shippingArea = shippingArea
        self.shippingAreaName = shippingAreaName
        self.shippingCost = shippingCost
        self.size = size
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(shippingArea, forKey: "shippingArea")
        try container.encodeIfPresent(shippingAreaName, forKey: "shippingAreaName")
        try container.encodeIfPresent(shippingCost, forKey: "shippingCost")
        try container.encodeIfPresent(size, forKey: "size")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        shippingArea = try container.decodeIfPresent(ShippingArea.self, forKey: "shippingArea")
        shippingAreaName = try container.decodeIfPresent(String.self, forKey: "shippingAreaName")
        shippingCost = try container.decodeIfPresent(Double.self, forKey: "shippingCost")
        size = try container.decodeIfPresent(Int.self, forKey: "size")
    }
}

