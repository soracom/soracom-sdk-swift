//
// Subscriber.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Subscriber: Codable {

    public var apn: String?
    public var createdAt: Int64?
    public var expiredAt: Int64?
    public var expiryAction: String?
    public var groupId: String?
    public var iccid: String?
    public var imeiLock: ImeiLock?
    public var imsi: String?
    public var ipAddress: String?
    public var lastModifiedAt: Int64?
    public var moduleType: String?
    public var msisdn: String?
    public var operatorId: String?
    public var plan: Int?
    public var serialNumber: String?
    public var sessionStatus: SessionStatus?
    public var speedClass: String?
    public var status: String?
    public var tags: Map?
    public var terminationEnabled: Bool?


    
    public init(apn: String?, createdAt: Int64?, expiredAt: Int64?, expiryAction: String?, groupId: String?, iccid: String?, imeiLock: ImeiLock?, imsi: String?, ipAddress: String?, lastModifiedAt: Int64?, moduleType: String?, msisdn: String?, operatorId: String?, plan: Int?, serialNumber: String?, sessionStatus: SessionStatus?, speedClass: String?, status: String?, tags: Map?, terminationEnabled: Bool?) {
        self.apn = apn
        self.createdAt = createdAt
        self.expiredAt = expiredAt
        self.expiryAction = expiryAction
        self.groupId = groupId
        self.iccid = iccid
        self.imeiLock = imeiLock
        self.imsi = imsi
        self.ipAddress = ipAddress
        self.lastModifiedAt = lastModifiedAt
        self.moduleType = moduleType
        self.msisdn = msisdn
        self.operatorId = operatorId
        self.plan = plan
        self.serialNumber = serialNumber
        self.sessionStatus = sessionStatus
        self.speedClass = speedClass
        self.status = status
        self.tags = tags
        self.terminationEnabled = terminationEnabled
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(apn, forKey: "apn")
        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(expiredAt, forKey: "expiredAt")
        try container.encodeIfPresent(expiryAction, forKey: "expiryAction")
        try container.encodeIfPresent(groupId, forKey: "groupId")
        try container.encodeIfPresent(iccid, forKey: "iccid")
        try container.encodeIfPresent(imeiLock, forKey: "imeiLock")
        try container.encodeIfPresent(imsi, forKey: "imsi")
        try container.encodeIfPresent(ipAddress, forKey: "ipAddress")
        try container.encodeIfPresent(lastModifiedAt, forKey: "lastModifiedAt")
        try container.encodeIfPresent(moduleType, forKey: "moduleType")
        try container.encodeIfPresent(msisdn, forKey: "msisdn")
        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(plan, forKey: "plan")
        try container.encodeIfPresent(serialNumber, forKey: "serialNumber")
        try container.encodeIfPresent(sessionStatus, forKey: "sessionStatus")
        try container.encodeIfPresent(speedClass, forKey: "speedClass")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(terminationEnabled, forKey: "terminationEnabled")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        apn = try container.decodeIfPresent(String.self, forKey: "apn")
        createdAt = try container.decodeIfPresent(Int64.self, forKey: "createdAt")
        expiredAt = try container.decodeIfPresent(Int64.self, forKey: "expiredAt")
        expiryAction = try container.decodeIfPresent(String.self, forKey: "expiryAction")
        groupId = try container.decodeIfPresent(String.self, forKey: "groupId")
        iccid = try container.decodeIfPresent(String.self, forKey: "iccid")
        imeiLock = try container.decodeIfPresent(ImeiLock.self, forKey: "imeiLock")
        imsi = try container.decodeIfPresent(String.self, forKey: "imsi")
        ipAddress = try container.decodeIfPresent(String.self, forKey: "ipAddress")
        lastModifiedAt = try container.decodeIfPresent(Int64.self, forKey: "lastModifiedAt")
        moduleType = try container.decodeIfPresent(String.self, forKey: "moduleType")
        msisdn = try container.decodeIfPresent(String.self, forKey: "msisdn")
        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        plan = try container.decodeIfPresent(Int.self, forKey: "plan")
        serialNumber = try container.decodeIfPresent(String.self, forKey: "serialNumber")
        sessionStatus = try container.decodeIfPresent(SessionStatus.self, forKey: "sessionStatus")
        speedClass = try container.decodeIfPresent(String.self, forKey: "speedClass")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        tags = try container.decodeIfPresent(Map.self, forKey: "tags")
        terminationEnabled = try container.decodeIfPresent(Bool.self, forKey: "terminationEnabled")
    }
}

