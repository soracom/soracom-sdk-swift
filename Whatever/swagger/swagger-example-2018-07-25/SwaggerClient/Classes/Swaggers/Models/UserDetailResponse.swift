//
// UserDetailResponse.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UserDetailResponse: Codable {

    public var authKeyList: [AuthKeyResponse]?
    public var createDateTime: Int64?
    public var description: String?
    public var hasPassword: Bool?
    public var permission: String?
    public var roleList: [ListRolesResponse]?
    public var updateDateTime: Int64?
    public var userName: String?


    
    public init(authKeyList: [AuthKeyResponse]?, createDateTime: Int64?, description: String?, hasPassword: Bool?, permission: String?, roleList: [ListRolesResponse]?, updateDateTime: Int64?, userName: String?) {
        self.authKeyList = authKeyList
        self.createDateTime = createDateTime
        self.description = description
        self.hasPassword = hasPassword
        self.permission = permission
        self.roleList = roleList
        self.updateDateTime = updateDateTime
        self.userName = userName
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(authKeyList, forKey: "authKeyList")
        try container.encodeIfPresent(createDateTime, forKey: "createDateTime")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(hasPassword, forKey: "hasPassword")
        try container.encodeIfPresent(permission, forKey: "permission")
        try container.encodeIfPresent(roleList, forKey: "roleList")
        try container.encodeIfPresent(updateDateTime, forKey: "updateDateTime")
        try container.encodeIfPresent(userName, forKey: "userName")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        authKeyList = try container.decodeIfPresent([AuthKeyResponse].self, forKey: "authKeyList")
        createDateTime = try container.decodeIfPresent(Int64.self, forKey: "createDateTime")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        hasPassword = try container.decodeIfPresent(Bool.self, forKey: "hasPassword")
        permission = try container.decodeIfPresent(String.self, forKey: "permission")
        roleList = try container.decodeIfPresent([ListRolesResponse].self, forKey: "roleList")
        updateDateTime = try container.decodeIfPresent(Int64.self, forKey: "updateDateTime")
        userName = try container.decodeIfPresent(String.self, forKey: "userName")
    }
}

