//
// VirtualPrivateGateway.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class VirtualPrivateGateway: Codable {

    public enum PrimaryServiceName: String, Codable { 
        case canal = "Canal"
        case direct = "Direct"
        case door = "Door"
        case gate = "Gate"
    }
    public var operatorId: String?
    public var id: String?
    public var primaryServiceName: PrimaryServiceName?
    public var type: Int?
    public var status: String?
    public var useInternetGateway: Bool?
    public var vpcPeeringConnections: Map?
    public var virtualInterfaces: Map?
    public var createdTime: Int64?
    public var lastModifiedTime: Int64?
    public var tags: Tag?


    
    public init(operatorId: String?, id: String?, primaryServiceName: PrimaryServiceName?, type: Int?, status: String?, useInternetGateway: Bool?, vpcPeeringConnections: Map?, virtualInterfaces: Map?, createdTime: Int64?, lastModifiedTime: Int64?, tags: Tag?) {
        self.operatorId = operatorId
        self.id = id
        self.primaryServiceName = primaryServiceName
        self.type = type
        self.status = status
        self.useInternetGateway = useInternetGateway
        self.vpcPeeringConnections = vpcPeeringConnections
        self.virtualInterfaces = virtualInterfaces
        self.createdTime = createdTime
        self.lastModifiedTime = lastModifiedTime
        self.tags = tags
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(operatorId, forKey: "operatorId")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(primaryServiceName, forKey: "primaryServiceName")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(useInternetGateway, forKey: "useInternetGateway")
        try container.encodeIfPresent(vpcPeeringConnections, forKey: "vpcPeeringConnections")
        try container.encodeIfPresent(virtualInterfaces, forKey: "virtualInterfaces")
        try container.encodeIfPresent(createdTime, forKey: "createdTime")
        try container.encodeIfPresent(lastModifiedTime, forKey: "lastModifiedTime")
        try container.encodeIfPresent(tags, forKey: "tags")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        operatorId = try container.decodeIfPresent(String.self, forKey: "operatorId")
        id = try container.decodeIfPresent(String.self, forKey: "id")
        primaryServiceName = try container.decodeIfPresent(PrimaryServiceName.self, forKey: "primaryServiceName")
        type = try container.decodeIfPresent(Int.self, forKey: "type")
        status = try container.decodeIfPresent(String.self, forKey: "status")
        useInternetGateway = try container.decodeIfPresent(Bool.self, forKey: "useInternetGateway")
        vpcPeeringConnections = try container.decodeIfPresent(Map.self, forKey: "vpcPeeringConnections")
        virtualInterfaces = try container.decodeIfPresent(Map.self, forKey: "virtualInterfaces")
        createdTime = try container.decodeIfPresent(Int64.self, forKey: "createdTime")
        lastModifiedTime = try container.decodeIfPresent(Int64.self, forKey: "lastModifiedTime")
        tags = try container.decodeIfPresent(Tag.self, forKey: "tags")
    }
}

